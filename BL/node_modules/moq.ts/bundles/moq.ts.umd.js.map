{"version":3,"file":"moq.ts.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/moq/src/lib/formatters/tracked-expressions.formatter.ts","../../../projects/moq/src/lib/dump.ts","../../../projects/moq/src/lib/times.ts","../../../projects/moq/src/lib/static.injector/stringify.ts","../../../projects/moq/src/lib/static.injector/property.ts","../../../projects/moq/src/lib/static.injector/forward_ref.ts","../../../projects/moq/src/lib/static.injector/injection_token.ts","../../../projects/moq/src/lib/static.injector/injector_compatibility.ts","../../../projects/moq/src/lib/static.injector/interface/injector.ts","../../../projects/moq/src/lib/static.injector/metadata.ts","../../../projects/moq/src/lib/static.injector/injector.ts","../../../projects/moq/src/lib/injector/injector.factory.ts","../../../projects/moq/src/lib/injector/mock.injection-token.ts","../../../projects/moq/src/lib/tracker/sequence-id.ts","../../../projects/moq/src/lib/tracker/tracker.ts","../../../projects/moq/src/lib/tracker/index.ts","../../../projects/moq/src/lib/reflector/expression-reflector.ts","../../../projects/moq/src/lib/reflector/expressions.ts","../../../projects/moq/src/lib/reflector/traps/get.reflector-trap.ts","../../../projects/moq/src/lib/reflector/traps/set.reflector-trap.ts","../../../projects/moq/src/lib/reflector/traps/apply.reflector-trap.ts","../../../projects/moq/src/lib/reflector/traps/has.reflector-trap.ts","../../../projects/moq/src/lib/reflector/traps/construct.reflector-trap.ts","../../../projects/moq/src/lib/reflector/reflecting-proxy.factory.ts","../../../projects/moq/src/lib/reflector/reflecting-proxy.injector-factory.ts","../../../projects/moq/src/lib/reflector/expression-predicates.ts","../../../projects/moq/src/lib/reflector/sync-expression.reflector.ts","../../../projects/moq/src/lib/reflector/composite-expression.reflector.ts","../../../projects/moq/src/lib/reflector/async-expression.detector.ts","../../../projects/moq/src/lib/reflector/async-expression.reflector.ts","../../../projects/moq/src/lib/reflector/traps/method.reflector-trap.ts","../../../projects/moq/src/lib/reflector/method-only-reflecting-proxy.factory.ts","../../../projects/moq/src/lib/reflector/async-reflecting-proxy.injector-factory.ts","../../../projects/moq/src/lib/reflector/index.ts","../../../projects/moq/src/lib/presets/presets.ts","../../../projects/moq/src/lib/playables/playable-exactly.ts","../../../projects/moq/src/lib/playables/playable-never.ts","../../../projects/moq/src/lib/playables/playable-once.ts","../../../projects/moq/src/lib/playables/playable-always.ts","../../../projects/moq/src/lib/playables/playable-sequence.ts","../../../projects/moq/src/lib/playables/play-times.ts","../../../projects/moq/src/lib/presets/preset-builder.ts","../../../projects/moq/src/lib/presets/preset-builder.factory.ts","../../../projects/moq/src/lib/presets/setup.factory.ts","../../../projects/moq/src/lib/auto-mocking/root-mock.provider.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock.provider.ts","../../../projects/moq/src/lib/presets/presets/callbacks.preset.ts","../../../projects/moq/src/lib/presets/factories/callback-preset.factory.ts","../../../projects/moq/src/lib/presets/presets/mimics.preset.ts","../../../projects/moq/src/lib/presets/factories/mimics-preset.factory.ts","../../../projects/moq/src/lib/presets/presets/returns.preset.ts","../../../projects/moq/src/lib/presets/factories/returns-async-preset.factory.ts","../../../projects/moq/src/lib/presets/factories/returns-preset.factory.ts","../../../projects/moq/src/lib/presets/factories/throws-async-preset.factory.ts","../../../projects/moq/src/lib/presets/presets/throws.preset.ts","../../../projects/moq/src/lib/presets/factories/throws-preset.factory.ts","../../../projects/moq/src/lib/presets/resolved-promise.factory.ts","../../../projects/moq/src/lib/presets/rejected-promise.factory.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/complex-expression.guard.ts","../../../projects/moq/src/lib/presets/index.ts","../../../projects/moq/src/lib/verification/verifier.ts","../../../projects/moq/src/lib/verification/call-counter.ts","../../../projects/moq/src/lib/formatters/verify.formatter.ts","../../../projects/moq/src/lib/verification/verify-error.ts","../../../projects/moq/src/lib/verification/verification-tester.ts","../../../projects/moq/src/lib/expression.equality-comparers/expression.equality-comparer.ts","../../../projects/moq/src/lib/verification/index.ts","../../../projects/moq/src/lib/interceptors/apply.trap.ts","../../../projects/moq/src/lib/interaction-players/interaction.player.ts","../../../projects/moq/src/lib/moq.ts","../../../projects/moq/src/lib/interceptors/get.trap.ts","../../../projects/moq/src/lib/interceptors/properties-value.storage.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/has-property.explorer.ts","../../../projects/moq/src/lib/explorers/has-method.explorer/has-method.explorer.ts","../../../projects/moq/src/lib/interceptors/spy-function.provider.ts","../../../projects/moq/src/lib/interceptors/get-prototype-of.trap.ts","../../../projects/moq/src/lib/interceptors/prototype.storage.ts","../../../projects/moq/src/lib/interceptors/has.trap.ts","../../../projects/moq/src/lib/explorers/in-operator-interaction.explorer/in-operator-interaction.explorer.ts","../../../projects/moq/src/lib/playables/preset-playables.updater.ts","../../../projects/moq/src/lib/interceptors/set.trap.ts","../../../projects/moq/src/lib/interceptors/set-prototype-of.trap.ts","../../../projects/moq/src/lib/interceptors/proxy.factory.ts","../../../projects/moq/src/lib/mock-options/mock-options.injection-token.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/property-is-read-only.tester.ts","../../../projects/moq/src/lib/interceptors/construct.trap.ts","../../../projects/moq/src/lib/interceptors/index.ts","../../../projects/moq/src/lib/playables/index.ts","../../../projects/moq/src/lib/interaction-players/preset.player.ts","../../../projects/moq/src/lib/interaction-players/callback-preset.player.ts","../../../projects/moq/src/lib/interaction-players/mimics-preset.player.ts","../../../projects/moq/src/lib/interaction-players/playable-preset.provider.ts","../../../projects/moq/src/lib/interaction-players/reflect-apply.injection-token.ts","../../../projects/moq/src/lib/interaction-players/index.ts","../../../projects/moq/src/lib/formatters/expressions.formatter.ts","../../../projects/moq/src/lib/formatters/interaction.formatter.ts","../../../projects/moq/src/lib/formatters/set-property.formatter.ts","../../../projects/moq/src/lib/formatters/constant.formatter.ts","../../../projects/moq/src/lib/formatters/property-key.formatter.ts","../../../projects/moq/src/lib/formatters/method.formatter.ts","../../../projects/moq/src/lib/formatters/function.formatter.ts","../../../projects/moq/src/lib/formatters/in-operator.formatter.ts","../../../projects/moq/src/lib/formatters/get-property.formatter.ts","../../../projects/moq/src/lib/formatters/new-operator.formatter.ts","../../../projects/moq/src/lib/formatters/index.ts","../../../projects/moq/src/lib/explorers/has-method.explorer/expression.has-method.explorer.ts","../../../projects/moq/src/lib/explorers/members.explorer/members-method.explorer.ts","../../../projects/moq/src/lib/explorers/has-method.explorer/preset.has-method.explorer.ts","../../../projects/moq/src/lib/explorers/has-method.explorer/object.has-method.explorer.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/expression-has-property.explorer.ts","../../../projects/moq/src/lib/explorers/members.explorer/members-property.explorer.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/preset-has-property.explorer.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/object-has-property.explorer.ts","../../../projects/moq/src/lib/explorers/in-operator-interaction.explorer/preset.has-in-operator.explorer.ts","../../../projects/moq/src/lib/explorers/members.explorer/property-descriptor.provider.ts","../../../projects/moq/src/lib/explorers/reflect-has.injection-token.ts","../../../projects/moq/src/lib/explorers/index.ts","../../../projects/moq/src/lib/mock-options/mock-options.builder.ts","../../../projects/moq/src/lib/mock-options/mock-options.providers.ts","../../../projects/moq/src/lib/core/mock-core.ts","../../../projects/moq/src/lib/core/index.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock.factory.ts","../../../projects/moq/src/lib/injector/root-mock.injection-token.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock.storage.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock-options.builder.ts","../../../projects/moq/src/lib/auto-mocking/name-formatters/auto-mock-name.formatter.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock-injector.config.ts","../../../projects/moq/src/lib/auto-mocking/name-formatters/name-prefix.provider.ts","../../../projects/moq/src/lib/injector/mock-constructor.injection-token.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/complex-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression-guard-exception.factory.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/function-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/get-property-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/set-property-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/in-operator-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/instance-method-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/new-operator-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.formatters/complex-expression.error-formatter.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.formatters/expression.formatter.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.formatters/string.error-styler.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.formatters/index.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/index.ts","../../../projects/moq/src/lib/auto-mocking/index.ts","../../../projects/moq/src/lib/expression.equality-comparers/constant.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/arguments.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/get-property.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/in-operator.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/instance-method.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/it.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/method.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/new-operator.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/set-property.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/index.ts","../../../projects/moq/src/lib/injector/default-injector.config.ts","../../../projects/moq/src/lib/mock.ts","../../../projects/moq/src/lib/equal-matchers/common-type.provider.ts","../../../projects/moq/src/lib/equal-matchers/date.matcher.ts","../../../projects/moq/src/lib/equal-matchers/equal-constant.matcher.ts","../../../projects/moq/src/lib/equal-matchers/equal.matcher.ts","../../../projects/moq/src/lib/equal-matchers/function.matcher.ts","../../../projects/moq/src/lib/equal-matchers/types.matcher.ts","../../../projects/moq/src/lib/equal-matchers/primitive.matcher.ts","../../../projects/moq/src/lib/equal-matchers/object.matcher.ts","../../../projects/moq/src/lib/equal-matchers/iterable.tester.ts","../../../projects/moq/src/lib/equal-matchers/iterator.matcher.ts","../../../projects/moq/src/lib/equal-matchers/object-matchers.injection-token.ts","../../../projects/moq/src/lib/equal-matchers/pojo.matcher.ts","../../../projects/moq/src/lib/equal-matchers/object-map.provider.ts","../../../projects/moq/src/lib/equal-matchers/map.matcher.ts","../../../projects/moq/src/lib/equal-matchers/index.ts","../../../projects/moq/src/lib/injector/equal-matching-injector.config.ts","../../../projects/moq/src/lib/presets/factories/mimics-rejected-async-preset.factory.ts","../../../projects/moq/src/lib/presets/factories/mimics-resolved-async-preset.factory.ts","../../../projects/moq/src/lib/reflector/method-reflecting-proxy.factory.ts","../../../projects/moq/src/lib/static.injector/type.ts","../../../projects/moq/src/public_api.ts","../../../projects/moq/src/moq.ts.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { InteractionFormatter } from \"./interaction.formatter\";\nimport { Expression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class TrackedExpressionsFormatter {\n\n    constructor(private interactionFormatter: InteractionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expression[]): string {\n        let result = \"\";\n        for (const expression of trackedExpressions) {\n            result += `${this.interactionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n","import { TrackedExpressionsFormatter } from \"./formatters/tracked-expressions.formatter\";\r\nimport { IMock } from \"./moq\";\r\n\r\n/**\r\n * This function dumps into console.log all interactions with the mocked object\r\n */\r\nexport function dump<T>(mock: IMock<T>, writer: Console = console): void {\r\n    const formatter = mock.resolve(TrackedExpressionsFormatter);\r\n    const expressions = mock.tracker.get().map(record => record.expression);\r\n    const output = formatter.format(expressions);\r\n    const delimiter = \"-------------------------------\";\r\n    writer.log(`Dump of ${mock.name === undefined ? \"noname mock\" : mock.name}`);\r\n    writer.log(delimiter);\r\n    writer.log(`\\n${output}`);\r\n    writer.log(delimiter);\r\n}\r\n","/**\n * Sets the rules where bounds of a range are included or excluded from the range.\n * See {@link Times.Between}\n */\nexport enum Range {\n    Exclusive,\n    Inclusive\n}\n\n/**\n * This class expresses the expectation about amount of invocations.\n *\n * @example\n * ```typescript\n *\n * const times = new Times(expected => expected === 1, `Should be called once`);\n * const actual = times.test(2);\n *\n * expect(actual).toBe(false);\n * expect(times.message).toBe(`Should be called once`);\n * ```\n *\n * ```typescript\n *\n * const mockName = 'mock name';\n *const mock = new Mock<ITestObject>(mockName);\n *const object = mock.object();\n *\n *object.property;\n *\n *const action = () => mock.verify(instance => instance.property, Times.AtLeast(2));\n *\n *expect(action).toThrow();\n * ```\n */\nexport class Times {\n    private static _once: Times = new Times(expected => expected === 1, \"Should be called once\");\n    private static _never: Times = new Times(expected => expected === 0, \"Should be called never\");\n    private static _atMostOnce: Times = new Times(expected => expected <= 1, \"Should be called at most once\");\n    private static _atLeastOnce: Times = new Times(expected => expected >= 1, \"Should be called at least once\");\n\n    /**\n     *\n     * @param evaluator It takes actual value and decides if it is expected or not.\n     * Returns true or false accordingly.\n     * @param message A message that describes the expectation.\n     */\n    constructor(private evaluator: (callCount: number) => boolean,\n                public message: string) {\n\n    }\n\n    /**\n     * It expects that the actual would be equal or bigger then the expected value.\n     *\n     * @param callCount The expected value.\n     */\n    public static AtLeast(callCount: number): Times {\n        return new Times(expected => expected >= callCount, `Should be called at least ${callCount} time(s)`);\n    }\n\n    /**\n     * It expects that the actual would be equal or bigger then 1.\n     */\n    public static AtLeastOnce(): Times {\n        return Times._atLeastOnce;\n    }\n\n    /**\n     * It expects that the actual would be equal or smaller then the expected value.\n     *\n     * @param callCount The expected value.\n     */\n    public static AtMost(callCount: number): Times {\n        return new Times(expected => expected <= callCount, `Should be called at most ${callCount} time(s)`);\n    }\n\n    /**\n     * It expects that the actual would be equal or less then 1.\n     */\n    public static AtMostOnce(): Times {\n        return Times._atMostOnce;\n    }\n\n    /**\n     * It expects that the actual would be in the expected range of values.\n     *\n     * @param callCountFrom The lowest bound of the range.\n     * @param callCountTo The highest bound of the range.\n     * @param range  Sets the rules where bounds of a range are included or excluded from the range.\n     */\n    public static Between(callCountFrom: number, callCountTo: number, range: Range): Times {\n        if (range === Range.Exclusive) {\n            return new Times(\n                expected => expected > callCountFrom && expected < callCountTo,\n                `Should be called exclusively between ${callCountFrom} and ${callCountTo}`);\n        }\n\n        return new Times(\n            expected => expected >= callCountFrom && expected <= callCountTo,\n            `Should be called inclusively between ${callCountFrom} and ${callCountTo}`);\n    }\n\n    /**\n     * It expects that the actual is equal to the expected value.\n     *\n     * @param callCount The expected value.\n     */\n    public static Exactly(callCount: number): Times {\n        return new Times(\n            expected => expected === callCount,\n            `Should be called exactly ${callCount} time(s)`);\n    }\n\n    /**\n     * It expects that the actual is equal 0.\n     */\n    public static Never(): Times {\n        return Times._never;\n    }\n\n    /**\n     * It expects that the actual is equal 1.\n     */\n    public static Once(): Times {\n        return Times._once;\n    }\n\n    /**\n     * Evaluates the expectation against the actual value.\n     *\n     * @param callCount The actual value.\n     */\n    public test(callCount: number): boolean {\n        return this.evaluator(callCount);\n    }\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function stringify(token: any): string {\n    if (typeof token === \"string\") {\n        return token;\n    }\n\n    if (Array.isArray(token)) {\n        return `[${token.map(stringify).join(\", \")}]`;\n    }\n\n    if (token == null) {\n        return `${  token}`;\n    }\n\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n\n    if (token.name) {\n        return `${token.name}`;\n    }\n\n    const res = token.toString();\n\n    if (res == null) {\n        return `${  res}`;\n    }\n\n    const newLineIndex = res.indexOf(\"\\n\");\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (const key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\n      return key;\n    }\n  }\n  throw Error(\"Could not find renamed property on target object.\");\n}\n","/* eslint-disable */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Type } from \"./type\";\nimport { stringify } from \"./stringify\";\nimport { getClosureSafeProperty } from \"./property\";\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport type ForwardRefFn = () => any;\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n    (<any>forwardRefFn).__forward_ref__ = forwardRef;\n    (<any>forwardRefFn).toString = function () {\n        return stringify(this());\n    };\n    return (<Type<any>><any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef<T>(type: T): T {\n    return isForwardRef(type) ? type() : type;\n}\n\n/** Checks whether a function is wrapped by a `forwardRef`. */\nexport function isForwardRef(fn: any): fn is() => any {\n    return typeof fn === \"function\" && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef;\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport class InjectionToken<T> {\n    constructor(protected desc: string) {\n    }\n\n    toString(): string {\n        return `InjectionToken ${this.desc}`;\n    }\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from \"./injection_token\";\nimport { Injector } from \"./injector\";\nimport { ValueProvider } from \"./interface/provider\";\nimport { getClosureSafeProperty } from \"./property\";\nimport { stringify } from \"./stringify\";\n\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport const INJECTOR = new InjectionToken<Injector>(\n    \"INJECTOR\"\n);\n\nconst _THROW_IF_NOT_FOUND = {};\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\nexport const NG_TEMP_TOKEN_PATH = \"ngTempTokenPath\";\nconst NG_TOKEN_PATH = \"ngTokenPath\";\nconst NEW_LINE = /\\n/gm;\nexport const NO_NEW_LINE = \"ɵ\";\nexport const SOURCE = \"__source\";\n\nexport const USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nexport class NullInjector implements Injector {\n    get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n        if (notFoundValue === THROW_IF_NOT_FOUND) {\n            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n            error.name = \"NullInjectorError\";\n            throw error;\n        }\n        return notFoundValue;\n    }\n}\n\n\nexport function catchInjectorError(\n    e: any, token: any, injectorErrorName: string, source: string | null): never {\n    const tokenPath: any[] = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError(`\\n${e.message}`, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\n\nexport function formatError(\n    text: string, obj: any, injectorErrorName: string, source: string | null = null): string {\n    text = text && text.charAt(0) === \"\\n\" && text.charAt(1) === NO_NEW_LINE ? text.substr(2) : text;\n    let context = stringify(obj);\n    if (Array.isArray(obj)) {\n        context = obj.map(stringify).join(\" -> \");\n    } else if (typeof obj === \"object\") {\n        const parts = <string[]>[];\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                const value = obj[key];\n                parts.push(\n                    `${key}:${typeof value === \"string\" ? JSON.stringify(value) : stringify(value)}`);\n            }\n        }\n        context = `{${parts.join(\", \")}}`;\n    }\n    return `${injectorErrorName}${source ? `(${source})` : \"\"}[${context}]: ${\n        text.replace(NEW_LINE, \"\\n  \")}`;\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport enum InjectFlags {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n\n    /** Check self and check parent injector if needed */\n    Default = 0b0000,\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    Host = 0b0001,\n    /** Don't ascend to ancestors of the node requesting injection. */\n    Self = 0b0010,\n    /** Skip the node that is requesting injection. */\n    SkipSelf = 0b0100,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional = 0b1000,\n}\n","/* eslint-disable */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type of the Optional metadata.\n */\nexport class Optional {\n\n}\n\n/**\n * Type of the Self metadata.\n */\nexport class Self {\n\n}\n\n/**\n * Type of the SkipSelf metadata.\n */\nexport class SkipSelf {\n\n}\n\n/**\n * Type of the Host metadata.\n */\nexport class Host {\n\n}\n\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { resolveForwardRef } from \"./forward_ref\";\nimport { InjectionToken } from \"./injection_token\";\nimport {\n    catchInjectorError,\n    formatError,\n    INJECTOR,\n    NG_TEMP_TOKEN_PATH, NO_NEW_LINE,\n    NullInjector,\n    THROW_IF_NOT_FOUND,\n    USE_VALUE\n} from \"./injector_compatibility\";\nimport { InjectFlags } from \"./interface/injector\";\nimport {\n    ConstructorProvider,\n    ExistingProvider,\n    FactoryProvider,\n    StaticClassProvider,\n    StaticProvider,\n    ValueProvider\n} from \"./interface/provider\";\nimport { Optional, Self, SkipSelf } from \"./metadata\";\nimport { AbstractType, Type } from \"./type\";\nimport { stringify } from \"./stringify\";\n\nexport const INJECTOR_IMPL = (\n    providers: StaticProvider[], parent: Injector | undefined, name: string) => new StaticInjector(providers, parent, name);\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport abstract class Injector {\n    static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n    static NULL: Injector = new NullInjector();\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = -1;\n\n    /**\n     * Creates a new injector instance that provides one or more dependencies,\n     * according to a given type or types of `StaticProvider`.\n     *\n     * @param options An object with the following properties:\n     * * `providers`: An array of providers of the [StaticProvider type](api/core/StaticProvider).\n     * * `parent`: (optional) A parent injector.\n     * * `name`: (optional) A developer-defined identifying name for the new injector.\n     *\n     * @returns The new injector instance.\n     *\n     */\n    static create(options: { providers: StaticProvider[]; parent?: Injector; name?: string }): Injector;\n\n    static create(\n        options: StaticProvider[] | { providers: StaticProvider[]; parent?: Injector; name?: string },\n        parent?: Injector): Injector {\n        if (Array.isArray(options)) {\n            return INJECTOR_IMPL(options, parent, \"\");\n        } else {\n            return INJECTOR_IMPL(options.providers, options.parent, options.name || \"\");\n        }\n    }\n\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     *\n     * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     */\n    abstract get<T>(\n        token: Type<T> | InjectionToken<T> | AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;\n}\n\n\nconst IDENT = function <T>(value: T): T {\n    return value;\n};\nconst EMPTY = <any[]>[];\nconst CIRCULAR = IDENT;\nconst MULTI_PROVIDER_FN = function (): any[] {\n    return Array.prototype.slice.call(arguments);\n};\n\nconst enum OptionFlags {\n    Optional = 1,\n    CheckSelf = 2,\n    CheckParent = 4,\n    // eslint-disable-next-line no-bitwise\n    Default = CheckSelf | CheckParent\n}\n\nexport class StaticInjector implements Injector {\n    readonly parent: Injector;\n    readonly source: string | null;\n    readonly scope: string | null;\n\n    private _records: Map<any, Record | null>;\n\n    constructor(\n        providers: StaticProvider[], parent = new NullInjector(), source: string | null = null) {\n        this.parent = parent;\n        this.source = source;\n        const records = this._records = new Map<any, Record>();\n        records.set(Injector, <Record>{token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n        records.set(INJECTOR, <Record>{token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n        this.scope = recursivelyProcessProviders(records, providers);\n    }\n\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n    get(token: any, notFoundValue?: any): any;\n    get(token: any, notFoundValue?: any, flags: InjectFlags = InjectFlags.Default): any {\n        const records = this._records;\n        const record = records.get(token);\n        if (record === undefined) {\n            records.set(token, null);\n        }\n        try {\n            return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);\n        } catch (e) {\n            return catchInjectorError(e, token, \"StaticInjectorError\", this.source);\n        }\n    }\n\n    toString() {\n        const tokens = <string[]>[]; const records = this._records;\n        records.forEach((v, token) => tokens.push(stringify(token)));\n        return `StaticInjector[${tokens.join(\", \")}]`;\n    }\n}\n\ntype SupportedProvider =\n    ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider;\n\ninterface Record {\n    fn: Function;\n    useNew: boolean;\n    deps: DependencyRecord[];\n    value: any;\n}\n\ninterface DependencyRecord {\n    token: any;\n    options: number;\n}\n\nfunction resolveProvider(provider: SupportedProvider): Record {\n    const deps = computeDeps(provider);\n    let fn: Function = IDENT;\n    let value: any = EMPTY;\n    let useNew = false;\n    const provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = (provider as ValueProvider).useValue;\n    } else if ((provider as FactoryProvider).useFactory) {\n        fn = (provider as FactoryProvider).useFactory;\n    } else if ((provider as ExistingProvider).useExisting) {\n        // Just use IDENT\n    } else if ((provider as StaticClassProvider).useClass) {\n        useNew = true;\n        fn = resolveForwardRef((provider as StaticClassProvider).useClass);\n    } else if (typeof provide === \"function\") {\n        useNew = true;\n        fn = provide;\n    } else {\n        throw staticError(\n            \"StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable\",\n            provider);\n    }\n    return {deps, fn, useNew, value};\n}\n\nfunction multiProviderMixError(token: any) {\n    return staticError(\"Cannot mix multi providers and regular providers\", token);\n}\n\nfunction recursivelyProcessProviders(records: Map<any, Record>, provider: StaticProvider): string |\n    null {\n    let scope: string | null = null;\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (Array.isArray(provider)) {\n            // if we have an array recurse into the array\n            for (let i = 0; i < provider.length; i++) {\n                scope = recursivelyProcessProviders(records, provider[i]) || scope;\n            }\n        } else if (typeof provider === \"function\") {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError(\"Function/Class not supported\", provider);\n        } else if (provider && typeof provider === \"object\" && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            let token = resolveForwardRef(provider.provide);\n            const resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                let multiProvider: Record | undefined = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                } else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = <Record>{\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    });\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({token, options: OptionFlags.Default});\n            }\n            const record = records.get(token);\n            if (record && record.fn === MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        } else {\n            throw staticError(\"Unexpected provider\", provider);\n        }\n    }\n    return scope;\n}\n\nfunction tryResolveToken(\n    token: any, record: Record | undefined | null, records: Map<any, Record | null>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    } catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value === CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n\nfunction resolveToken(\n    token: any, record: Record | undefined | null, records: Map<any, Record | null>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n    let value;\n    // eslint-disable-next-line no-bitwise\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value === CIRCULAR) {\n            throw Error(`${NO_NEW_LINE  }Circular dependency`);\n        } else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            const {useNew, fn, deps: depRecords} = record;\n            let deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (let i = 0; i < depRecords.length; i++) {\n                    const depRecord: DependencyRecord = depRecords[i];\n                    const options = depRecord.options;\n                    // eslint-disable-next-line no-bitwise\n                    const childRecord = options & OptionFlags.CheckSelf ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                        // Current Token to resolve\n                        depRecord.token,\n                        // A record which describes how to resolve the token.\n                        // If undefined, this means we don't have such a record\n                        childRecord,\n                        // Other records we know about.\n                        records,\n                        // If we don't know how to resolve dependency and we should not check parent for it,\n                        // than pass in Null injector.\n                        // eslint-disable-next-line no-bitwise\n                        !childRecord && !(options & OptionFlags.CheckParent) ? Injector.NULL : parent,\n                        // eslint-disable-next-line no-bitwise\n                        options & OptionFlags.Optional ? null : Injector.THROW_IF_NOT_FOUND,\n                        InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new (fn as any)(...deps) : fn.apply(undefined, deps);\n        }\n        // eslint-disable-next-line no-bitwise\n    } else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n        // eslint-disable-next-line no-bitwise\n    } else if (!(flags & InjectFlags.Optional)) {\n        value = Injector.NULL.get(token, notFoundValue);\n    } else {\n        value = Injector.NULL.get(token, typeof notFoundValue !== \"undefined\" ? notFoundValue : null);\n    }\n    return value;\n}\n\nfunction computeDeps(provider: StaticProvider): DependencyRecord[] {\n    let deps: DependencyRecord[] = EMPTY;\n    const providerDeps: any[] =\n        (provider as ExistingProvider & StaticClassProvider & ConstructorProvider).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (let i = 0; i < providerDeps.length; i++) {\n            let options = OptionFlags.Default;\n            let token = resolveForwardRef(providerDeps[i]);\n            if (Array.isArray(token)) {\n                for (let j = 0, annotations = token; j < annotations.length; j++) {\n                    const annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation === Optional) {\n                        // eslint-disable-next-line no-bitwise\n                        options = options | OptionFlags.Optional;\n                    } else if (annotation instanceof SkipSelf || annotation === SkipSelf) {\n                        // eslint-disable-next-line no-bitwise\n                        options = options & ~OptionFlags.CheckSelf;\n                    } else if (annotation instanceof Self || annotation === Self) {\n                        // eslint-disable-next-line no-bitwise\n                        options = options & ~OptionFlags.CheckParent;\n                    } else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({token, options});\n        }\n    } else if ((provider as ExistingProvider).useExisting) {\n        const token = resolveForwardRef((provider as ExistingProvider).useExisting);\n        deps = [{token, options: OptionFlags.Default}];\n    } else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError(\"'deps' required\", provider);\n    }\n    return deps;\n}\n\nfunction staticError(text: string, obj: any): Error {\n    return new Error(formatError(text, obj, \"StaticInjectorError\"));\n}\n","import { IMockOptions } from \"../moq\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport { Injector } from \"../static.injector/injector\";\n\n/**\n * Creates an angular based injector\n */\nexport function injectorFactory<T>(options: IMockOptions<T>, ...providers: StaticProvider[]) {\n    const {injectorConfig} = options;\n    if (injectorConfig) {\n        const resolved = injectorConfig.get(options, providers);\n        return Injector.create({\n            providers: resolved\n        });\n    }\n    throw new Error(\"injectorConfig is not defined\");\n}\n\n","import { IMock } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @Hidden\n */\nexport const MOCK = new InjectionToken<IMock<unknown>>(\"IMock\");\n","/**\n * @hidden\n */\nexport class SequenceId {\n    private value = 0;\n\n    public next(): number {\n        return this.value++;\n    }\n}\n","import { Expression } from \"../reflector/expressions\";\nimport { SequenceId } from \"./sequence-id\";\n\n/**\n * This class represents a recorded interaction with the a mocked object.\n */\nexport interface TrackedAction {\n    id: number;\n    expression: Expression;\n}\n\n/**\n * This class records all interactions with a mocked object.\n */\nexport class Tracker {\n    private log: TrackedAction[] = [];\n\n    constructor(private sequenceId: SequenceId) {\n\n    }\n\n    /**\n     * @hidden\n     */\n    public add(action: Expression): void {\n        const record = {id: this.sequenceId.next(), expression: action};\n        this.log.push(record);\n    }\n\n    /**\n     * Returns recorded interactions.\n     */\n    public get(): TrackedAction[] {\n        return [...this.log];\n    }\n\n    public interactions(): Expression[] {\n        return this.get().map(record => record.expression);\n    }\n}\n","import { SequenceId } from \"./sequence-id\";\nimport { Tracker } from \"./tracker\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: SequenceId, useClass: SequenceId, deps: []},\n    {provide: Tracker, useClass: Tracker, deps: [SequenceId]}\n];\n","import { It } from \"./expression-predicates\";\nimport { Expressions } from \"./expressions\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * A function that accepts a [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n * and either plays expected interaction or returns a predicate function.\n * See {@link IMock.setup} function and {@link It} class for more details.\n */\nexport type IExpression<T> = (instance: T) => void | any | It<T>;\n\n/**\n * This class reflects an expression to an expression tree representation.\n */\nexport interface ExpressionReflector {\n    /**\n     * Reflects the provided code as an expression tree.\n     */\n    reflect<T>(expression: IExpression<T>): Expressions<T>[];\n}\n\n/**\n * Injection token for an expression reflector\n */\nexport const EXPRESSION_REFLECTOR = new InjectionToken<ExpressionReflector>(\"Expression reflector\");\n\n/**\n * @hidden\n */\nexport const EXPRESSIONS = new InjectionToken<Expressions<unknown>[]>(\"reflected expressions\");\n\n/**\n * @hidden\n */\nexport interface IReturnValueFactory {\n    create(): any;\n}\n\n/**\n * @hidden\n */\nexport const GET_RETURN_VALUE = new InjectionToken<IReturnValueFactory>(\"return value factory for the get trap\");\n\n/**\n * @hidden\n */\nexport const APPLY_RETURN_VALUE = new InjectionToken<IReturnValueFactory>(\"return value factory for the apply trap\");\n\n/**\n * @hidden\n */\nexport const CONSTRUCT_RETURN_VALUE = new InjectionToken<IReturnValueFactory>(\"return value factory for the construct trap\");\n","/*eslint-disable max-classes-per-file*/\nimport { It } from \"./expression-predicates\";\n\nexport abstract class Expression {\n    protected constructor(\n        public readonly name: PropertyKey,\n        public readonly args: any[]) {\n\n    }\n}\n\n/**\n * This class represents an invocation of an instance method.\n * It provides access to the name of it and the parameters.\n */\nexport class MethodExpression extends Expression {\n    constructor(name: PropertyKey,\n                args: any[]) {\n        super(name, args);\n    }\n}\n\n/**\n * This class represents an invocation of a function.\n * It provides access to the parameters.\n */\nexport class FunctionExpression extends Expression {\n    constructor(args: any[]) {\n        super(undefined, args);\n    }\n}\n\n/**\n * This class represents a property accessing.\n * It provides access to the name of property.\n */\nexport class GetPropertyExpression extends Expression {\n    constructor(name: PropertyKey) {\n        super(name, undefined);\n    }\n}\n\n/**\n * This class represents a property write interaction.\n * It provides access to the name of property and the value.\n */\nexport class SetPropertyExpression extends Expression {\n    constructor(name: PropertyKey,\n                public readonly value: any) {\n        super(name, [value]);\n    }\n}\n\n/**\n * This class represents applying of [in operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in).\n * It provides access to the name of property.\n */\nexport class InOperatorExpression extends Expression {\n    constructor(name: PropertyKey) {\n        super(name, undefined);\n    }\n}\n\n/**\n * This class represents applying of [new operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new).\n * It provides access to the arguments of the constructor.\n */\nexport class NewOperatorExpression extends Expression {\n    constructor(args: any[]) {\n        super(undefined, args);\n    }\n}\n\n/**\n * Union of the expressions and It type.\n */\nexport type Expressions<T> =\n    FunctionExpression\n    | GetPropertyExpression\n    | SetPropertyExpression\n    | InOperatorExpression\n    | MethodExpression\n    | NewOperatorExpression\n    | It<T>;\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IReturnValueFactory } from \"../expression-reflector\";\nimport { GetPropertyExpression } from \"../expressions\";\n\nexport class GetReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly returnValueFactory: IReturnValueFactory,\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, name) => {\n            this.expressions.push(new GetPropertyExpression(name));\n            return this.returnValueFactory.create();\n        };\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { SetPropertyExpression } from \"../expressions\";\n\nexport class SetReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, name, value) => {\n            this.expressions.push(new SetPropertyExpression(name, value));\n            return true;\n        };\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IReturnValueFactory } from \"../expression-reflector\";\nimport { GetPropertyExpression, FunctionExpression, MethodExpression } from \"../expressions\";\n\nexport class ApplyReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly returnValueFactory: IReturnValueFactory,\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, thisArg, args) => {\n            const last = this.expressions.pop();\n            if (last instanceof GetPropertyExpression) {\n                this.expressions.push(new MethodExpression(last.name, args));\n            } else {\n                if (last !== undefined) {\n                    this.expressions.push(last);\n                }\n                this.expressions.push(new FunctionExpression(args));\n            }\n            return this.returnValueFactory.create();\n        };\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { InOperatorExpression } from \"../expressions\";\n\nexport class HasReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, name) => {\n            this.expressions.push(new InOperatorExpression(name));\n            return true;\n        };\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IReturnValueFactory } from \"../expression-reflector\";\nimport { NewOperatorExpression } from \"../expressions\";\n\nexport class ConstructReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly returnValueFactory: IReturnValueFactory,\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: any, args: any) => {\n            this.expressions.push(new NewOperatorExpression(args));\n            return this.returnValueFactory.create();\n        };\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { GetReflectorTrap } from \"./traps/get.reflector-trap\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { SetReflectorTrap } from \"./traps/set.reflector-trap\";\nimport { ApplyReflectorTrap } from \"./traps/apply.reflector-trap\";\nimport { HasReflectorTrap } from \"./traps/has.reflector-trap\";\nimport { ConstructReflectorTrap } from \"./traps/construct.reflector-trap\";\nimport { IReturnValueFactory } from \"./expression-reflector\";\n\nexport class ReflectingProxyFactory implements IReturnValueFactory {\n    constructor(private readonly injector: Injector) {\n    }\n\n    create() {\n        const get = this.injector.get(GetReflectorTrap) as unknown as TypeOfInjectionFactory<GetReflectorTrap>;\n        const set = this.injector.get(SetReflectorTrap) as unknown as TypeOfInjectionFactory<SetReflectorTrap>;\n        const apply = this.injector.get(ApplyReflectorTrap) as unknown as TypeOfInjectionFactory<ApplyReflectorTrap>;\n        const has = this.injector.get(HasReflectorTrap) as unknown as TypeOfInjectionFactory<HasReflectorTrap>;\n        const construct = this.injector.get(ConstructReflectorTrap) as unknown as TypeOfInjectionFactory<ConstructReflectorTrap>;\n        const options = {get, set, apply, has, construct};\n        const reflector = function () {\n            return undefined;\n        };\n        return new Proxy(reflector, options);\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { ReflectingProxyFactory } from \"./reflecting-proxy.factory\";\nimport { GetReflectorTrap } from \"./traps/get.reflector-trap\";\nimport { SetReflectorTrap } from \"./traps/set.reflector-trap\";\nimport { ApplyReflectorTrap } from \"./traps/apply.reflector-trap\";\nimport { HasReflectorTrap } from \"./traps/has.reflector-trap\";\nimport { ConstructReflectorTrap } from \"./traps/construct.reflector-trap\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport { APPLY_RETURN_VALUE, CONSTRUCT_RETURN_VALUE, EXPRESSIONS, GET_RETURN_VALUE } from \"./expression-reflector\";\n\nexport class ReflectingProxyInjectorFactory {\n    create(options: { providers: StaticProvider[] } = {providers: []}) {\n        const providers = [\n            {provide: EXPRESSIONS, useValue: [], deps: []},\n            {provide: ReflectingProxyFactory, useClass: ReflectingProxyFactory, deps: [Injector]},\n            {provide: GetReflectorTrap, useClass: GetReflectorTrap, deps: [GET_RETURN_VALUE, EXPRESSIONS]},\n            {provide: GET_RETURN_VALUE, useExisting: ReflectingProxyFactory, deps: []},\n            {provide: SetReflectorTrap, useClass: SetReflectorTrap, deps: [EXPRESSIONS]},\n            {provide: ApplyReflectorTrap, useClass: ApplyReflectorTrap, deps: [APPLY_RETURN_VALUE, EXPRESSIONS]},\n            {provide: APPLY_RETURN_VALUE, useExisting: ReflectingProxyFactory, deps: []},\n            {provide: HasReflectorTrap, useClass: HasReflectorTrap, deps: [EXPRESSIONS]},\n            {\n                provide: ConstructReflectorTrap,\n                useClass: ConstructReflectorTrap,\n                deps: [CONSTRUCT_RETURN_VALUE, EXPRESSIONS]\n            },\n            {provide: CONSTRUCT_RETURN_VALUE, useExisting: ReflectingProxyFactory, deps: []},\n            ...options.providers\n        ];\n        return Injector.create({providers});\n    }\n}\n","/*eslint @typescript-eslint/naming-convention: \"off\"*/\nexport type IPredicate<T> = (instance: T) => boolean;\n\n/**\n * This class allows to express wide range of cases in an expression.\n * You can use it with setups or verifies methods.\n *\n * @example\n * ```typescript\n *\n *  const value = 'value';\n *  const object = new Mock<Function>()\n *  .setup(instance => instance(1))\n *  .returns(value)\n *  .setup(instance => instance(It.Is(param => param > 0 && param < 2))\n *  .returns(value)\n *  .setup(instance => instance(It.IsAny())\n *  .returns(value)\n *  .object();\n *\n *  const actual = object(1);\n *\n *  expect(actual).toBe(value);\n * ```\n *\n * This class could be used not only for args matching, but also for function names, property names and so on.\n *\n * @example\n * ```typescript\n *\n * const object = new Mock<ITestObject>()\n * // the expression dynamically checks the property name that is being read\n * .setup(instance => It.Is((expression: GetPropertyExpression) => expression.name === 'property'))\n * .returns(value)\n * .object();\n *\n * const object = new Mock<ITestObject>()\n * //denis any write operation on the property\n * .setup(instance => { instance.property = It.IsAny()})\n * // true - allow, false - deny\n * .returns(false)\n * .object();\n *\n * const object = new Mock<ITestObject>()\n * .setup(instance => It.Is((expression: NamedMethodExpression) => expression.name === 'methodName' && expression.args[0] === 1))\n * .returns(value)\n * .object();\n *\n * // how to use with verify\n * mock.verify(instance => instance.method(It.Is(a => a === 2)));\n * ```\n */\nexport class It<P> {\n    constructor(public readonly predicate: IPredicate<P>) {\n\n    }\n\n    /**\n     * This factory method returns an expression that matches custom cases.\n     *\n     * @example\n     * ```typescript\n     *\n     *  const value = 'value';\n     *  const object = new Mock<Function>()\n     *  .setup(instance => instance(It.Is(param => param > 0 && param < 2))\n     *  .returns(value)\n     *  .object();\n     *\n     *  const actual = object(only_values_between_0_and_2_will_trigger_the_setup);\n     *\n     *  expect(actual).toBe(value);\n     * ```\n     */\n    public static Is<T>(predicate: IPredicate<T>): It<T> | any {\n        return new It(predicate);\n    }\n\n    /**\n     * This factory method returns a wildcat expression that matches any value.\n     *\n     * @example\n     * ```typescript\n     *\n     *  const value = 'value';\n     *  const object = new Mock<Function>()\n     *  .setup(instance => instance(It.IsAny())\n     *  .returns(value)\n     *  .object();\n     *\n     *  const actual = object(any_value_will_trigger_the_setup);\n     *\n     *  expect(actual).toBe(value);\n     * ```\n     */\n    public static IsAny<T>(): It<T> | any {\n        return new It(It.isAnyPredicate);\n    }\n\n    private static readonly isAnyPredicate = (): boolean => true;\n\n    /**\n     * Exams if the instance matches the predicate.\n     */\n    public test(instance?: P): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n","import { It } from \"./expression-predicates\";\nimport { Expressions } from \"./expressions\";\nimport { ReflectingProxyInjectorFactory } from \"./reflecting-proxy.injector-factory\";\nimport { ExpressionReflector, EXPRESSIONS, IExpression } from \"./expression-reflector\";\nimport { ReflectingProxyFactory } from \"./reflecting-proxy.factory\";\n\n/**\n * This class reflects an expression to an expression tree representation.\n * async/await is not supported.\n *\n * For more examples check\n * [unit tests for this class]\n * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/full.expression-reflector.spec.ts)\n */\nexport class SyncExpressionReflector implements ExpressionReflector {\n    constructor(private readonly injectorFactory: ReflectingProxyInjectorFactory) {\n    }\n\n    /**\n     * Reflects the provided code as an expression tree.\n     */\n    public reflect<T>(expression: IExpression<T>): Expressions<T>[] {\n        if (expression instanceof It) {\n            return [expression];\n        }\n\n        const injector = this.injectorFactory.create();\n\n        const proxyFactory = injector.get(ReflectingProxyFactory);\n        const proxy = proxyFactory.create();\n\n        const predicate = expression(proxy);\n\n        const expressions = injector.get(EXPRESSIONS);\n\n        return predicate instanceof It && expressions.length === 0\n            ? [predicate] : expressions;\n    }\n\n    public async reflectAsync<T>(expression: IExpression<T>): Promise<Expressions<T>[]> {\n        if (expression instanceof It) {\n            return [expression];\n        }\n\n        const injector = this.injectorFactory.create();\n\n        const proxyFactory = injector.get(ReflectingProxyFactory);\n        const proxy = proxyFactory.create();\n\n        const predicate = await expression(proxy);\n\n        const expressions = injector.get(EXPRESSIONS);\n        return predicate instanceof It && expressions.length === 0\n            ? [predicate] : expressions;\n    }\n}\n","import { Expressions } from \"./expressions\";\nimport { ExpressionReflector, IExpression } from \"./expression-reflector\";\nimport { AsyncExpressionDetector } from \"./async-expression.detector\";\nimport { AsyncExpressionReflector } from \"./async-expression.reflector\";\nimport { SyncExpressionReflector } from \"./sync-expression.reflector\";\n\n/**\n * This class reflects an expression to an expression tree representation.\n * async/await expressions are reflected in shellow mode.\n *\n * For more examples check\n * [unit tests for this class]\n * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/full.expression-reflector.spec.ts)\n */\nexport class CompositeExpressionReflector implements ExpressionReflector {\n    constructor(\n        private readonly asyncExpressionDetector: AsyncExpressionDetector,\n        private readonly syncExpressionReflector: SyncExpressionReflector,\n        private readonly asyncExpressionReflector: AsyncExpressionReflector) {\n    }\n\n    /**\n     * Reflects the provided code as an expression tree.\n     */\n    public reflect<T>(expression: IExpression<T>): Expressions<T>[] {\n        return this.asyncExpressionDetector.isAsync(expression)\n            ? this.asyncExpressionReflector.reflect(expression)\n            : this.syncExpressionReflector.reflect(expression);\n    }\n}\n","import { IExpression } from \"./expression-reflector\";\nimport { It } from \"./expression-predicates\";\n\nexport class AsyncExpressionDetector {\n    public isAsync<T>(expression: IExpression<T>) {\n        if (expression instanceof It) {\n            return false;\n        }\n\n        const get = () => proxy;\n        const set = () => true;\n        const apply = () => proxy;\n        const has = () => false;\n        const construct = () => proxy;\n        const options = {get, set, apply, has, construct};\n        const reflector = function () {\n            return undefined;\n        };\n        const proxy = new Proxy(reflector, options);\n        const predicate = expression(proxy as any);\n\n        return predicate instanceof It ? false : predicate instanceof Promise;\n    }\n}\n","import { Expressions } from \"./expressions\";\nimport { ExpressionReflector, EXPRESSIONS, IExpression } from \"./expression-reflector\";\nimport { ReflectingProxyFactory } from \"./reflecting-proxy.factory\";\nimport { AsyncReflectingProxyInjectorFactory } from \"./async-reflecting-proxy.injector-factory\";\n\n/**\n * This class reflects an async expression to an expression tree representation.\n * For more examples check\n * [unit tests for this class]\n * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/async.expression-reflector.spec.ts)\n */\nexport class AsyncExpressionReflector implements ExpressionReflector {\n    constructor(private readonly injectorFactory: AsyncReflectingProxyInjectorFactory) {\n    }\n\n    /**\n     * Reflects the provided async code as an expression tree.\n     */\n    public reflect<T>(expression: IExpression<T>): Expressions<T>[] {\n\n        const injector = this.injectorFactory.create();\n        const proxyFactory = injector.get(ReflectingProxyFactory);\n        const proxy = proxyFactory.create();\n        expression(proxy);\n\n        return injector.get(EXPRESSIONS);\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { GetPropertyExpression, MethodExpression } from \"../expressions\";\n\nexport class MethodReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, thisArg, args) => {\n            const last = this.expressions.pop();\n            if (last instanceof GetPropertyExpression) {\n                this.expressions.push(new MethodExpression(last.name, args));\n            } else {\n                if (last !== undefined) {\n                    this.expressions.push(last);\n                }\n            }\n            return undefined;\n        };\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { GetReflectorTrap } from \"./traps/get.reflector-trap\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { SetReflectorTrap } from \"./traps/set.reflector-trap\";\nimport { ApplyReflectorTrap } from \"./traps/apply.reflector-trap\";\nimport { HasReflectorTrap } from \"./traps/has.reflector-trap\";\nimport { ConstructReflectorTrap } from \"./traps/construct.reflector-trap\";\nimport { IReturnValueFactory } from \"./expression-reflector\";\nimport { MethodReflectorTrap } from \"./traps/method.reflector-trap\";\n\nexport class MethodOnlyReflectingProxyFactory implements IReturnValueFactory {\n    constructor(private readonly injector: Injector) {\n    }\n\n    create() {\n        const apply = this.injector.get(MethodReflectorTrap) as unknown as TypeOfInjectionFactory<MethodReflectorTrap>;\n        const options = {apply};\n        const reflector = function () {\n            return undefined;\n        };\n        return new Proxy(reflector, options);\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport {\n    APPLY_RETURN_VALUE,\n    CONSTRUCT_RETURN_VALUE,\n    EXPRESSIONS,\n    GET_RETURN_VALUE,\n    IReturnValueFactory\n} from \"./expression-reflector\";\nimport { ReflectingProxyInjectorFactory } from \"./reflecting-proxy.injector-factory\";\nimport { MethodOnlyReflectingProxyFactory } from \"./method-only-reflecting-proxy.factory\";\nimport { MethodReflectorTrap } from \"./traps/method.reflector-trap\";\n\nexport class AsyncReflectingProxyInjectorFactory {\n    constructor(private readonly reflectingProxyInjectorFactory: ReflectingProxyInjectorFactory) {\n    }\n\n    create(options: { providers: StaticProvider[] } = {providers: []}) {\n        const providers = [\n            {provide: GET_RETURN_VALUE, useExisting: MethodOnlyReflectingProxyFactory, deps: []},\n            {provide: MethodOnlyReflectingProxyFactory, useClass: MethodOnlyReflectingProxyFactory, deps: [Injector]},\n            {provide: APPLY_RETURN_VALUE, useValue: {create: () => ({})} as IReturnValueFactory, deps: []},\n            {provide: CONSTRUCT_RETURN_VALUE, useValue: {create: () => ({})} as IReturnValueFactory, deps: []},\n            {provide: MethodReflectorTrap, useClass: MethodReflectorTrap, deps: [EXPRESSIONS]},\n            ...options.providers,\n        ];\n        return this.reflectingProxyInjectorFactory.create({providers});\n    }\n}\n","import { EXPRESSION_REFLECTOR } from \"./expression-reflector\";\nimport { ReflectingProxyInjectorFactory } from \"./reflecting-proxy.injector-factory\";\nimport { SyncExpressionReflector } from \"./sync-expression.reflector\";\nimport { CompositeExpressionReflector } from \"./composite-expression.reflector\";\nimport { AsyncExpressionDetector } from \"./async-expression.detector\";\nimport { AsyncExpressionReflector } from \"./async-expression.reflector\";\nimport { AsyncReflectingProxyInjectorFactory } from \"./async-reflecting-proxy.injector-factory\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: EXPRESSION_REFLECTOR, useExisting: CompositeExpressionReflector, deps: []},\n    {\n        provide: CompositeExpressionReflector,\n        useClass: CompositeExpressionReflector,\n        deps: [AsyncExpressionDetector, SyncExpressionReflector, AsyncExpressionReflector]\n    },\n    {provide: AsyncExpressionDetector, useClass: AsyncExpressionDetector, deps: []},\n    {provide: ReflectingProxyInjectorFactory, useClass: ReflectingProxyInjectorFactory, deps: []},\n    {provide: SyncExpressionReflector, useClass: SyncExpressionReflector, deps: [ReflectingProxyInjectorFactory]},\n    {\n        provide: AsyncReflectingProxyInjectorFactory,\n        useClass: AsyncReflectingProxyInjectorFactory,\n        deps: [ReflectingProxyInjectorFactory]\n    },\n    {\n        provide: AsyncExpressionReflector,\n        useClass: AsyncExpressionReflector,\n        deps: [AsyncReflectingProxyInjectorFactory]\n    },\n];\n","import { IPreset } from \"./presets/preset\";\n\n/**\n * @hidden\n */\nexport class Presets<T> {\n    private presets: IPreset<T>[] = [];\n\n    public add(preset: IPreset<T>): void {\n        this.presets.unshift(preset);\n    }\n\n    public get(): IPreset<T>[] {\n        return [...this.presets];\n    }\n}\n","import { IPlayable, PlayableUpdateReason } from \"../moq\";\n\n/**\n * The configured setup will be applied to invocations exactly n-times. After that it will be ignored.\n */\nexport class PlayableExactly implements IPlayable {\n    private invoked = 0;\n\n    constructor(private count: number) {\n    }\n\n    readonly update = (reason: PlayableUpdateReason) => {\n        if (reason === PlayableUpdateReason.OwnSetupWouldBePlayed) {\n            this.invoked++;\n        }\n    };\n\n    readonly isPlayable = () => this.invoked < this.count;\n}\n","import { IPlayable } from \"../moq\";\n\n/**\n * The configured setup will be never applied to invocations.\n */\nexport class PlayableNever implements IPlayable {\n    readonly update = () => undefined;\n    readonly isPlayable = () => false;\n}\n","import { IPlayable, PlayableUpdateReason } from \"../moq\";\n\n/**\n * The configured setup will be applied only to the first invocation.\n */\nexport class PlayableOnce implements IPlayable {\n    private played = false;\n\n    readonly update = (reason: PlayableUpdateReason) => {\n        if (reason === PlayableUpdateReason.OwnSetupWouldBePlayed) {\n            this.played = true;\n        }\n    };\n\n    readonly isPlayable = () => this.played === false;\n}\n","import { IPlayable } from \"../moq\";\n\n/**\n * The configured setup will be always applied to invocations.\n */\nexport class PlayableAlways implements IPlayable {\n    readonly isPlayable = () => true;\n    readonly update = () => undefined;\n}\n","import { IPlayable } from \"../moq\";\n\n/**\n * The configured setup will be applied or not accordingly to the value in the sequence.\n *\n * @example\n * ```typescript\n *\n * const value = 'value';\n * const object = new Mock<Function>()\n * .setup(instance => instance(1))\n * .play(PlayTimes.Sequence([false, true]))\n * .returns(value)\n * .object();\n *\n * expect(object(1).toBe(undefined);\n * expect(object(1).toBe(value);\n * expect(object(1).toBe(undefined);\n * ```\n */\nexport class PlayableSequence implements IPlayable {\n    private index = 0;\n\n    constructor(private sequence: boolean[]) {\n    }\n\n    readonly update = () => {\n        this.index++;\n    };\n\n    readonly isPlayable = () => {\n        if (this.index >= this.sequence.length) return false;\n        return this.sequence[this.index];\n    };\n}\n","import { IPlayable } from \"../moq\";\nimport { PlayableExactly } from \"./playable-exactly\";\nimport { PlayableNever } from \"./playable-never\";\nimport { PlayableOnce } from \"./playable-once\";\nimport { PlayableAlways } from \"./playable-always\";\nimport { PlayableSequence } from \"./playable-sequence\";\n\n\n/**\n * This class sets rules when a configured setup should be applied to the target invocation or not.\n *\n * @example\n * ```typescript\n *\n * const value = 'value';\n * const object = new Mock<Function>()\n * .setup(instance => instance(1))\n * .play(PlayTimes.Once())\n * .returns(value)\n * .object();\n *\n * expect(object(1).toBe(value);\n * expect(object(1).toBe(undefined);\n * ```\n */\nexport class PlayTimes {\n    private static readonly always = new PlayableAlways();\n    private static readonly never = new PlayableNever();\n\n    /**\n     * The configured setup will be applied to invocations exactly n-times. After that it will be ignored.\n     */\n    public static Exactly(count: number): IPlayable {\n        return new PlayableExactly(count);\n    }\n\n    /**\n     * The configured setup will be always applied to invocations.\n     */\n    public static Always(): IPlayable {\n        return PlayTimes.always;\n    }\n\n    /**\n     * The configured setup will be never applied to invocations.\n     */\n    public static Never(): IPlayable {\n        return PlayTimes.never;\n    }\n\n    /**\n     * The configured setup will be applied only to the first invocation.\n     */\n    public static Once(): IPlayable {\n        return new PlayableOnce();\n    }\n\n    /**\n     * The configured setup will be applied or not accordingly to the value in the sequence.\n     *\n     * @example\n     * ```typescript\n     *\n     * const value = 'value';\n     * const object = new Mock<Function>()\n     * .setup(instance => instance(1))\n     * .play(PlayTimes.Sequence([false, true]))\n     * .returns(value)\n     * .object();\n     *\n     * expect(object(1).toBe(undefined);\n     * expect(object(1).toBe(value);\n     * expect(object(1).toBe(undefined);\n     * ```\n     */\n    public static Sequence(sequence: boolean[]): IPlayable {\n        return new PlayableSequence(sequence);\n    }\n}\n","import { IMock, IPlayable, IPresetBuilder, PromisedType } from \"../moq\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { Expression } from \"../reflector/expressions\";\nimport { PlayTimes } from \"../playables/play-times\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { ReturnsPresetFactory } from \"./factories/returns-preset.factory\";\nimport { MimicsPresetFactory } from \"./factories/mimics-preset.factory\";\nimport { CallbackPresetFactory } from \"./factories/callback-preset.factory\";\nimport { ThrowsPresetFactory } from \"./factories/throws-preset.factory\";\nimport { ReturnsAsyncPresetFactory } from \"./factories/returns-async-preset.factory\";\nimport { ThrowsAsyncPresetFactory } from \"./factories/throws-async-preset.factory\";\n\n/**\n * The default implementation of {@link IPresetBuilder} interface.\n * Is it not intended to be used outside of the moq library.\n *\n * @hidden\n */\nexport class PresetBuilder<T, TValue = any> implements IPresetBuilder<T> {\n\n    constructor(\n        private readonly returnsPresetFactory: TypeOfInjectionFactory<ReturnsPresetFactory<T, TValue>>,\n        private readonly throwsPresetFactory: TypeOfInjectionFactory<ThrowsPresetFactory<T, TValue>>,\n        private readonly mimicsPresetFactory: TypeOfInjectionFactory<MimicsPresetFactory<T, TValue>>,\n        private readonly callbackPresetFactory: TypeOfInjectionFactory<CallbackPresetFactory<T, TValue>>,\n        private readonly returnsAsyncPresetFactory: TypeOfInjectionFactory<ReturnsAsyncPresetFactory<T, TValue>>,\n        private readonly throwsAsyncPresetFactory: TypeOfInjectionFactory<ThrowsAsyncPresetFactory<T, TValue>>,\n        private readonly target: Expressions<T>,\n        private playable: IPlayable = PlayTimes.Always()) {\n\n    }\n\n    public returnsAsync(value: PromisedType<TValue>): IMock<T> {\n        return this.returnsAsyncPresetFactory(this.target, this.playable, value);\n    }\n\n    public throwsAsync<TException>(exception: TException): IMock<T> {\n        return this.throwsAsyncPresetFactory(this.target, this.playable, exception);\n    }\n\n    public mimics(origin: T): IMock<T> {\n        return this.mimicsPresetFactory(this.target, this.playable, origin);\n    }\n\n    public returns(value: TValue): IMock<T> {\n        return this.returnsPresetFactory(this.target, this.playable, value);\n    }\n\n    public throws<TException>(exception: TException): IMock<T> {\n        return this.throwsPresetFactory(this.target, this.playable, exception);\n    }\n\n    public callback(callback: (interaction: Expression) => TValue): IMock<T> {\n        return this.callbackPresetFactory(this.target, this.playable, callback);\n    }\n\n    public play(playable: IPlayable): IPresetBuilder<T> {\n        this.playable = playable;\n        return this;\n    }\n}\n","import { Expressions } from \"../reflector/expressions\";\nimport { PresetBuilder } from \"./preset-builder\";\nimport { InjectionFactory, TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { ReturnsPresetFactory } from \"./factories/returns-preset.factory\";\nimport { ThrowsPresetFactory } from \"./factories/throws-preset.factory\";\nimport { MimicsPresetFactory } from \"./factories/mimics-preset.factory\";\nimport { CallbackPresetFactory } from \"./factories/callback-preset.factory\";\nimport { ReturnsAsyncPresetFactory } from \"./factories/returns-async-preset.factory\";\nimport { ThrowsAsyncPresetFactory } from \"./factories/throws-async-preset.factory\";\n\n/**\n * @hidden\n */\nexport class PresetBuilderFactory<T> implements InjectionFactory {\n    constructor(private readonly returnsPresetFactory: TypeOfInjectionFactory<ReturnsPresetFactory<T>>,\n                private readonly throwsPresetFactory: TypeOfInjectionFactory<ThrowsPresetFactory<T>>,\n                private readonly mimicsPresetFactory: TypeOfInjectionFactory<MimicsPresetFactory<T>>,\n                private readonly callbackPresetFactory: TypeOfInjectionFactory<CallbackPresetFactory<T>>,\n                private readonly returnsAsyncPresetFactory: TypeOfInjectionFactory<ReturnsAsyncPresetFactory<T>>,\n                private readonly throwsAsyncPresetFactory: TypeOfInjectionFactory<ThrowsAsyncPresetFactory<T>>) {\n        return this.factory() as any;\n    }\n\n    public factory() {\n        return (target: Expressions<T>) => new PresetBuilder<T>(\n            this.returnsPresetFactory,\n            this.throwsPresetFactory,\n            this.mimicsPresetFactory,\n            this.callbackPresetFactory,\n            this.returnsAsyncPresetFactory,\n            this.throwsAsyncPresetFactory,\n            target);\n    }\n}\n","import { IPresetBuilder } from \"../moq\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { PresetBuilderFactory } from \"./preset-builder.factory\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { AutoMockProvider } from \"../auto-mocking/auto-mock.provider\";\nimport { ComplexExpressionGuard } from \"../auto-mocking/expression.guards/complex-expression.guard\";\n\n/**\n * @Hidden\n */\nexport class SetupFactory<T> {\n    constructor(\n        private readonly presetBuilderFactory: TypeOfInjectionFactory<PresetBuilderFactory<T>>,\n        private readonly autoMockProvider: AutoMockProvider,\n        private readonly expressionGuard: ComplexExpressionGuard) {\n\n    }\n\n    public create<R = unknown>([shallow, ...rest]: Expressions<T>[]): IPresetBuilder<T, R> {\n        this.expressionGuard.verify([shallow, ...rest]);\n        const preset = this.presetBuilderFactory(shallow);\n        if (rest.length === 0) {\n            return preset;\n        }\n\n        const mock = this.autoMockProvider.getOrCreate(shallow);\n        preset.returns(mock.object());\n        const setup = mock.resolve(SetupFactory);\n        return setup.create(rest) as IPresetBuilder<T, R>;\n    }\n}\n","import { IMock } from \"../moq\";\nimport { InjectionFactory } from \"../injector/injection-factory\";\n\n/**\n * @hidden\n */\nexport class RootMockProvider implements InjectionFactory {\n    constructor(\n        private readonly mock: IMock<unknown>,\n        private readonly root: IMock<unknown>) {\n        return this.factory() as any;\n    }\n\n    public factory() {\n        return this.root ?? this.mock;\n    }\n}\n","import { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { AutoMockFactory } from \"./auto-mock.factory\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { AutoMockedStorage } from \"./auto-mock.storage\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class AutoMockProvider {\n    constructor(\n        private readonly map: TypeOfInjectionFactory<AutoMockedStorage>,\n        private readonly comparer: ExpressionEqualityComparer,\n        private readonly autoMockFactory: AutoMockFactory) {\n    }\n\n    public getOrCreate<T>(expression: Expressions<T>) {\n        for (const [key, value] of this.map) {\n            if (this.comparer.equals(expression, key) === true) {\n                return value;\n            }\n        }\n        const mock = this.autoMockFactory.create(expression);\n        this.map.set(expression, mock);\n        return mock;\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { Expression } from \"../../reflector/expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class CallbacksPreset<T> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: Expressions<T>,\n        public readonly callback: (interaction: Expression) => unknown) {\n\n    }\n}\n","import { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { CallbacksPreset } from \"../presets/callbacks.preset\";\nimport { Expression } from \"../../reflector/expressions\";\n\n/**\n * @Hidden\n */\nexport class CallbackPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, callback: (interaction: Expression) => TValue) => {\n            const preset = new CallbacksPreset(playable, target, callback);\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class MimicsPreset<T> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: Expressions<T>,\n        public readonly origin: unknown) {\n\n    }\n}\n","import { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { MimicsPreset } from \"../presets/mimics.preset\";\n\n/**\n * @Hidden\n */\nexport class MimicsPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, origin: T) => {\n            const preset = new MimicsPreset(playable, target, origin);\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class ReturnsPreset<T, TValue> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: Expressions<T>,\n        public readonly value: TValue) {\n\n    }\n}\n\n","import { InjectionFactory, TypeOfInjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable, PromisedType } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { ResolvedPromiseFactory } from \"../resolved-promise.factory\";\nimport { ReturnsPreset } from \"../presets/returns.preset\";\n\n/**\n * @Hidden\n */\nexport class ReturnsAsyncPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>,\n                private readonly resolvedPromise: TypeOfInjectionFactory<ResolvedPromiseFactory>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, value: PromisedType<TValue>) => {\n            const preset = new ReturnsPreset(playable, target, this.resolvedPromise(value));\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { ReturnsPreset } from \"../presets/returns.preset\";\nimport { Expressions } from \"../../reflector/expressions\";\n\n/**\n * @Hidden\n */\nexport class ReturnsPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, value: TValue) => {\n            const preset = new ReturnsPreset(playable, target, value);\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { InjectionFactory, TypeOfInjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { RejectedPromiseFactory } from \"../rejected-promise.factory\";\nimport { ReturnsPreset } from \"../presets/returns.preset\";\n\n/**\n * @Hidden\n */\nexport class ThrowsAsyncPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>,\n                private readonly rejectedPromise: TypeOfInjectionFactory<RejectedPromiseFactory>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return <TException>(target: Expressions<T>, playable: IPlayable, exception: TException) => {\n            const preset = new ReturnsPreset(playable, target, this.rejectedPromise(exception));\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class ThrowsPreset<T, TException> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: Expressions<T>,\n        public readonly exception: TException) {\n\n    }\n}\n","import { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { ThrowsPreset } from \"../presets/throws.preset\";\n\n/**\n * @Hidden\n */\nexport class ThrowsPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return <TException>(target: Expressions<T>, playable: IPlayable, exception: TException) => {\n            const preset = new ThrowsPreset(playable, target, exception);\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { InjectionFactory } from \"../injector/injection-factory\";\n\n/**\n * This service is an adapter for a resolved promise.\n */\nexport class ResolvedPromiseFactory implements InjectionFactory {\n    constructor() {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return <T>(value: T) => {\n            const promise = Promise.resolve<T>(value);\n            promise.then = promise.then.bind(promise);\n            promise.catch = promise.catch.bind(promise);\n            promise.finally = promise.finally.bind(promise);\n            return promise;\n        };\n    }\n}\n","import { InjectionFactory } from \"../injector/injection-factory\";\n\n/**\n * This service is an adapter for a rejected promise.\n */\nexport class RejectedPromiseFactory implements InjectionFactory {\n    constructor() {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return <T>(value: T) => {\n            const promise = Promise.reject<T>(value);\n            promise.then = promise.then.bind(promise);\n            promise.catch = promise.catch.bind(promise);\n            promise.finally = promise.finally.bind(promise);\n            return promise;\n        };\n    }\n}\n","import { Expressions } from \"../../reflector/expressions\";\nimport { ComplexExpressionValidator } from \"./complex-expression.validator\";\nimport { ExpressionGuardExceptionFactory } from \"./expression-guard-exception.factory\";\n\nexport class ComplexExpressionGuard {\n\n    constructor(private readonly complexExpressionValidator: ComplexExpressionValidator,\n                private readonly expressionGuardExceptionFactory: ExpressionGuardExceptionFactory) {\n    }\n\n    verify(expressions: Expressions<unknown>[]) {\n        const {valid, errors} = this.complexExpressionValidator.validate(expressions);\n        if (valid === false) {\n            throw this.expressionGuardExceptionFactory.create(errors);\n        }\n    }\n}\n","import { Presets } from \"./presets\";\nimport { PresetBuilderFactory } from \"./preset-builder.factory\";\nimport { SetupFactory } from \"./setup.factory\";\nimport { RootMockProvider } from \"../auto-mocking/root-mock.provider\";\nimport { AutoMockProvider } from \"../auto-mocking/auto-mock.provider\";\nimport { CallbackPresetFactory } from \"./factories/callback-preset.factory\";\nimport { MimicsPresetFactory } from \"./factories/mimics-preset.factory\";\nimport { ReturnsAsyncPresetFactory } from \"./factories/returns-async-preset.factory\";\nimport { ReturnsPresetFactory } from \"./factories/returns-preset.factory\";\nimport { ThrowsAsyncPresetFactory } from \"./factories/throws-async-preset.factory\";\nimport { ThrowsPresetFactory } from \"./factories/throws-preset.factory\";\nimport { ResolvedPromiseFactory } from \"./resolved-promise.factory\";\nimport { RejectedPromiseFactory } from \"./rejected-promise.factory\";\nimport { ComplexExpressionGuard } from \"../auto-mocking/expression.guards/complex-expression.guard\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: SetupFactory,\n        useClass: SetupFactory,\n        deps: [PresetBuilderFactory, AutoMockProvider, ComplexExpressionGuard]\n    },\n    {provide: Presets, useClass: Presets, deps: []},\n    {provide: ResolvedPromiseFactory, useClass: ResolvedPromiseFactory, deps: []},\n    {provide: RejectedPromiseFactory, useClass: RejectedPromiseFactory, deps: []},\n    {provide: ReturnsPresetFactory, useClass: ReturnsPresetFactory, deps: [RootMockProvider, Presets]},\n    {provide: ThrowsPresetFactory, useClass: ThrowsPresetFactory, deps: [RootMockProvider, Presets]},\n    {provide: CallbackPresetFactory, useClass: CallbackPresetFactory, deps: [RootMockProvider, Presets]},\n    {provide: MimicsPresetFactory, useClass: MimicsPresetFactory, deps: [RootMockProvider, Presets]},\n    {\n        provide: ReturnsAsyncPresetFactory,\n        useClass: ReturnsAsyncPresetFactory,\n        deps: [RootMockProvider, Presets, ResolvedPromiseFactory]\n    },\n    {\n        provide: ThrowsAsyncPresetFactory,\n        useClass: ThrowsAsyncPresetFactory,\n        deps: [RootMockProvider, Presets, RejectedPromiseFactory]\n    },\n    {\n        provide: PresetBuilderFactory, useClass: PresetBuilderFactory, deps: [\n            ReturnsPresetFactory,\n            ThrowsPresetFactory,\n            MimicsPresetFactory,\n            CallbackPresetFactory,\n            ReturnsAsyncPresetFactory,\n            ThrowsAsyncPresetFactory\n        ]\n    },\n];\n","import { Times } from \"../times\";\nimport { CallCounter } from \"./call-counter\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { AutoMockProvider } from \"../auto-mocking/auto-mock.provider\";\nimport { VerificationTester } from \"./verification-tester\";\n\n/**\n * @hidden\n */\nexport class Verifier<T> {\n    constructor(\n        private readonly callCounter: CallCounter,\n        private readonly verificationTester: VerificationTester,\n        private readonly autoMockProvider: AutoMockProvider) {\n\n    }\n\n    public test([shallow, ...rest]: Expressions<T>[], times: Times): void {\n        const callCount = this.callCounter.count(shallow);\n        if (rest.length === 0) {\n            this.verificationTester.test(shallow, callCount, times);\n        } else {\n            this.verificationTester.test(shallow, callCount, Times.AtLeastOnce());\n            const autoMock = this.autoMockProvider.getOrCreate(shallow);\n            const verifier = autoMock.resolve(Verifier);\n            verifier.test(rest, times);\n        }\n    }\n}\n","import { Expressions } from \"../reflector/expressions\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class CallCounter {\n\n    constructor(\n        private readonly comparer: ExpressionEqualityComparer,\n        private readonly tracker: Tracker) {\n\n    }\n\n    public count<T>(expected: Expressions<T>): number {\n        let count = 0;\n        for (const expression of this.tracker.interactions()) {\n            if (this.comparer.equals(expression, expected) === true) {\n                count += 1;\n            }\n        }\n\n        return count;\n    }\n}\n","import { Expressions } from \"../reflector/expressions\";\nimport { ExpressionsFormatter } from \"./expressions.formatter\";\nimport { TrackedExpressionsFormatter } from \"./tracked-expressions.formatter\";\nimport { Tracker } from \"../tracker/tracker\";\n\n/**\n * @hidden\n */\nexport class VerifyFormatter {\n\n    constructor(\n        private readonly expressionsFormatter: ExpressionsFormatter,\n        private readonly trackedExpressionsFormatter: TrackedExpressionsFormatter,\n        private readonly tracker: Tracker) {\n    }\n\n    public format(\n        expected: Expressions<any>,\n        timesMessage: string,\n        haveBeenCalledTimes: number): string {\n        const interactions = this.tracker.interactions();\n        const expectedExpressionMessage = this.expressionsFormatter.format(expected, timesMessage, haveBeenCalledTimes);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(interactions);\n        const delimiter = \"-------------------------------------\";\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`;\n    }\n}\n","export class VerifyError extends Error {\n    constructor(message: string) {\n        super(message);\n    }\n}\n","import { Times } from \"../times\";\nimport { VerifyFormatter } from \"../formatters/verify.formatter\";\nimport { VerifyError } from \"./verify-error\";\nimport { Expressions } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class VerificationTester {\n    constructor(private readonly verifyFormatter: VerifyFormatter) {\n    }\n\n    public test(expression: Expressions<any>, callCount: number, times: Times): void {\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount);\n            throw new VerifyError(message);\n        }\n    }\n}\n","import { GetPropertyEqualityComparer } from \"./get-property.equality-comparer\";\nimport { SetPropertyEqualityComparer } from \"./set-property.equality-comparer\";\nimport { MethodEqualityComparer } from \"./method.equality-comparer\";\nimport { InstanceMethodEqualityComparer } from \"./instance-method.equality-comparer\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { InOperatorEqualityComparer } from \"./in-operator.equality-comparer\";\nimport { NewOperatorEqualityComparer } from \"./new-operator.equality-comparer\";\nimport { ItEqualityComparer } from \"./it.equality-comparer\";\nimport { It } from \"../reflector/expression-predicates\";\nimport {\n    GetPropertyExpression,\n    InOperatorExpression,\n    FunctionExpression,\n    MethodExpression,\n    NewOperatorExpression,\n    SetPropertyExpression\n} from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class ExpressionEqualityComparer {\n\n    constructor(private readonly getPropertyExpressionMatcher: GetPropertyEqualityComparer,\n                private readonly setPropertyExpressionMatcher: SetPropertyEqualityComparer,\n                private readonly methodExpressionMatcher: MethodEqualityComparer,\n                private readonly namedMethodExpressionMatcher: InstanceMethodEqualityComparer,\n                private readonly inOperatorExpressionMatcher: InOperatorEqualityComparer,\n                private readonly newOperatorExpressionMatcher: NewOperatorEqualityComparer,\n                private readonly itEqualityComparer: ItEqualityComparer) {\n\n    }\n\n    public equals<T>(left: Expressions<T>, right: Expressions<T>): boolean {\n        if (left === right) return true;\n        if (left instanceof It || right instanceof It) {\n            return this.itEqualityComparer.equals(left, right);\n        }\n        if (left instanceof GetPropertyExpression && right instanceof GetPropertyExpression) {\n            return this.getPropertyExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof SetPropertyExpression && right instanceof SetPropertyExpression) {\n            return this.setPropertyExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof InOperatorExpression && right instanceof InOperatorExpression) {\n            return this.inOperatorExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof FunctionExpression && right instanceof FunctionExpression) {\n            return this.methodExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof MethodExpression && right instanceof MethodExpression) {\n            return this.namedMethodExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof NewOperatorExpression && right instanceof NewOperatorExpression) {\n            return this.newOperatorExpressionMatcher.equals(left, right);\n        }\n\n        return false;\n    }\n}\n","import { Verifier } from \"./verifier\";\nimport { CallCounter } from \"./call-counter\";\nimport { VerifyFormatter } from \"../formatters/verify.formatter\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { AutoMockProvider } from \"../auto-mocking/auto-mock.provider\";\nimport { VerificationTester } from \"./verification-tester\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: Verifier, useClass: Verifier, deps: [CallCounter, VerificationTester, AutoMockProvider]},\n    {provide: CallCounter, useClass: CallCounter, deps: [ExpressionEqualityComparer, Tracker]},\n    {provide: VerificationTester, useClass: VerificationTester, deps: [VerifyFormatter]},\n];\n","import { Tracker } from \"../tracker/tracker\";\nimport { FunctionExpression } from \"../reflector/expressions\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\n\n/**\n * @hidden\n */\nexport class ApplyTrap {\n    constructor(\n        private tracker: Tracker,\n        private interactionPlayer: InteractionPlayer) {\n\n    }\n\n    public intercept(target: any, thisArg: any, argArray?: any): any {\n        const expression = new FunctionExpression(argArray);\n\n        this.tracker.add(expression);\n\n        return this.interactionPlayer.play(expression);\n    }\n}\n","import { Expression } from \"../reflector/expressions\";\nimport { PlayablePresetProvider } from \"./playable-preset.provider\";\nimport { PresetPlayer } from \"./preset.player\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\n\n/**\n * @hidden\n */\nexport class InteractionPlayer {\n    constructor(\n        private playablePresetProvider: PlayablePresetProvider,\n        private presetPlayablesUpdater: PresetPlayablesUpdater,\n        private presetPlayer: PresetPlayer) {\n\n    }\n\n    public play(interaction: Expression): any {\n        const preset = this.playablePresetProvider.get(interaction);\n        this.presetPlayablesUpdater.update(interaction, preset);\n        if (preset === undefined) return undefined;\n        return this.presetPlayer.play(preset, interaction);\n    }\n}\n","import { Times } from \"./times\";\r\nimport { Expression } from \"./reflector/expressions\";\r\nimport { Tracker } from \"./tracker/tracker\";\r\nimport { StaticProvider } from \"./static.injector/interface/provider\";\r\nimport { InjectionFactory, TypeOfInjectionFactory } from \"./injector/injection-factory\";\r\nimport { Type } from \"./static.injector/type\";\r\nimport { InjectionToken } from \"./static.injector/injection_token\";\r\nimport { IExpression } from \"./reflector/expression-reflector\";\r\n\r\nexport type PromisedType<T> = T extends Promise<infer P> ? P : never;\r\n\r\nexport const enum PlayableUpdateReason {\r\n    /**\r\n     * The playable is update because it's setup is about to be played\r\n     */\r\n    OwnSetupWouldBePlayed,\r\n    /**\r\n     * The playable is update because another setup is about to be played\r\n     */\r\n    OtherSetupWouldBePlayed\r\n}\r\n\r\n/**\r\n * Provides playable logic for a setup\r\n */\r\nexport interface IPlayable {\r\n    /**\r\n     * Tests if setup is playable\r\n     */\r\n    isPlayable(): boolean;\r\n\r\n    /**\r\n     * Invokes as the setup is about to be played, so the playable logic can change it's state.\r\n     *\r\n     * @param reason The reason why this update is called {@link PlayableUpdateReason}\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     *     const playable1 = new PlayableOnce();\r\n     *     const playable2 = new PlayableOnce();\r\n     *\r\n     *     const mock = new Mock<(val: number) => void)>()\r\n     *     // setup A\r\n     *     .setup(instance => instance(1))\r\n     *     .play(playable1)\r\n     *     .returns(1)\r\n     *     // setup B\r\n     *     .setup(instance => instance(2))\r\n     *     .play(playable2)\r\n     *     .returns(2);\r\n     *\r\n     *     const actual = mock.object()(1);\r\n     *     // at this point the update of playable1 should be called with OwnSetupWouldBePlayed\r\n     *     // because setup A would be played\r\n     *     // and the update of playable2 should be called with OtherSetupWouldBePlayed\r\n     * ```\r\n     */\r\n    update(reason: PlayableUpdateReason): void;\r\n}\r\n\r\n/**\r\n * Sets a behaviour rule for a particular use case\r\n *\r\n * @param T The type of mocked object.\r\n */\r\nexport interface IPresetBuilder<T, TValue = any> {\r\n    /**\r\n     * Returns the provided value as a result of interaction in case of\r\n     * - get property value\r\n     * - invocation a function\r\n     *\r\n     * Controls write operation in case of\r\n     * - property assignment (true - the assignment is allowed, false - the assignment is not allowed)\r\n     *\r\n     * @param value The value\r\n     */\r\n    returns(value: TValue): IMock<T>;\r\n\r\n    /**\r\n     * Returns the provided value with a resolved Promise as a result of invocation an asynchronous function\r\n     *\r\n     * @param value The value\r\n     */\r\n    returnsAsync(value: PromisedType<TValue>): IMock<T>;\r\n\r\n    /**\r\n     * Throws the provided exception.\r\n     */\r\n    throws<TException>(exception: TException): IMock<T>;\r\n\r\n    /**\r\n     * Returns the provided value with a rejected Promise as a result of interaction with an asynchronous function.\r\n     */\r\n    throwsAsync<TException>(exception: TException): IMock<T>;\r\n\r\n    /**\r\n     * @param callback A callback function that will intercept the interaction.\r\n     * The function may returns a value that will be provided as result (see {@link IPresetBuilder.returns})\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     *     const ipcRendererMock = new StrictMock<typeof ipcRenderer>()\r\n     *     .setup(instance => instance.on(ipcRendererChannelName, It.IsAny()))\r\n     *     .callback(({args: [channel, listener]}) => listener(undefined, response));\r\n     * ```\r\n     */\r\n    callback(callback: (interaction: Expression) => TValue): IMock<T>;\r\n\r\n    /**\r\n     * Plays the setup on target invocation when predicate returns true otherwise the setup will be ignored.\r\n     * As predicate {@link PlayTimes} could be used.\r\n     */\r\n    play(predicate: IPlayable): IPresetBuilder<T, TValue>;\r\n\r\n    /**\r\n     * Replicates interactions with original object.\r\n     * The mock object keeps tracking all interactions and reflects them on the original object.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     * const value = 2;\r\n     *\r\n     * class Origin {\r\n     *   public property = value;\r\n     *}\r\n     *\r\n     * const origin = new Origin();\r\n     * const mock = new Mock<Origin>()\r\n     * .setup(() => It.IsAny())\r\n     * .mimics(origin);\r\n     *\r\n     * const actual = mock.object().property;\r\n     * expect(actual).toBe(2);\r\n     * ```\r\n     */\r\n    mimics(origin: T): IMock<T>;\r\n}\r\n\r\n/**\r\n * The main API of the framework.\r\n *\r\n * @example\r\n * ```typescript\r\n *\r\n *  const value = 'value';\r\n *  const object = new Mock<Function>()\r\n *  .setup(instance => instance(1))\r\n *  .returns(value)\r\n *  .object();\r\n *\r\n *  const actual = object(1);\r\n *\r\n *  expect(actual).toBe(value);\r\n * ```\r\n * ---\r\n * #### Latest setups have more precedence over earlier setups.\r\n * @example\r\n * ```typescript\r\n *\r\n *  const object = new Mock<Function>()\r\n *  .setup(instance => instance(1))\r\n *  .returns(1)\r\n *  .setup(instance => instance(1))\r\n *  .returns(2)\r\n *  .object();\r\n *\r\n *  const actual = object(1);\r\n *\r\n *  expect(actual).toBe(2);\r\n * ```\r\n *\r\n * @param T The type of mocked object. Could be any type including:\r\n * - Function,\r\n * - arrow function,\r\n * - interface,\r\n * - class,\r\n * - object and etc.\r\n */\r\nexport interface IMock<T> {\r\n    /**\r\n     * You can name the mock. The name will be displayed with any relative output, so you can easily distinct\r\n     * output of several mocks. On the mocked object you can find this name at 'mockName' property of the [[Handler]].\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Returns the tracker object that responsible for storing history of interactions with the mocked object.\r\n     */\r\n    readonly tracker: Tracker;\r\n\r\n    /**\r\n     * Returns options object\r\n     */\r\n    readonly options: IMockOptions<T>;\r\n\r\n    /**\r\n     * Returns instance of mocked object\r\n     */\r\n    object(): T;\r\n\r\n    /**\r\n     * Defines a configuration for particular interaction with the mocked object.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     * // a function invoke with 1 as parameter\r\n     * .setup(instance => instance(1))\r\n     *\r\n     * // apply function invoke on a function with null as the first parameter and a placeholder for the second parameter\r\n     * .setup(instance => instance.apply(null, It.IsAny()))\r\n     *\r\n     * // accessing to a property\r\n     * .setup(instance => instance.property)\r\n     *\r\n     * //accessing to a named function with name 'test' of an object and the first parameter is 1\r\n     * .setup(instance => It.Is((expression: NamedMethodExpression) => {\r\n     *      return expression.name === 'test' && expression.args[0] === 1\r\n     * }))\r\n     *\r\n     * //setting propertyA to value of 'a'\r\n     * .setup(instance => {instance.propertyA = 'a'})\r\n     * ```\r\n     * @param expression A function that accepts a\r\n     * [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\r\n     * and either plays expected interaction or returns a predicate function.\r\n     * Refer {@link It} class for parameter placeholders or predicate functions.\r\n     * Refer the integration tests for more examples.\r\n     * @returns PresetBuilder config interface for the provided expression.\r\n     */\r\n    setup<E extends IExpression<T>,\r\n        R = E extends (...args: any[]) => infer M ? M : any>(expression: E): IPresetBuilder<T, R>;\r\n\r\n    /**\r\n     * Asserts expected interactions with the mocked object.\r\n     *\r\n     * @param expression Expected expression\r\n     * @param times The default value is {@link Times.Once()}\r\n     */\r\n    verify(expression: IExpression<T>, times?: Times): IMock<T>;\r\n\r\n    /**\r\n     * Set the prototype of the mocked object.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     *  class PrototypeClass {}\r\n     *\r\n     *  const mock = new Mock<{}>();\r\n     *  const object = mock.object();\r\n     *\r\n     *  Object.setPrototypeOf(object, PrototypeClass.prototype);\r\n     *\r\n     *  expect(object instanceof PrototypeClass).toBe(true);\r\n     * ```\r\n     */\r\n    prototypeof(prototype?: any): IMock<T>;\r\n\r\n    /**\r\n     * @experimental\r\n     * @hidden\r\n     */\r\n    insequence(sequence: ISequenceVerifier, expression: IExpression<T>): IMock<T>;\r\n\r\n    /**\r\n     * Retrieves an instance from the injector based on the provided token.\r\n     *\r\n     * @returns The instance from the injector if defined, otherwise null.\r\n     */\r\n    resolve<S, R = S extends InjectionFactory ? TypeOfInjectionFactory<S> : S>(token: Type<S> | InjectionToken<S>): R;\r\n}\r\n\r\n/**\r\n * @hidden\r\n * @experimental\r\n */\r\nexport interface ISequenceVerifier {\r\n    add<T>(mock: IMock<T>, expression: IExpression<T>): ISequenceVerifier;\r\n\r\n    verify(times?: Times): void;\r\n}\r\n\r\n/**\r\n * A mock object exposes a symbol property to access to its Moq API.\r\n * This property is read only and trackable.\r\n * Since this property makes sense only in context of the moq library\r\n * and is not specific for mocked types it is not possible to define an interaction behaviour with Setup API.\r\n *\r\n * @example\r\n * ```typescript\r\n *\r\n *  const mock = new Mock<() => void>()\r\n *  .object();\r\n *\r\n *  mock[MoqAPI]\r\n *  .setup(instance => instance())\r\n *  .returns(12);\r\n *\r\n *  const actual = mock();\r\n *\r\n *  expect(actual).toBe(12);\r\n * ```\r\n */\r\nexport const MoqAPI = Symbol(\"MoqAPI\");\r\n\r\n\r\n/**\r\n * The Mock internally depends on angular based injector to construct its dependencies.\r\n */\r\nexport interface IInjectorConfig {\r\n    /**\r\n     * Returns array of StaticProviders to construct an angular based injector.\r\n     *\r\n     * @param options The final version of mock options. Options that passed to Mock constructor are merged with\r\n     * the global mock options ({@link Mock.options}). Some components depend on the options and the injector\r\n     * should be able to resolve it. To configure the injector property the implementation could do the following:\r\n     * ``` typescript\r\n     * return [\r\n     *  {provide: MOCK_OPTIONS, useValue: options, deps: []},\r\n     * ];\r\n     * ```\r\n     * @param providers An array of additional providers that could be added to the final configuration.\r\n     */\r\n    get(options: IMockOptions<unknown>, ...providers: StaticProvider[]): StaticProvider[];\r\n}\r\n\r\n/**\r\n * Mock instance options.\r\n * Could be passed as parameter on mock instantiating or could be set globally on {@link Mock.options}.\r\n */\r\nexport interface IMockOptions<T> {\r\n    /**\r\n     * You can name the mock. The name will be displayed with any relative output, so you can easily distinct\r\n     * output of several mocks. On the mocked object you can find this name at 'mockName' property of the [[Handler]].\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The target object for Proxy that is used under the hood.\r\n     * typeof operation is applied to this target.\r\n     * The default value is a function.\r\n     */\r\n    target?: T;\r\n    /**\r\n     * The Mock internally based on angular injector to construct its dependencies.\r\n     * An instance of {@link IInjectorConfig} implementation could be passed as parameter in order to\r\n     * changed the mock behaviour. The default value is an instance of {@link DefaultInjectorConfig}.\r\n     * There is also {@link EqualMatchingInjectorConfig} that would setup Mock to use equal logic for comparing values.\r\n     */\r\n    injectorConfig?: IInjectorConfig;\r\n}\r\n","import { GetPropertyExpression } from \"../reflector/expressions\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { SpyFunctionProvider } from \"./spy-function.provider\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { HasPropertyExplorer } from \"../explorers/has-property.explorer/has-property.explorer\";\nimport { HasMethodExplorer } from \"../explorers/has-method.explorer/has-method.explorer\";\nimport { MoqAPI } from \"../moq\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK } from \"../injector/mock.injection-token\";\n\n/**\n * @hidden\n */\nexport class GetTrap {\n    constructor(\n        private mock: TypeofInjectionToken<typeof MOCK>,\n        private tracker: Tracker,\n        private propertiesValueStorage: PropertiesValueStorage,\n        private interactionPlayer: InteractionPlayer,\n        private hasPropertyExplorer: HasPropertyExplorer,\n        private hasMethodExplorer: HasMethodExplorer,\n        private spyFunctionProvider: SpyFunctionProvider) {\n\n    }\n\n    public intercept(property: PropertyKey): any {\n        const interaction = new GetPropertyExpression(property);\n\n        this.tracker.add(interaction);\n\n        if (property === MoqAPI) {\n            return this.mock;\n        }\n\n        if (this.propertiesValueStorage.has(property)) {\n            return this.propertiesValueStorage.get(property);\n        }\n\n        if (this.hasPropertyExplorer.has(property)) {\n            return this.interactionPlayer.play(interaction);\n        }\n\n        if (this.hasMethodExplorer.has(property)) {\n            return this.spyFunctionProvider.get(property);\n        }\n\n        return this.interactionPlayer.play(interaction);\n    }\n}\n","export class PropertiesValueStorage {\n    private storage = new Map<PropertyKey, any>();\n\n    public has(property: PropertyKey): boolean {\n        return this.storage.has(property);\n    }\n\n    public get(property: PropertyKey): any {\n        return this.storage.get(property);\n    }\n\n    public set(property: PropertyKey, value: any): void {\n        this.storage.set(property, value);\n    }\n}\n","import { PresetHasPropertyExplorer } from \"./preset-has-property.explorer\";\nimport { Presets } from \"../../presets/presets\";\nimport { MembersPropertyExplorer } from \"../members.explorer/members-property.explorer\";\n\n/**\n * @hidden\n */\nexport class HasPropertyExplorer {\n    constructor(\n        private presets: Presets<unknown>,\n        private membersExplorer: MembersPropertyExplorer,\n        private explorer: PresetHasPropertyExplorer) {\n\n    }\n\n    public has(name: PropertyKey): boolean {\n        if (this.membersExplorer.hasProperty(name)) {\n            return true;\n        }\n        return this.presets\n            .get()\n            .find(preset => this.explorer.has(name, preset)) !== undefined;\n    }\n}\n","import { PresetHasMethodExplorer } from \"./preset.has-method.explorer\";\nimport { Presets } from \"../../presets/presets\";\nimport { MembersMethodExplorer } from \"../members.explorer/members-method.explorer\";\n\n/**\n * @hidden\n */\nexport class HasMethodExplorer {\n    constructor(\n        private presets: Presets<unknown>,\n        private membersExplorer: MembersMethodExplorer,\n        private explorer: PresetHasMethodExplorer) {\n\n    }\n\n    public has(name: PropertyKey): boolean {\n        if (this.membersExplorer.hasMethod(name)) {\n            return true;\n        }\n\n        return this.presets\n            .get()\n            .find(preset => this.explorer.has(name, preset)) !== undefined;\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { MethodExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class SpyFunctionProvider {\n    private map = new Map<PropertyKey, (...args) => any>();\n\n    constructor(\n        private tracker: Tracker,\n        private interactionPlayer: InteractionPlayer) {\n\n    }\n\n    public get(property: PropertyKey): (...args) => any {\n        if (this.map.has(property) === false) {\n            this.map.set(property, (...args): any => {\n                const interaction = new MethodExpression(property, args);\n                this.tracker.add(interaction);\n                return this.interactionPlayer.play(interaction);\n            });\n        }\n        return this.map.get(property);\n    }\n}\n","import { PrototypeStorage } from \"./prototype.storage\";\n\n/**\n * @hidden\n */\nexport class GetPrototypeOfTrap {\n    constructor(\n        private prototypeStorage: PrototypeStorage) {\n\n    }\n\n    public intercept(): any {\n        return this.prototypeStorage.get();\n    }\n}\n","/**\n * @hidden\n */\n\nexport class PrototypeStorage {\n    private prototype: any = null;\n\n    constructor(mockTarget: any) {\n        this.prototype = mockTarget?.prototype ?? mockTarget;\n    }\n\n    public get(): any {\n        return this.prototype;\n    }\n\n    public set(prototype: any): void {\n        this.prototype = prototype;\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { InOperatorExpression } from \"../reflector/expressions\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { HasPropertyExplorer } from \"../explorers/has-property.explorer/has-property.explorer\";\nimport { HasMethodExplorer } from \"../explorers/has-method.explorer/has-method.explorer\";\nimport { InOperatorInteractionExplorer } from \"../explorers/in-operator-interaction.explorer/in-operator-interaction.explorer\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\n\n/**\n * @hidden\n */\nexport class HasTrap {\n    constructor(\n        private readonly tracker: Tracker,\n        private readonly propertiesValueStorage: PropertiesValueStorage,\n        private readonly interactionPlayer: InteractionPlayer,\n        private readonly inOperatorInteractionExplorer: InOperatorInteractionExplorer,\n        private readonly hasPropertyExplorer: HasPropertyExplorer,\n        private readonly hasMethodExplorer: HasMethodExplorer,\n        private readonly presetPlayablesUpdater: PresetPlayablesUpdater) {\n\n    }\n\n    public intercept(property: PropertyKey): any {\n        const interaction = new InOperatorExpression(property);\n        this.tracker.add(interaction);\n\n        if (this.propertiesValueStorage.has(property)) {\n            return true;\n        }\n\n        if (this.inOperatorInteractionExplorer.has(property)) {\n            return this.interactionPlayer.play(interaction);\n        }\n\n        this.presetPlayablesUpdater.update(interaction, undefined);\n\n        if (this.hasPropertyExplorer.has(property)) {\n            return true;\n        }\n\n        if (this.hasMethodExplorer.has(property)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n","import { PresetHasInOperatorExplorer } from \"./preset.has-in-operator.explorer\";\nimport { Presets } from \"../../presets/presets\";\n\n/**\n * @hidden\n */\nexport class InOperatorInteractionExplorer {\n    constructor(\n        private presets: Presets<unknown>,\n        private explorer: PresetHasInOperatorExplorer) {\n\n    }\n\n    public has(name: PropertyKey): boolean {\n        return this.presets\n            .get()\n            .find(preset => this.explorer.has(name, preset)) !== undefined;\n    }\n}\n","import { IPreset } from \"../presets/presets/preset\";\nimport { Expression } from \"../reflector/expressions\";\nimport { Presets } from \"../presets/presets\";\nimport { PlayableUpdateReason } from \"../moq\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class PresetPlayablesUpdater {\n\n    constructor(\n        private presets: Presets<unknown>,\n        private matcher: ExpressionEqualityComparer) {\n\n    }\n\n    public update(interaction: Expression, playable: IPreset<unknown>) {\n        for (const preset of this.presets.get()) {\n            const {target, playable: {update}} = preset;\n            if (this.matcher.equals(interaction, target)) {\n                const reason = preset === playable ?\n                    PlayableUpdateReason.OwnSetupWouldBePlayed :\n                    PlayableUpdateReason.OtherSetupWouldBePlayed;\n                update(reason);\n            }\n        }\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { SetPropertyExpression } from \"../reflector/expressions\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { MoqAPI } from \"../moq\";\nimport { PropertyIsReadOnlyTester } from \"../explorers/has-property.explorer/property-is-read-only.tester\";\n\n/**\n * @hidden\n */\nexport class SetTrap {\n    constructor(\n        private tracker: Tracker,\n        private propertiesValueStorage: PropertiesValueStorage,\n        private interactionPlayer: InteractionPlayer,\n        private propertyIsReadOnlyTester: PropertyIsReadOnlyTester) {\n\n    }\n\n    public intercept(target: any, property: PropertyKey, value: any): boolean {\n        const expression = new SetPropertyExpression(property, value);\n\n        this.tracker.add(expression);\n\n        if (property === MoqAPI) {\n            return false;\n        }\n\n        if (this.propertyIsReadOnlyTester.isReadOnly(property) === true) {\n            return false;\n        }\n\n        const accepted = this.interactionPlayer.play(expression);\n        if (accepted === true || accepted === undefined) {\n            this.propertiesValueStorage.set(property, value);\n        }\n\n        return accepted === undefined ? true : accepted;\n    }\n}\n","import { PrototypeStorage } from \"./prototype.storage\";\n\n/**\n * @hidden\n */\nexport class SetPrototypeOfTrap {\n    constructor(\n        private prototypeStorage: PrototypeStorage) {\n\n    }\n\n    public intercept(prototype: any): any {\n        if (prototype !== undefined) {\n            this.prototypeStorage.set(prototype);\n            return true;\n        }\n        return false;\n\n    }\n}\n","import { GetTrap } from \"./get.trap\";\nimport { SetTrap } from \"./set.trap\";\nimport { ApplyTrap } from \"./apply.trap\";\nimport { GetPrototypeOfTrap } from \"./get-prototype-of.trap\";\nimport { SetPrototypeOfTrap } from \"./set-prototype-of.trap\";\nimport { HasTrap } from \"./has.trap\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { ConstructTrap } from \"./construct.trap\";\n\n/**\n * @hidden\n */\nexport class ProxyFactory<T> {\n    private _proxy: T;\n\n    constructor(private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n                private readonly getTrap: GetTrap,\n                private readonly setTrap: SetTrap,\n                private readonly hasTrap: HasTrap,\n                private readonly applyTrap: ApplyTrap,\n                private readonly getPrototypeOfTrap: GetPrototypeOfTrap,\n                private readonly setPrototypeOfTrap: SetPrototypeOfTrap,\n                private readonly constructTrap: ConstructTrap) {\n    }\n\n    public object(): T {\n        if (this._proxy === undefined) {\n            this._proxy = this.createObject();\n        }\n\n        return this._proxy;\n    }\n\n    private createObject(): T {\n        const options = {\n            get: (target, name) => this.getTrap.intercept(name),\n            set: (target, name, value) => this.setTrap.intercept(target, name, value),\n            has: (target, name) => this.hasTrap.intercept(name),\n            apply: (target, thisArg, args) => this.applyTrap.intercept(target, thisArg, args),\n            getPrototypeOf: () => this.getPrototypeOfTrap.intercept(),\n            setPrototypeOf: (target, prototype) => this.setPrototypeOfTrap.intercept(prototype),\n            construct: (target, args) => this.constructTrap.intercept(args)\n        };\n\n        if (this.options.name) {\n            options[\"mockName\"] = this.options.name;\n        }\n\n        return new Proxy(this.options.target, options);\n    }\n}\n","import { IMockOptions } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const MOCK_OPTIONS = new InjectionToken<IMockOptions<any>>(\"mock options\");\n","import { PrototypeStorage } from \"../../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"../members.explorer/property-descriptor.provider\";\nimport { TypeofInjectionToken } from \"../../injector/typeof-injection-token\";\nimport { REFLECT_HAS } from \"../reflect-has.injection-token\";\n\n/**\n * @hidden\n */\nexport class PropertyIsReadOnlyTester {\n    constructor(\n        private storage: PrototypeStorage,\n        private propertyDescriptorProvider: PropertyDescriptorProvider,\n        private has: TypeofInjectionToken<typeof REFLECT_HAS>) {\n\n    }\n\n    public isReadOnly(name: PropertyKey): boolean {\n        const prototype = this.storage.get();\n        if (prototype && this.has(prototype, name)) {\n            const descriptor = this.propertyDescriptorProvider.get(prototype, name);\n            return descriptor.get instanceof Function && descriptor.set === undefined || descriptor.writable === false;\n        }\n        return false;\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { NewOperatorExpression } from \"../reflector/expressions\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\n\n/**\n * @hidden\n */\nexport class ConstructTrap {\n    constructor(\n        private tracker: Tracker,\n        private interactionPlayer: InteractionPlayer) {\n\n    }\n\n    public intercept(args: any[]): any {\n        const interaction = new NewOperatorExpression(args);\n        this.tracker.add(interaction);\n        return this.interactionPlayer.play(interaction);\n    }\n}\n","import { ApplyTrap } from \"./apply.trap\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { GetTrap } from \"./get.trap\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { HasPropertyExplorer } from \"../explorers/has-property.explorer/has-property.explorer\";\nimport { HasMethodExplorer } from \"../explorers/has-method.explorer/has-method.explorer\";\nimport { SpyFunctionProvider } from \"./spy-function.provider\";\nimport { GetPrototypeOfTrap } from \"./get-prototype-of.trap\";\nimport { PrototypeStorage } from \"./prototype.storage\";\nimport { HasTrap } from \"./has.trap\";\nimport {\n    InOperatorInteractionExplorer\n} from \"../explorers/in-operator-interaction.explorer/in-operator-interaction.explorer\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\nimport { SetTrap } from \"./set.trap\";\nimport { SetPrototypeOfTrap } from \"./set-prototype-of.trap\";\nimport { ProxyFactory } from \"./proxy.factory\";\nimport { MOCK } from \"../injector/mock.injection-token\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { PropertyIsReadOnlyTester } from \"../explorers/has-property.explorer/property-is-read-only.tester\";\nimport { ConstructTrap } from \"./construct.trap\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: ProxyFactory, useClass: ProxyFactory, deps: [\n            MOCK_OPTIONS,\n            GetTrap,\n            SetTrap,\n            HasTrap,\n            ApplyTrap,\n            GetPrototypeOfTrap,\n            SetPrototypeOfTrap,\n            ConstructTrap\n        ]\n    },\n    {provide: ApplyTrap, useClass: ApplyTrap, deps: [Tracker, InteractionPlayer]},\n    {\n        provide: GetTrap, useClass: GetTrap, deps: [\n            MOCK,\n            Tracker,\n            PropertiesValueStorage,\n            InteractionPlayer,\n            HasPropertyExplorer,\n            HasMethodExplorer,\n            SpyFunctionProvider\n        ]\n    },\n    {provide: GetPrototypeOfTrap, useClass: GetPrototypeOfTrap, deps: [PrototypeStorage]},\n    {\n        provide: HasTrap, useClass: HasTrap, deps: [\n            Tracker,\n            PropertiesValueStorage,\n            InteractionPlayer,\n            InOperatorInteractionExplorer,\n            HasPropertyExplorer,\n            HasMethodExplorer,\n            PresetPlayablesUpdater\n        ]\n    },\n    {provide: PropertiesValueStorage, useClass: PropertiesValueStorage, deps: []},\n    {provide: PrototypeStorage, useFactory: ({target}) => new PrototypeStorage(target), deps: [MOCK_OPTIONS]},\n    {\n        provide: SetTrap,\n        useClass: SetTrap,\n        deps: [Tracker, PropertiesValueStorage, InteractionPlayer, PropertyIsReadOnlyTester]\n    },\n    {provide: SetPrototypeOfTrap, useClass: SetPrototypeOfTrap, deps: [PrototypeStorage]},\n    {provide: SpyFunctionProvider, useClass: SpyFunctionProvider, deps: [Tracker, InteractionPlayer]},\n    {provide: ConstructTrap, useClass: ConstructTrap, deps: [Tracker, InteractionPlayer]},\n];\n","import { PresetPlayablesUpdater } from \"./preset-playables.updater\";\nimport { Presets } from \"../presets/presets\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: PresetPlayablesUpdater, useClass: PresetPlayablesUpdater, deps: [Presets, ExpressionEqualityComparer]}\n];\n","import { IPreset } from \"../presets/presets/preset\";\nimport { Expression } from \"../reflector/expressions\";\nimport { ReturnsPreset } from \"../presets/presets/returns.preset\";\nimport { CallbackPresetPlayer } from \"./callback-preset.player\";\nimport { CallbacksPreset } from \"../presets/presets/callbacks.preset\";\nimport { ThrowsPreset } from \"../presets/presets/throws.preset\";\nimport { MimicsPresetPlayer } from \"./mimics-preset.player\";\nimport { MimicsPreset } from \"../presets/presets/mimics.preset\";\n\n/**\n * @hidden\n */\nexport class PresetPlayer {\n    constructor(\n        private callbackPresetPlayer: CallbackPresetPlayer,\n        private mimicsPresetPlayer: MimicsPresetPlayer) {\n\n    }\n\n    public play<T>(preset: IPreset<T>, interaction: Expression): any {\n        if (preset instanceof ReturnsPreset) {\n            return preset.value;\n        }\n        if (preset instanceof CallbacksPreset) {\n            return this.callbackPresetPlayer.play(preset.callback, interaction);\n        }\n        if (preset instanceof MimicsPreset) {\n            return this.mimicsPresetPlayer.play(preset.origin, interaction);\n        }\n        if (preset instanceof ThrowsPreset) {\n            throw preset.exception;\n        }\n    }\n}\n","import { Expression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class CallbackPresetPlayer {\n    public play<TValue>(callback: (interaction: Expression) => TValue, interaction: Expression): any {\n        return callback.apply(undefined, [interaction]);\n    }\n}\n","import {\n    GetPropertyExpression,\n    InOperatorExpression,\n    Expression,\n    FunctionExpression,\n    MethodExpression,\n    NewOperatorExpression,\n    SetPropertyExpression\n} from \"../reflector/expressions\";\nimport { REFLECT_APPLY } from \"./reflect-apply.injection-token\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class MimicsPresetPlayer {\n    constructor(\n        private apply: TypeofInjectionToken<typeof REFLECT_APPLY>) {\n\n    }\n\n    public play(origin: any, interaction: Expression): any {\n        if (interaction instanceof GetPropertyExpression) {\n            return origin[interaction.name];\n        }\n        if (interaction instanceof SetPropertyExpression) {\n            origin[interaction.name] = interaction.value;\n            return true;\n        }\n        if (interaction instanceof MethodExpression) {\n            const method = origin[interaction.name];\n            return this.apply(method, origin, interaction.args);\n        }\n        if (interaction instanceof FunctionExpression) {\n            return this.apply(origin, undefined, interaction.args);\n        }\n        if (interaction instanceof InOperatorExpression) {\n            return interaction.name in origin;\n        }\n\n        if (interaction instanceof NewOperatorExpression) {\n            return new origin(...interaction.args);\n        }\n    }\n}\n","import { IPreset } from \"../presets/presets/preset\";\nimport { Expression } from \"../reflector/expressions\";\nimport { Presets } from \"../presets/presets\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class PlayablePresetProvider {\n\n    constructor(\n        private presets: Presets<unknown>,\n        private matcher: ExpressionEqualityComparer) {\n\n    }\n\n    public get(interaction: Expression): IPreset<unknown> | undefined {\n        for (const preset of this.presets.get()) {\n            const {target, playable: {isPlayable}} = preset;\n            if (this.matcher.equals(interaction, target) && isPlayable() === true) {\n                return preset;\n            }\n        }\n    }\n}\n","import { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const REFLECT_APPLY = new InjectionToken<typeof Reflect.apply>(\"Reflect Apply\");\n","import { PresetPlayer } from \"./preset.player\";\nimport { CallbackPresetPlayer } from \"./callback-preset.player\";\nimport { MimicsPresetPlayer } from \"./mimics-preset.player\";\nimport { PlayablePresetProvider } from \"./playable-preset.provider\";\nimport { Presets } from \"../presets/presets\";\nimport { InteractionPlayer } from \"./interaction.player\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\nimport { REFLECT_APPLY } from \"./reflect-apply.injection-token\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: REFLECT_APPLY, useValue: Reflect.apply, deps: []},\n    {provide: PresetPlayer, useClass: PresetPlayer, deps: [CallbackPresetPlayer, MimicsPresetPlayer]},\n    {provide: PlayablePresetProvider, useClass: PlayablePresetProvider, deps: [Presets, ExpressionEqualityComparer]},\n    {provide: MimicsPresetPlayer, useClass: MimicsPresetPlayer, deps: [REFLECT_APPLY]},\n    {\n        provide: InteractionPlayer,\n        useClass: InteractionPlayer,\n        deps: [PlayablePresetProvider, PresetPlayablesUpdater, PresetPlayer]\n    },\n    {provide: CallbackPresetPlayer, useClass: CallbackPresetPlayer, deps: []},\n];\n","import { Expressions } from \"../reflector/expressions\";\nimport { InteractionFormatter } from \"./interaction.formatter\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\n\n/**\n * @hidden\n */\nexport class ExpressionsFormatter {\n\n    constructor(private readonly interactionFormatter: InteractionFormatter,\n                private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>) {\n\n    }\n\n    public format(expression: Expressions<any>, timesMessage: string, haveBeenCalledTimes: number): string {\n        const expressionDescription = this.interactionFormatter.format(expression);\n        const mockName = this.options.name;\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : \"\";\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n","import {\n    GetPropertyExpression,\n    InOperatorExpression,\n    Expression,\n    FunctionExpression,\n    MethodExpression, NewOperatorExpression,\n    SetPropertyExpression\n} from \"../reflector/expressions\";\nimport { It } from \"../reflector/expression-predicates\";\nimport { GetPropertyFormatter } from \"./get-property.formatter\";\nimport { SetPropertyFormatter } from \"./set-property.formatter\";\nimport { FunctionFormatter } from \"./function.formatter\";\nimport { MethodFormatter } from \"./method.formatter\";\nimport { ConstantFormatter } from \"./constant.formatter\";\nimport { InOperatorFormatter } from \"./in-operator.formatter\";\nimport { NewOperatorFormatter } from \"./new-operator.formatter\";\n\n/**\n * @hidden\n */\nexport class InteractionFormatter {\n\n    constructor(private readonly getPropertyFormatter: GetPropertyFormatter,\n                private readonly setPropertyFormatter: SetPropertyFormatter,\n                private readonly methodFormatter: FunctionFormatter,\n                private readonly namedMethodFormatter: MethodFormatter,\n                private readonly constantFormatter: ConstantFormatter,\n                private readonly inOperatorFormatter: InOperatorFormatter,\n                private readonly newOperatorFormatter: NewOperatorFormatter) {\n\n    }\n\n    public format(interaction: Expression | It<any>): string {\n        if (interaction instanceof GetPropertyExpression) return this.getPropertyFormatter.format(interaction);\n        if (interaction instanceof SetPropertyExpression) return this.setPropertyFormatter.format(interaction);\n        if (interaction instanceof InOperatorExpression) return this.inOperatorFormatter.format(interaction);\n        if (interaction instanceof FunctionExpression) return this.methodFormatter.format(interaction);\n        if (interaction instanceof MethodExpression) return this.namedMethodFormatter.format(interaction);\n        if (interaction instanceof NewOperatorExpression) return this.newOperatorFormatter.format(interaction);\n        if (interaction instanceof It) return this.constantFormatter.format(interaction);\n\n        return undefined;\n    }\n}\n","import { SetPropertyExpression } from \"../reflector/expressions\";\nimport { ConstantFormatter } from \"./constant.formatter\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class SetPropertyFormatter {\n\n    constructor(private constantFormatter: ConstantFormatter,\n                private propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(expression: SetPropertyExpression): string {\n        const value = this.constantFormatter.format(expression.value);\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\n        return `Assignment of ${value} to property \\'${propertyKey}\\'`;\n    }\n}\n","import { It } from \"../reflector/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class ConstantFormatter {\n    public format(object: any | It<any>): string {\n        if (object instanceof It) return `It.Is(${(object as It<any>).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const value of object) {\n                description.push(this.format(value));\n            }\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class PropertyKeyFormatter {\n    public format(property: PropertyKey): string {\n        return String(property);\n    }\n}\n","import { MethodExpression } from \"../reflector/expressions\";\nimport { ConstantFormatter } from \"./constant.formatter\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class MethodFormatter {\n\n    constructor(private readonly constantFormatter: ConstantFormatter,\n                private readonly propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(expression: MethodExpression): string {\n        const formatted: string[] = [];\n\n        for (const arg of expression.args) {\n            formatted.push(this.constantFormatter.format(arg));\n        }\n\n        const value = formatted.join(\", \");\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\n        return `${propertyKey}(${value})`;\n    }\n}\n","import { FunctionExpression } from \"../reflector/expressions\";\nimport { ConstantFormatter } from \"./constant.formatter\";\n\n/**\n * @hidden\n */\nexport class FunctionFormatter {\n\n    constructor(private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: FunctionExpression): string {\n        const value = this.constantFormatter.format(expression.args);\n        return `(${value})`;\n    }\n}\n","import { InOperatorExpression } from \"../reflector/expressions\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class InOperatorFormatter {\n    constructor(private propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(expression: InOperatorExpression): string {\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\n        return `In operator for \\'${propertyKey}\\'`;\n    }\n}\n","import { GetPropertyExpression } from \"../reflector/expressions\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class GetPropertyFormatter {\n    constructor(private readonly propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(interaction: GetPropertyExpression): string {\n        const propertyKey = this.propertyKeyFormatter.format(interaction.name);\n        return `Getter of \\'${propertyKey}\\'`;\n    }\n}\n","import { NewOperatorExpression } from \"../reflector/expressions\";\nimport { ConstantFormatter } from \"./constant.formatter\";\n\n/**\n * @hidden\n */\nexport class NewOperatorFormatter {\n\n    constructor(private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: NewOperatorExpression): string {\n        const value = this.constantFormatter.format(expression.args);\n        return `new constructor(${value})`;\n    }\n}\n","import { VerifyFormatter } from \"./verify.formatter\";\nimport { ExpressionsFormatter } from \"./expressions.formatter\";\nimport { TrackedExpressionsFormatter } from \"./tracked-expressions.formatter\";\nimport { InteractionFormatter } from \"./interaction.formatter\";\nimport { SetPropertyFormatter } from \"./set-property.formatter\";\nimport { ConstantFormatter } from \"./constant.formatter\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\nimport { MethodFormatter } from \"./method.formatter\";\nimport { FunctionFormatter } from \"./function.formatter\";\nimport { InOperatorFormatter } from \"./in-operator.formatter\";\nimport { GetPropertyFormatter } from \"./get-property.formatter\";\nimport { NewOperatorFormatter } from \"./new-operator.formatter\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { Tracker } from \"../tracker/tracker\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: VerifyFormatter,\n        useClass: VerifyFormatter,\n        deps: [ExpressionsFormatter, TrackedExpressionsFormatter, Tracker]\n    },\n    {provide: TrackedExpressionsFormatter, useClass: TrackedExpressionsFormatter, deps: [InteractionFormatter]},\n    {provide: SetPropertyFormatter, useClass: SetPropertyFormatter, deps: [ConstantFormatter, PropertyKeyFormatter]},\n    {provide: PropertyKeyFormatter, useClass: PropertyKeyFormatter, deps: []},\n    {provide: MethodFormatter, useClass: MethodFormatter, deps: [ConstantFormatter, PropertyKeyFormatter]},\n    {provide: FunctionFormatter, useClass: FunctionFormatter, deps: [ConstantFormatter]},\n    {provide: InOperatorFormatter, useClass: InOperatorFormatter, deps: [PropertyKeyFormatter]},\n    {provide: GetPropertyFormatter, useClass: GetPropertyFormatter, deps: [PropertyKeyFormatter]},\n    {provide: ExpressionsFormatter, useClass: ExpressionsFormatter, deps: [InteractionFormatter, MOCK_OPTIONS]},\n    {provide: ConstantFormatter, useClass: ConstantFormatter, deps: []},\n    {provide: NewOperatorFormatter, useClass: NewOperatorFormatter, deps: [ConstantFormatter]},\n    {\n        provide: InteractionFormatter,\n        useClass: InteractionFormatter,\n        deps: [\n            GetPropertyFormatter,\n            SetPropertyFormatter,\n            FunctionFormatter,\n            MethodFormatter,\n            ConstantFormatter,\n            InOperatorFormatter,\n            NewOperatorFormatter\n        ]\n    }\n];\n","import { Expressions } from \"../../reflector/expressions\";\nimport { MethodExpression } from \"../../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class ExpressionHasMethodExplorer {\n    public has(name: PropertyKey, expression: Expressions<unknown>): boolean {\n        if (expression instanceof MethodExpression) {\n            return expression.name === name;\n        }\n\n        return false;\n    }\n}\n","import { PrototypeStorage } from \"../../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"./property-descriptor.provider\";\nimport { REFLECT_HAS } from \"../reflect-has.injection-token\";\nimport { TypeofInjectionToken } from \"../../injector/typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class MembersMethodExplorer {\n    constructor(\n        private storage: PrototypeStorage,\n        private propertyDescriptorProvider: PropertyDescriptorProvider,\n        private has: TypeofInjectionToken<typeof REFLECT_HAS>) {\n\n    }\n\n    public hasMethod(name: PropertyKey): boolean {\n        const prototype = this.storage.get();\n        if (prototype && this.has(prototype, name)) {\n            const descriptor = this.propertyDescriptorProvider.get(prototype, name);\n            return descriptor.value instanceof Function;\n        }\n        return false;\n    }\n}\n\n","import { IPreset } from \"../../presets/presets/preset\";\nimport { ExpressionHasMethodExplorer } from \"./expression.has-method.explorer\";\nimport { ObjectHasMethodExplorer } from \"./object.has-method.explorer\";\nimport { MimicsPreset } from \"../../presets/presets/mimics.preset\";\n\n/**\n * @hidden\n */\nexport class PresetHasMethodExplorer {\n    constructor(private expressionHasMethodExplorer: ExpressionHasMethodExplorer,\n                private objectHasMethodExplorer: ObjectHasMethodExplorer) {\n\n    }\n\n    public has(name: PropertyKey, preset: IPreset<unknown>): boolean {\n        if (preset instanceof MimicsPreset && this.objectHasMethodExplorer.has(name, preset.origin)) {\n            return true;\n        }\n        return this.expressionHasMethodExplorer.has(name, preset.target);\n    }\n}\n","/**\n * @hidden\n */\nexport class ObjectHasMethodExplorer {\n    public has(name: PropertyKey, target: any): boolean {\n        return target[name] instanceof Function;\n    }\n}\n","import { Expressions } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\nimport { InOperatorExpression, FunctionExpression, MethodExpression } from \"../../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class ExpressionHasPropertyExplorer {\n    public has(name: PropertyKey, expression: Expressions<unknown>): boolean {\n        if (expression instanceof It\n            || expression instanceof FunctionExpression\n            || expression instanceof MethodExpression\n            || expression instanceof InOperatorExpression) {\n            return false;\n        }\n\n        return expression.name === name;\n    }\n}\n","import { PrototypeStorage } from \"../../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"./property-descriptor.provider\";\nimport { REFLECT_HAS } from \"../reflect-has.injection-token\";\nimport { TypeofInjectionToken } from \"../../injector/typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class MembersPropertyExplorer {\n    constructor(\n        private storage: PrototypeStorage,\n        private propertyDescriptorProvider: PropertyDescriptorProvider,\n        private has: TypeofInjectionToken<typeof REFLECT_HAS>) {\n\n    }\n\n    public hasProperty(name: PropertyKey): boolean {\n        const prototype = this.storage.get();\n        if (prototype && this.has(prototype, name)) {\n            const descriptor = this.propertyDescriptorProvider.get(prototype, name);\n            return descriptor.get !== undefined || (descriptor.value instanceof Function) === false;\n        }\n        return false;\n    }\n}\n","import { IPreset } from \"../../presets/presets/preset\";\nimport { ExpressionHasPropertyExplorer } from \"./expression-has-property.explorer\";\nimport { ObjectHasPropertyExplorer } from \"./object-has-property.explorer\";\nimport { MimicsPreset } from \"../../presets/presets/mimics.preset\";\n\n/**\n * @hidden\n */\nexport class PresetHasPropertyExplorer {\n    constructor(private expressionHasPropertyExplorer: ExpressionHasPropertyExplorer,\n                private objectHasPropertyExplorer: ObjectHasPropertyExplorer) {\n\n    }\n\n    public has(name: PropertyKey, preset: IPreset<unknown>): boolean {\n        if (preset instanceof MimicsPreset && this.objectHasPropertyExplorer.has(name, preset.origin)) {\n            return true;\n        }\n        return this.expressionHasPropertyExplorer.has(name, preset.target);\n    }\n}\n","/**\n * @hidden\n */\nexport class ObjectHasPropertyExplorer {\n    public has(name: PropertyKey, target: any): boolean {\n        return Reflect.has(target, name) && (target[name] instanceof Function) === false;\n    }\n}\n","import { IPreset } from \"../../presets/presets/preset\";\nimport { InOperatorExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class PresetHasInOperatorExplorer {\n    public has(name: PropertyKey, preset: IPreset<unknown>): boolean {\n        const {playable: {isPlayable}} = preset;\n\n        if (isPlayable() === false) {\n            return false;\n        }\n\n        if (preset.target instanceof InOperatorExpression) {\n            return preset.target.name === name;\n        }\n\n        if (preset.target instanceof It) {\n            return preset.target.test(new InOperatorExpression(name));\n        }\n\n        return false;\n    }\n}\n","/**\n * @hidden\n */\nexport class PropertyDescriptorProvider {\n    get(target: any, name: PropertyKey) {\n        let prototype = target;\n        while (prototype !== null) {\n            const descriptor = Reflect.getOwnPropertyDescriptor(prototype, name);\n            if (descriptor !== undefined) return descriptor;\n            prototype = Reflect.getPrototypeOf(prototype);\n        }\n    }\n}\n","import { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const REFLECT_HAS = new InjectionToken<typeof Reflect.has>(\"Reflect has\");\n","import { ExpressionHasMethodExplorer } from \"./has-method.explorer/expression.has-method.explorer\";\nimport { HasMethodExplorer } from \"./has-method.explorer/has-method.explorer\";\nimport { Presets } from \"../presets/presets\";\nimport { MembersMethodExplorer } from \"./members.explorer/members-method.explorer\";\nimport { PresetHasMethodExplorer } from \"./has-method.explorer/preset.has-method.explorer\";\nimport { ObjectHasMethodExplorer } from \"./has-method.explorer/object.has-method.explorer\";\nimport { ExpressionHasPropertyExplorer } from \"./has-property.explorer/expression-has-property.explorer\";\nimport { HasPropertyExplorer } from \"./has-property.explorer/has-property.explorer\";\nimport { MembersPropertyExplorer } from \"./members.explorer/members-property.explorer\";\nimport { PresetHasPropertyExplorer } from \"./has-property.explorer/preset-has-property.explorer\";\nimport { ObjectHasPropertyExplorer } from \"./has-property.explorer/object-has-property.explorer\";\nimport { InOperatorInteractionExplorer } from \"./in-operator-interaction.explorer/in-operator-interaction.explorer\";\nimport { PresetHasInOperatorExplorer } from \"./in-operator-interaction.explorer/preset.has-in-operator.explorer\";\nimport { PrototypeStorage } from \"../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"./members.explorer/property-descriptor.provider\";\nimport { REFLECT_HAS } from \"./reflect-has.injection-token\";\nimport { PropertyIsReadOnlyTester } from \"./has-property.explorer/property-is-read-only.tester\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: ExpressionHasMethodExplorer, useClass: ExpressionHasMethodExplorer, deps: []},\n    {\n        provide: HasMethodExplorer,\n        useClass: HasMethodExplorer,\n        deps: [Presets, MembersMethodExplorer, PresetHasMethodExplorer]\n    },\n    {provide: ObjectHasMethodExplorer, useClass: ObjectHasMethodExplorer, deps: []},\n    {\n        provide: PresetHasMethodExplorer,\n        useClass: PresetHasMethodExplorer,\n        deps: [ExpressionHasMethodExplorer, ObjectHasMethodExplorer]\n    },\n    {provide: ExpressionHasPropertyExplorer, useClass: ExpressionHasPropertyExplorer, deps: []},\n    {\n        provide: HasPropertyExplorer,\n        useClass: HasPropertyExplorer,\n        deps: [Presets, MembersPropertyExplorer, PresetHasPropertyExplorer]\n    },\n    {provide: ObjectHasPropertyExplorer, useClass: ObjectHasPropertyExplorer, deps: []},\n    {\n        provide: PresetHasPropertyExplorer,\n        useClass: PresetHasPropertyExplorer,\n        deps: [ExpressionHasPropertyExplorer, ObjectHasPropertyExplorer]\n    },\n    {\n        provide: InOperatorInteractionExplorer,\n        useClass: InOperatorInteractionExplorer,\n        deps: [Presets, PresetHasInOperatorExplorer]\n    },\n    {provide: PresetHasInOperatorExplorer, useClass: PresetHasInOperatorExplorer, deps: []},\n    {\n        provide: MembersMethodExplorer,\n        useClass: MembersMethodExplorer,\n        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]\n    },\n    {\n        provide: PropertyIsReadOnlyTester,\n        useClass: PropertyIsReadOnlyTester,\n        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]\n    },\n    {\n        provide: MembersPropertyExplorer,\n        useClass: MembersPropertyExplorer,\n        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]\n    },\n    {provide: PropertyDescriptorProvider, useClass: PropertyDescriptorProvider, deps: []},\n    {provide: REFLECT_HAS, useValue: Reflect.has, deps: []},\n];\n","import { IMockOptions } from \"../moq\";\n\n/**\n * @hidden\n */\nexport class MockOptionsBuilder {\n    build<T>(options: IMockOptions<T>) {\n        const target = (() => undefined) as unknown as T;\n        return {target, ...options};\n    }\n}\n\n","import { IMockOptions } from \"../moq\";\nimport { MOCK_OPTIONS } from \"./mock-options.injection-token\";\nimport { MockOptionsBuilder } from \"./mock-options.builder\";\n\n/**\n * @hidden\n */\nexport function mockOptionsProviders<T>(options: IMockOptions<T>) {\n    return [\n        {provide: MockOptionsBuilder, useClass: MockOptionsBuilder, deps: []},\n        {provide: MOCK_OPTIONS, useFactory: builder => builder.build(options), deps: [MockOptionsBuilder]},\n    ];\n}\n","import { ProxyFactory } from \"../interceptors/proxy.factory\";\nimport { IMock, IPresetBuilder, ISequenceVerifier } from \"../moq\";\nimport { Times } from \"../times\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { Verifier } from \"../verification/verifier\";\nimport { PrototypeStorage } from \"../interceptors/prototype.storage\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { Mock } from \"../mock\";\nimport { MOCK } from \"../injector/mock.injection-token\";\nimport { SetupFactory } from \"../presets/setup.factory\";\nimport { InjectionFactory } from \"../injector/injection-factory\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\nimport { Type } from \"../static.injector/type\";\nimport { Injector } from \"../static.injector/injector\";\nimport { EXPRESSION_REFLECTOR, IExpression } from \"../reflector/expression-reflector\";\n\n\n/**\n * The internal core of {@link Mock} class.\n */\nexport class MockCore<T> implements IMock<T> {\n    constructor(\n        public readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n        public readonly tracker: Tracker,\n        private readonly injector: Injector,\n        private readonly reflector: TypeofInjectionToken<typeof EXPRESSION_REFLECTOR>,\n        private readonly interceptor: ProxyFactory<T>,\n        private readonly verifier: Verifier<T>,\n        private readonly prototypeStorage: PrototypeStorage,\n        private readonly mock: TypeofInjectionToken<typeof MOCK>,\n        private readonly setupFactory: SetupFactory<T>) {\n\n    }\n\n    public get name() {\n        return this.options.name;\n    }\n\n    public resolve<S, R = S extends InjectionFactory ? ReturnType<S[\"factory\"]> : S>(token: Type<S> | InjectionToken<S>): R {\n        return this.injector.get(token, null) as unknown as R;\n    }\n\n    public setup<E extends IExpression<T>,\n        R = E extends (...args: any[]) => infer M ? M : any>(expression: E): IPresetBuilder<T, R> {\n        const expressions = this.reflector.reflect(expression);\n        return this.setupFactory.create<R>(expressions);\n    }\n\n    public verify(expression: IExpression<T>, times: Times): IMock<T> {\n        const expressions = this.reflector.reflect(expression);\n        this.verifier.test(expressions, times);\n        return this.mock as IMock<T>;\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock<T> {\n        this.prototypeStorage.set(prototype);\n        return this.mock as IMock<T>;\n    }\n\n    /**\n     * @experimental\n     */\n    public insequence(sequence: ISequenceVerifier, expression: IExpression<T>): IMock<T> {\n        sequence.add(this, expression);\n        return this.mock as IMock<T>;\n    }\n}\n","import { MockCore } from \"./mock-core\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { ProxyFactory } from \"../interceptors/proxy.factory\";\nimport { Verifier } from \"../verification/verifier\";\nimport { PrototypeStorage } from \"../interceptors/prototype.storage\";\nimport { MOCK } from \"../injector/mock.injection-token\";\nimport { SetupFactory } from \"../presets/setup.factory\";\nimport { Injector } from \"../static.injector/injector\";\nimport { EXPRESSION_REFLECTOR } from \"../reflector/expression-reflector\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: MockCore, useClass: MockCore, deps: [\n            MOCK_OPTIONS,\n            Tracker,\n            Injector,\n            EXPRESSION_REFLECTOR,\n            ProxyFactory,\n            Verifier,\n            PrototypeStorage,\n            MOCK,\n            SetupFactory\n        ]\n    },\n];\n","import { Expressions } from \"../reflector/expressions\";\nimport { AutoMockOptionsBuilder } from \"./auto-mock-options.builder\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK_CONSTRUCTOR } from \"../injector/mock-constructor.injection-token\";\n\n/**\n * This service is used to create an instance of a Mock for auto mocking feature\n */\nexport class AutoMockFactory {\n    constructor(\n        private readonly ctor: TypeofInjectionToken<typeof MOCK_CONSTRUCTOR>,\n        private readonly optionsBuilder: AutoMockOptionsBuilder) {\n    }\n\n    public create<T>(expression: Expressions<T>) {\n        const options = this.optionsBuilder.create(expression);\n        return this.ctor(options);\n    }\n}\n\n","import { IMock } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @Hidden\n */\nexport const ROOT_MOCK = new InjectionToken<IMock<unknown>>(\"ROOT MOCK\");\n","import { Expressions } from \"../reflector/expressions\";\nimport { IMock } from \"../moq\";\nimport { InjectionFactory } from \"../injector/injection-factory\";\n\n\n/**\n * This service provides access to all auto mocked instances\n */\nexport class AutoMockedStorage implements InjectionFactory {\n    constructor() {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return new Map<Expressions<unknown>, IMock<unknown>>();\n    }\n}\n","import { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { AutoMockNameFormatter } from \"./name-formatters/auto-mock-name.formatter\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { IMockOptions } from \"../moq\";\nimport { AutoMockInjectorConfig } from \"./auto-mock-injector.config\";\n\n/**\n * This class provides configuration for auto mocking mocks\n */\nexport class AutoMockOptionsBuilder {\n    constructor(\n        private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n        private readonly autoMockNameFormatter: AutoMockNameFormatter,\n        private readonly autoMockInjectorConfig: AutoMockInjectorConfig) {\n    }\n\n    public create<T>(expression: Expressions<T>): IMockOptions<T> {\n        return {\n            name: this.autoMockNameFormatter.format(this.options.name, expression),\n            target: this.options.target,\n            injectorConfig: this.autoMockInjectorConfig\n        };\n    }\n}\n","import { Expressions } from \"../../reflector/expressions\";\nimport { FunctionFormatter } from \"../../formatters/function.formatter\";\nimport { PropertyKeyFormatter } from \"../../formatters/property-key.formatter\";\nimport { MethodFormatter } from \"../../formatters/method.formatter\";\nimport { ConstantFormatter } from \"../../formatters/constant.formatter\";\nimport { NamePrefixProvider } from \"./name-prefix.provider\";\nimport {\n    GetPropertyExpression,\n    FunctionExpression,\n    MethodExpression,\n    NewOperatorExpression\n} from \"../../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class AutoMockNameFormatter {\n    constructor(\n        private readonly namePrefixProvider: NamePrefixProvider,\n        private readonly methodFormatter: FunctionFormatter,\n        private readonly propertyKeyFormatter: PropertyKeyFormatter,\n        private readonly namedMethodFormatter: MethodFormatter,\n        private readonly constantFormatter: ConstantFormatter) {\n    }\n\n    public format<T>(name: string | undefined, expression: Expressions<T>): string {\n        const prefix = this.namePrefixProvider.get(name);\n        if (expression instanceof FunctionExpression) {\n            return `${prefix}${this.methodFormatter.format(expression)}`;\n        }\n        if (expression instanceof GetPropertyExpression) {\n            return `${prefix}.${this.propertyKeyFormatter.format(expression.name)}`;\n        }\n        if (expression instanceof MethodExpression) {\n            return `${prefix}.${this.namedMethodFormatter.format(expression)}`;\n        }\n        if (expression instanceof NewOperatorExpression) {\n            return `new ${name}(${this.constantFormatter.format(expression.args)})`;\n        }\n\n        return `${name}[${expression}]`;\n    }\n}\n","import { IInjectorConfig, IMock, IMockOptions } from \"../moq\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { ROOT_MOCK } from \"../injector/root-mock.injection-token\";\n\n/**\n * Provides configuration for an angular based injector that would be used internally for auto mocking feature\n */\nexport class AutoMockInjectorConfig implements IInjectorConfig {\n    constructor(private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n                private readonly mock: IMock<unknown>,\n                private readonly root: IMock<unknown>) {\n\n    }\n\n    get(options: IMockOptions<unknown>, providers: StaticProvider[]): StaticProvider[] {\n        if (this.root) {\n            return this.options.injectorConfig.get(options, providers);\n        }\n        return [\n            ...this.options.injectorConfig.get(options, providers),\n            {provide: ROOT_MOCK, useValue: this.mock, deps: []},\n        ];\n    }\n}\n","/**\n * @hidden\n */\nexport class NamePrefixProvider {\n    public get(name: string | undefined) {\n        return name ? name : \"instance\";\n    }\n}\n","import { IMock, IMockOptions } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @Hidden\n */\nexport const MOCK_CONSTRUCTOR = new InjectionToken<(opts: IMockOptions<unknown>) => IMock<unknown>>(\"IMock constructor\");\n","import { Expressions } from \"../../reflector/expressions\";\nimport { ExpressionValidator } from \"./expression.validator\";\n\nexport class ComplexExpressionValidator {\n\n    constructor(private readonly validator: ExpressionValidator) {\n    }\n\n    validate(expressions: Expressions<unknown>[]): { valid: boolean; errors: [Expressions<unknown>, boolean][] } {\n        const errors: [Expressions<unknown>, boolean][] = [];\n        const clone = [...expressions];\n        const last = clone.pop();\n        for (const expression of clone) {\n            errors.push([expression, this.validator.validate(expression)]);\n        }\n        errors.push([last, true]);\n        const isValid = errors.filter(([, valid]) => valid === false).length === 0;\n        return {\n            valid: isValid,\n            errors :  isValid ? [] : errors\n        };\n    }\n}\n","import { Expressions } from \"../../reflector/expressions\";\nimport { ComplexExpressionErrorFormatter } from \"./expression.formatters/complex-expression.error-formatter\";\n\nexport class ExpressionGuardExceptionFactory {\n    constructor(\n        private readonly formatter: ComplexExpressionErrorFormatter) {\n    }\n\n    create(expressions: [Expressions<unknown>, boolean][]): Error {\n        const message = `${this.formatter.format(expressions)} is not a safe expression for auto mocking. `\n        + \" It predicate could not be used, the only exception is the last part.\"\n        + \" Please see https://github.com/dvabuzyarov/moq.ts#auto-mocking for more details.\";\n        return new Error(message);\n    }\n}\n","import {\n    Expressions,\n    FunctionExpression,\n    GetPropertyExpression,\n    InOperatorExpression,\n    MethodExpression,\n    NewOperatorExpression,\n    SetPropertyExpression\n} from \"../../reflector/expressions\";\nimport { FunctionExpressionValidator } from \"./function-expression.validator\";\nimport { GetPropertyExpressionValidator } from \"./get-property-expression.validator\";\nimport { SetPropertyExpressionValidator } from \"./set-property-expression.validator\";\nimport { InstanceMethodExpressionValidator } from \"./instance-method-expression.validator\";\nimport { NewOperatorExpressionValidator } from \"./new-operator-expression.validator\";\nimport { It } from \"../../reflector/expression-predicates\";\nimport { InOperatorExpressionValidator } from \"./in-operator-expression.validator\";\n\nexport class ExpressionValidator {\n\n    constructor(private readonly functionExpressionGuard: FunctionExpressionValidator,\n                private readonly getPropertyExpressionGuard: GetPropertyExpressionValidator,\n                private readonly setPropertyExpressionGuard: SetPropertyExpressionValidator,\n                private readonly inOperatorExpressionGuard: InOperatorExpressionValidator,\n                private readonly instanceMethodExpressionGuard: InstanceMethodExpressionValidator,\n                private readonly newOperatorExpressionGuard: NewOperatorExpressionValidator) {\n    }\n\n    validate(expression: Expressions<unknown>) {\n        switch (expression.constructor) {\n            case FunctionExpression:\n                return this.functionExpressionGuard.validate(expression as FunctionExpression);\n            case GetPropertyExpression:\n                return this.getPropertyExpressionGuard.validate(expression as GetPropertyExpression);\n            case SetPropertyExpression:\n                return this.setPropertyExpressionGuard.validate(expression as SetPropertyExpression);\n            case InOperatorExpression:\n                return this.inOperatorExpressionGuard.validate(expression as InOperatorExpression);\n            case MethodExpression:\n                return this.instanceMethodExpressionGuard.validate(expression as MethodExpression);\n            case NewOperatorExpression:\n                return this.newOperatorExpressionGuard.validate(expression as NewOperatorExpression);\n            case It:\n                return false;\n            default:\n                throw new Error(`Unknown expression type: ${expression.constructor.name}`);\n        }\n    }\n}\n","import { FunctionExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class FunctionExpressionValidator {\n    validate({args}: FunctionExpression) {\n        return args.filter(arg => arg instanceof It).length === 0;\n    }\n}\n","import { GetPropertyExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class GetPropertyExpressionValidator {\n    validate({name}: GetPropertyExpression) {\n        return (name as any instanceof It) === false;\n    }\n}\n","import { SetPropertyExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class SetPropertyExpressionValidator {\n    validate({name, value}: SetPropertyExpression) {\n        return (name as any instanceof It || value instanceof It) === false;\n    }\n}\n","import { InOperatorExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class InOperatorExpressionValidator {\n\n    validate({name}: InOperatorExpression) {\n        return (name as any instanceof It) === false;\n    }\n}\n","import { MethodExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class InstanceMethodExpressionValidator {\n    validate({name, args}: MethodExpression) {\n        return (name as any instanceof It || args.filter(arg => arg instanceof It).length > 0) === false;\n    }\n}\n","import { NewOperatorExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class NewOperatorExpressionValidator {\n    validate({args}: NewOperatorExpression) {\n        return args.filter(arg => arg instanceof It).length === 0;\n    }\n}\n","import { Expressions } from \"../../../reflector/expressions\";\nimport { TypeofInjectionToken } from \"../../../injector/typeof-injection-token\";\nimport { MOCK_OPTIONS } from \"../../../mock-options/mock-options.injection-token\";\nimport { NamePrefixProvider } from \"../../name-formatters/name-prefix.provider\";\nimport { ExpressionFormatter } from \"./expression.formatter\";\nimport { StringErrorStyler } from \"./string.error-styler\";\n\nexport class ComplexExpressionErrorFormatter {\n    constructor(\n        private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n        private readonly namePrefixProvider: NamePrefixProvider,\n        private readonly expressionFormatter: ExpressionFormatter,\n        private readonly errorStyler: StringErrorStyler) {\n    }\n\n    public format(expressions: [Expressions<unknown>, boolean][]) {\n        const instance = this.namePrefixProvider.get(this.options.name);\n        let message = instance;\n        for (const [expression, valid] of expressions) {\n            const value = this.expressionFormatter.format(expression, instance);\n            message += valid ? value : this.errorStyler.style(value);\n        }\n\n        return message;\n    }\n}\n","import {\n    Expressions,\n    FunctionExpression,\n    GetPropertyExpression,\n    MethodExpression,\n    NewOperatorExpression\n} from \"../../../reflector/expressions\";\nimport { FunctionFormatter } from \"../../../formatters/function.formatter\";\nimport { PropertyKeyFormatter } from \"../../../formatters/property-key.formatter\";\nimport { MethodFormatter } from \"../../../formatters/method.formatter\";\nimport { ConstantFormatter } from \"../../../formatters/constant.formatter\";\n\nexport class ExpressionFormatter {\n    constructor(\n        private readonly functionFormatter: FunctionFormatter,\n        private readonly propertyKeyFormatter: PropertyKeyFormatter,\n        private readonly instanceMethodFormatter: MethodFormatter,\n        private readonly constantFormatter: ConstantFormatter) {\n    }\n\n    public format(expression: Expressions<unknown>, name: string) {\n        if (expression instanceof FunctionExpression) {\n            return this.functionFormatter.format(expression);\n        }\n        if (expression instanceof GetPropertyExpression) {\n            return `.${this.propertyKeyFormatter.format(expression.name)}`;\n        }\n        if (expression instanceof MethodExpression) {\n            return `.${this.instanceMethodFormatter.format(expression)}`;\n        }\n        if (expression instanceof NewOperatorExpression) {\n            return `new ${name}(${this.constantFormatter.format(expression.args)})`;\n        }\n\n        return `[${expression}]`;\n    }\n}\n","export class StringErrorStyler {\n    public style(value: string) {\n        return `\\u001B[4m${value}\\u001B[24m`;\n    }\n}\n","import { ComplexExpressionErrorFormatter } from \"./complex-expression.error-formatter\";\nimport { MOCK_OPTIONS } from \"../../../mock-options/mock-options.injection-token\";\nimport { NamePrefixProvider } from \"../../name-formatters/name-prefix.provider\";\nimport { ExpressionFormatter } from \"./expression.formatter\";\nimport { FunctionFormatter } from \"../../../formatters/function.formatter\";\nimport { PropertyKeyFormatter } from \"../../../formatters/property-key.formatter\";\nimport { MethodFormatter } from \"../../../formatters/method.formatter\";\nimport { ConstantFormatter } from \"../../../formatters/constant.formatter\";\nimport { StringErrorStyler } from \"./string.error-styler\";\n\nexport default [\n    {\n        provide: ComplexExpressionErrorFormatter, useClass: ComplexExpressionErrorFormatter, deps: [\n            MOCK_OPTIONS,\n            NamePrefixProvider,\n            ExpressionFormatter,\n            StringErrorStyler\n        ]\n    },\n    {\n        provide: ExpressionFormatter,\n        useClass: ExpressionFormatter,\n        deps: [FunctionFormatter, PropertyKeyFormatter, MethodFormatter, ConstantFormatter]\n    },\n    {provide: StringErrorStyler, useClass: StringErrorStyler, deps: []},\n];\n","import { ComplexExpressionGuard } from \"./complex-expression.guard\";\nimport { ComplexExpressionValidator } from \"./complex-expression.validator\";\nimport { ExpressionGuardExceptionFactory } from \"./expression-guard-exception.factory\";\nimport { ExpressionValidator } from \"./expression.validator\";\nimport { FunctionExpressionValidator } from \"./function-expression.validator\";\nimport { GetPropertyExpressionValidator } from \"./get-property-expression.validator\";\nimport { SetPropertyExpressionValidator } from \"./set-property-expression.validator\";\nimport { InOperatorExpressionValidator } from \"./in-operator-expression.validator\";\nimport { InstanceMethodExpressionValidator } from \"./instance-method-expression.validator\";\nimport { NewOperatorExpressionValidator } from \"./new-operator-expression.validator\";\nimport { ComplexExpressionErrorFormatter } from \"./expression.formatters/complex-expression.error-formatter\";\nimport expressionFormatters from \"./expression.formatters\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: ComplexExpressionGuard,\n        useClass: ComplexExpressionGuard,\n        deps: [ComplexExpressionValidator, ExpressionGuardExceptionFactory]\n    },\n    {provide: ComplexExpressionValidator, useClass: ComplexExpressionValidator, deps: [ExpressionValidator]},\n    {\n        provide: ExpressionGuardExceptionFactory,\n        useClass: ExpressionGuardExceptionFactory,\n        deps: [ComplexExpressionErrorFormatter]\n    },\n    {\n        provide: ExpressionValidator, useClass: ExpressionValidator, deps: [\n            FunctionExpressionValidator,\n            GetPropertyExpressionValidator,\n            SetPropertyExpressionValidator,\n            InOperatorExpressionValidator,\n            InstanceMethodExpressionValidator,\n            NewOperatorExpressionValidator\n        ]\n    },\n    {provide: FunctionExpressionValidator, useClass: FunctionExpressionValidator, deps: []},\n    {provide: GetPropertyExpressionValidator, useClass: GetPropertyExpressionValidator, deps: []},\n    {provide: SetPropertyExpressionValidator, useClass: SetPropertyExpressionValidator, deps: []},\n    {provide: InOperatorExpressionValidator, useClass: InOperatorExpressionValidator, deps: []},\n    {provide: InstanceMethodExpressionValidator, useClass: InstanceMethodExpressionValidator, deps: []},\n    {provide: NewOperatorExpressionValidator, useClass: NewOperatorExpressionValidator, deps: []},\n    ...expressionFormatters\n];\n","import { MOCK } from \"../injector/mock.injection-token\";\nimport { AutoMockFactory } from \"./auto-mock.factory\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { RootMockProvider } from \"./root-mock.provider\";\nimport { Optional } from \"../static.injector/metadata\";\nimport { ROOT_MOCK } from \"../injector/root-mock.injection-token\";\nimport { AutoMockedStorage } from \"./auto-mock.storage\";\nimport { AutoMockProvider } from \"./auto-mock.provider\";\nimport { AutoMockOptionsBuilder } from \"./auto-mock-options.builder\";\nimport { AutoMockNameFormatter } from \"./name-formatters/auto-mock-name.formatter\";\nimport { AutoMockInjectorConfig } from \"./auto-mock-injector.config\";\nimport { NamePrefixProvider } from \"./name-formatters/name-prefix.provider\";\nimport { FunctionFormatter } from \"../formatters/function.formatter\";\nimport { PropertyKeyFormatter } from \"../formatters/property-key.formatter\";\nimport { MethodFormatter } from \"../formatters/method.formatter\";\nimport { ConstantFormatter } from \"../formatters/constant.formatter\";\nimport { MOCK_CONSTRUCTOR } from \"../injector/mock-constructor.injection-token\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\nimport { ComplexExpressionValidator } from \"./expression.guards/complex-expression.validator\";\nimport expressionGuards from \"./expression.guards\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: NamePrefixProvider, useClass: NamePrefixProvider, deps: []},\n    {provide: AutoMockedStorage, useClass: AutoMockedStorage, deps: []},\n    {\n        provide: AutoMockNameFormatter,\n        useClass: AutoMockNameFormatter,\n        deps: [NamePrefixProvider, FunctionFormatter, PropertyKeyFormatter, MethodFormatter, ConstantFormatter]\n    },\n    {\n        provide: AutoMockOptionsBuilder,\n        useClass: AutoMockOptionsBuilder,\n        deps: [MOCK_OPTIONS, AutoMockNameFormatter, AutoMockInjectorConfig]\n    },\n    {\n        provide: AutoMockInjectorConfig,\n        useClass: AutoMockInjectorConfig,\n        deps: [MOCK_OPTIONS, MOCK, [new Optional(), ROOT_MOCK]]\n    },\n    {provide: AutoMockFactory, useClass: AutoMockFactory, deps: [MOCK_CONSTRUCTOR, AutoMockOptionsBuilder]},\n    {provide: RootMockProvider, useClass: RootMockProvider, deps: [MOCK, [new Optional(), ROOT_MOCK]]},\n    {\n        provide: AutoMockProvider,\n        useClass: AutoMockProvider,\n        deps: [AutoMockedStorage, ExpressionEqualityComparer, AutoMockFactory]\n    },\n    {provide: ComplexExpressionValidator, useClass: ComplexExpressionValidator, deps: []},\n    ...expressionGuards\n];\n","import { ItEqualityComparer } from \"./it.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class ConstantEqualityComparer {\n    constructor(private readonly itEqualityComparer: ItEqualityComparer) {\n    }\n\n    public equals(left: any, right: any): boolean {\n        const actual = this.itEqualityComparer.equals(left, right);\n        return actual === undefined ? left === right : actual;\n    }\n}\n\n","import { ConstantEqualityComparer } from \"./constant.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class ArgumentsEqualityComparer {\n    constructor(private readonly constantMatcher: ConstantEqualityComparer) {\n\n    }\n\n    public equals(left: any[], right: any[]): boolean {\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        for (let i = 0; i < left.length; i++) {\n            const lvalue = left[i];\n            const rvalue = right[i];\n            if (this.constantMatcher.equals(lvalue, rvalue) === false) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { GetPropertyExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class GetPropertyEqualityComparer {\n\n    public equals(left: GetPropertyExpression, right: GetPropertyExpression): boolean {\n        return left.name === right.name;\n    }\n}\n","import { InOperatorExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class InOperatorEqualityComparer {\n    public equals(left: InOperatorExpression, right: InOperatorExpression): boolean {\n        return left.name === right.name;\n    }\n}\n","import { ArgumentsEqualityComparer } from \"./arguments.equality-comparer\";\nimport { MethodExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class InstanceMethodEqualityComparer {\n\n    constructor(\n        private readonly argumentsMatcher: ArgumentsEqualityComparer) {\n\n    }\n\n    public equals(left: MethodExpression, right: MethodExpression): boolean {\n        return left.name === right.name && this.argumentsMatcher.equals(left.args, right.args);\n    }\n}\n","import { It } from \"../reflector/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class ItEqualityComparer {\n\n    public equals<T>(left: any | It<T>, right: any | It<T>): boolean {\n        if (left instanceof It && right instanceof It) {\n            return left === right || left.predicate === right.predicate;\n        }\n        if (left instanceof It) {\n            return left.test(right);\n        }\n\n        if (right instanceof It) {\n            return right.test(left);\n        }\n\n        return undefined;\n    }\n}\n","import { ArgumentsEqualityComparer } from \"./arguments.equality-comparer\";\nimport { FunctionExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class MethodEqualityComparer {\n\n    constructor(private readonly argumentsMatcher: ArgumentsEqualityComparer) {\n\n    }\n\n    public equals(left: FunctionExpression, right: FunctionExpression): boolean {\n        return this.argumentsMatcher.equals(left.args, right.args);\n    }\n}\n","import { ArgumentsEqualityComparer } from \"./arguments.equality-comparer\";\nimport { NewOperatorExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class NewOperatorEqualityComparer {\n\n    constructor(private readonly argumentsMatcher: ArgumentsEqualityComparer) {\n\n    }\n\n    public equals(left: NewOperatorExpression, right: NewOperatorExpression): boolean {\n        return this.argumentsMatcher.equals(left.args, right.args);\n    }\n}\n","import { ConstantEqualityComparer } from \"./constant.equality-comparer\";\nimport { SetPropertyExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class SetPropertyEqualityComparer {\n\n    constructor(private readonly constantMatcher: ConstantEqualityComparer) {\n\n    }\n\n    public equals(left: SetPropertyExpression, right: SetPropertyExpression): boolean {\n        return left.name === right.name && this.constantMatcher.equals(left.value, right.value);\n    }\n}\n","import { ConstantEqualityComparer } from \"./constant.equality-comparer\";\nimport { ArgumentsEqualityComparer } from \"./arguments.equality-comparer\";\nimport { GetPropertyEqualityComparer } from \"./get-property.equality-comparer\";\nimport { InOperatorEqualityComparer } from \"./in-operator.equality-comparer\";\nimport { InstanceMethodEqualityComparer } from \"./instance-method.equality-comparer\";\nimport { ItEqualityComparer } from \"./it.equality-comparer\";\nimport { MethodEqualityComparer } from \"./method.equality-comparer\";\nimport { NewOperatorEqualityComparer } from \"./new-operator.equality-comparer\";\nimport { SetPropertyEqualityComparer } from \"./set-property.equality-comparer\";\nimport { ExpressionEqualityComparer } from \"./expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: ConstantEqualityComparer, useClass: ConstantEqualityComparer, deps: [ItEqualityComparer]},\n    {provide: ArgumentsEqualityComparer, useClass: ArgumentsEqualityComparer, deps: [ConstantEqualityComparer]},\n    {provide: GetPropertyEqualityComparer, useClass: GetPropertyEqualityComparer, deps: []},\n    {provide: InOperatorEqualityComparer, useClass: InOperatorEqualityComparer, deps: []},\n    {\n        provide: InstanceMethodEqualityComparer,\n        useClass: InstanceMethodEqualityComparer,\n        deps: [ArgumentsEqualityComparer]\n    },\n    {provide: ItEqualityComparer, useClass: ItEqualityComparer, deps: []},\n    {provide: MethodEqualityComparer, useClass: MethodEqualityComparer, deps: [ArgumentsEqualityComparer]},\n    {provide: NewOperatorEqualityComparer, useClass: NewOperatorEqualityComparer, deps: [ArgumentsEqualityComparer]},\n    {provide: SetPropertyEqualityComparer, useClass: SetPropertyEqualityComparer, deps: [ConstantEqualityComparer]},\n    {\n        provide: ExpressionEqualityComparer,\n        useClass: ExpressionEqualityComparer,\n        deps: [\n            GetPropertyEqualityComparer,\n            SetPropertyEqualityComparer,\n            MethodEqualityComparer,\n            InstanceMethodEqualityComparer,\n            InOperatorEqualityComparer,\n            NewOperatorEqualityComparer,\n            ItEqualityComparer\n        ]\n    },\n];\n\n","import { IInjectorConfig, IMockOptions } from \"../moq\";\nimport trackerProviders from \"../tracker\";\nimport reflectorProviders from \"../reflector\";\nimport presetsProviders from \"../presets\";\nimport verificationProviders from \"../verification\";\nimport interceptorsProviders from \"../interceptors\";\nimport playablesProviders from \"../playables\";\nimport interactionPlayersProviders from \"../interaction-players\";\nimport formattersProviders from \"../formatters\";\nimport typeExplorersProviders from \"../explorers\";\nimport { mockOptionsProviders } from \"../mock-options/mock-options.providers\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport mockCoreProviders from \"../core\";\nimport autoMockingProviders from \"../auto-mocking\";\nimport expressionEqualityComparersProviders from \"../expression.equality-comparers\";\n\n/**\n * Provides the default configuration for an angular based injector that would be used internally by {@link Mock} instance.\n */\nexport class DefaultInjectorConfig implements IInjectorConfig {\n    constructor(private readonly providers: StaticProvider[] = []) {\n    }\n\n    get(options: IMockOptions<unknown>, providers: StaticProvider[]): StaticProvider[] {\n        return [\n            ...providers,\n            ...mockOptionsProviders(options),\n            ...trackerProviders,\n            ...reflectorProviders,\n            ...presetsProviders,\n            ...autoMockingProviders,\n            ...verificationProviders,\n            ...interceptorsProviders,\n            ...playablesProviders,\n            ...interactionPlayersProviders,\n            ...formattersProviders,\n            ...expressionEqualityComparersProviders,\n            ...typeExplorersProviders,\n            ...mockCoreProviders,\n            ...this.providers,\n        ];\n    }\n}\n","import { IMock, IMockOptions, IPresetBuilder, ISequenceVerifier } from \"./moq\";\nimport { Times } from \"./times\";\nimport { injectorFactory } from \"./injector/injector.factory\";\nimport { MOCK } from \"./injector/mock.injection-token\";\nimport { DefaultInjectorConfig } from \"./injector/default-injector.config\";\nimport { MockCore } from \"./core/mock-core\";\nimport { InjectionFactory, TypeOfInjectionFactory } from \"./injector/injection-factory\";\nimport { Type } from \"./static.injector/type\";\nimport { InjectionToken } from \"./static.injector/injection_token\";\nimport { MOCK_CONSTRUCTOR } from \"./injector/mock-constructor.injection-token\";\nimport { IExpression } from \"./reflector/expression-reflector\";\n\n/**\n * The default implementation of {@link IMock} interface.\n */\nexport class Mock<T> implements IMock<T> {\n    private static Options: IMockOptions<unknown> = undefined;\n    private readonly core: MockCore<T>;\n\n    constructor(options: IMockOptions<T> = {}) {\n        const preOptions = {...Mock.options, ...options} as IMockOptions<T>;\n        const providers = [\n            {provide: MOCK, useValue: this, deps: []},\n            {provide: MOCK_CONSTRUCTOR, useValue: (opts: IMockOptions<unknown>) => new Mock(opts), deps: []},\n        ];\n        const injector = injectorFactory(preOptions, ...providers);\n        this.core = injector.get(MockCore);\n    }\n\n    /**\n     * The default mock options that would applied to all instantiating Mock objects.\n     * By default it sets {@link IMockOptions.target} as a function, {@link IMockOptions.injectorConfig} as\n     * instance of {@link DefaultInjectorConfig} and {@link IMockOptions.name} as undefined.\n     * If an options are passed as constructor parameter {@link Mock.constructor} they will override the default options.\n     */\n    static get options() {\n        if (Mock.Options === undefined) {\n            Mock.Options = {\n                target: () => undefined,\n                injectorConfig: new DefaultInjectorConfig()\n            };\n        }\n        return Mock.Options;\n    }\n\n    /**\n     * The default mock options that would applied to all instantiating Mock objects.\n     * If an options are passed as constructor parameter they will override the default options.\n     */\n    static set options(options: IMockOptions<unknown>) {\n        Mock.Options = options;\n    }\n\n    public get options() {\n        return this.core.options;\n    }\n\n    public get tracker() {\n        return this.core.tracker;\n    }\n\n    public get name() {\n        return this.core.name;\n    }\n\n    public setup<E extends IExpression<T>,\n        R = E extends (...args: any[]) => infer M ? M : any>(expression: E): IPresetBuilder<T, R> {\n        return this.core.setup(expression);\n    }\n\n    public verify(expression: IExpression<T>, times = Times.Once()): IMock<T> {\n        return this.core.verify(expression, times);\n    }\n\n    public object(): T {\n        return this.core.object();\n    }\n\n    public prototypeof(prototype?: any): IMock<T> {\n        return this.core.prototypeof(prototype);\n    }\n\n    /**\n     * @experimental\n     */\n    public insequence(sequence: ISequenceVerifier, expression: IExpression<T>): IMock<T> {\n        return this.core.insequence(sequence, expression);\n    }\n\n    public resolve<S, R = S extends InjectionFactory ? TypeOfInjectionFactory<S> : S>(token: Type<S> | InjectionToken<S>): R {\n        return this.core.resolve(token);\n    }\n}\n","/**\n * @hidden\n */\nexport class CommonTypeProvider {\n    public ofType(left: unknown, right: unknown) {\n        return typeof left && typeof right;\n    }\n}\n\n","import { IObjectMatcher } from \"./object-matcher.type\";\n\n/**\n * Matches Date objects\n */\nexport class DateMatcher implements IObjectMatcher {\n    public matched<T = Date>(left: T, right: T): boolean {\n        if (left instanceof Date && right instanceof Date) {\n            return left.valueOf() === right.valueOf();\n        }\n        return undefined;\n    }\n}\n\n","import { EqualMatcher } from \"./equal.matcher\";\nimport { ConstantEqualityComparer } from \"../expression.equality-comparers/constant.equality-comparer\";\nimport { ItEqualityComparer } from \"../expression.equality-comparers/it.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class EqualConstantMatcher implements Readonly<ConstantEqualityComparer> {\n    constructor(\n        private readonly itEqualityComparer: ItEqualityComparer,\n        private readonly equalMatcher: EqualMatcher) {\n    }\n\n    equals(left: any, right: any): boolean {\n        const actual = this.itEqualityComparer.equals(left, right);\n        return actual === undefined ? this.equalMatcher.matched(left, right) : actual;\n    }\n}\n\n","import { PrimitiveMatcher } from \"./primitive.matcher\";\nimport { TypesMatcher } from \"./types.matcher\";\nimport { CommonTypeProvider } from \"./common-type.provider\";\nimport { ObjectMatcher } from \"./object.matcher\";\nimport { FunctionMatcher } from \"./function.matcher\";\n\n/**\n * @hidden\n */\nexport class EqualMatcher {\n\n    constructor(\n        private readonly typesMatcher: TypesMatcher,\n        private readonly commonTypeProvider: CommonTypeProvider,\n        private readonly primitiveMatcher: PrimitiveMatcher,\n        private readonly objectMatcher: ObjectMatcher,\n        private readonly functionMatcher: FunctionMatcher) {\n    }\n\n    public matched(left: any, right: any): boolean {\n        if (this.typesMatcher.matched(left, right) === false) {\n            return false;\n        }\n\n        switch (this.commonTypeProvider.ofType(left, right)) {\n            case \"undefined\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"object\":\n                return this.objectMatcher.matched(left, right);\n            case \"boolean\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"number\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"string\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"function\":\n                return this.functionMatcher.matched(left, right);\n            case \"symbol\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"bigint\":\n                return this.primitiveMatcher.matched(left, right);\n        }\n    }\n}\n\n","/**\n * @hidden\n */\nexport class FunctionMatcher {\n\n    public matched<T extends (...args) => unknown>(left: T, right: T): boolean {\n        return left === right;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class TypesMatcher {\n\n    public matched(left: unknown, right: unknown): boolean {\n        return typeof left === typeof right;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class PrimitiveMatcher {\n\n    public matched<T extends (string | number | bigint | boolean | symbol)>(left: T, right: T): boolean {\n        return left === right;\n    }\n}\n\n","import { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { OBJECT_MATCHERS } from \"./object-matchers.injection-token\";\n\n/**\n * @hidden\n */\nexport class ObjectMatcher {\n\n    constructor(\n        private readonly matchers: TypeofInjectionToken<typeof OBJECT_MATCHERS>) {\n    }\n\n    public matched<T extends Record<string, unknown>>(left: T, right: T): boolean {\n        if (left === null && right === null) return true;\n        if (left === right) return true;\n        for (const matcher of this.matchers) {\n            const matched = matcher.matched(left, right);\n            if (matched === undefined) {\n                continue;\n            }\n            return matched;\n        }\n\n        return false;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class IterableTester {\n\n    public verify(left: unknown, right: unknown) {\n        return typeof left[Symbol.iterator] === \"function\" && typeof right[Symbol.iterator] === \"function\";\n    }\n}\n","import { IterableTester } from \"./iterable.tester\";\nimport { IObjectMatcher } from \"./object-matcher.type\";\nimport { Injector } from \"../static.injector/injector\";\nimport { ConstantEqualityComparer } from \"../expression.equality-comparers/constant.equality-comparer\";\n\n/**\n * Matches objects that support Iterable protocol\n */\nexport class IteratorMatcher implements IObjectMatcher {\n\n    constructor(\n        private readonly injector: Injector,\n        private readonly iterableTester: IterableTester) {\n    }\n\n    /*eslint-disable-next-line @typescript-eslint/ban-types*/\n    public matched<T extends object>(left: T, right: T): boolean {\n        if (this.iterableTester.verify(left, right) === true) {\n            const leftIterator = [...left[Symbol.iterator]()];\n            const rightIterator = [...right[Symbol.iterator]()];\n            if (leftIterator.length !== rightIterator.length) return false;\n\n            const constantMatcher = this.injector.get(ConstantEqualityComparer);\n            for (let i = 0; i < leftIterator.length; i++) {\n                const leftValue = leftIterator[i];\n                const rightValue = rightIterator[i];\n                if (constantMatcher.equals(leftValue, rightValue) === false) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return undefined;\n    }\n}\n\n","import { IObjectMatcher } from \"./object-matcher.type\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\nexport const OBJECT_MATCHERS = new InjectionToken<IObjectMatcher[]>(\"OBJECT_MATCHERS\");\n","import { ObjectMapProvider } from \"./object-map.provider\";\nimport { IObjectMatcher } from \"./object-matcher.type\";\nimport { MapMatcher } from \"./map.matcher\";\n\n/**\n * Matches objects as POJO\n */\nexport class POJOMatcher implements IObjectMatcher {\n    constructor(\n        private readonly mapMatcher: MapMatcher,\n        private readonly objectMapProvider: ObjectMapProvider) {\n    }\n\n    /*eslint-disable-next-line @typescript-eslint/ban-types*/\n    public matched<T extends object>(left: T, right: T): boolean {\n        const leftProps = this.objectMapProvider.get(left);\n        const rightProps = this.objectMapProvider.get(right);\n        return this.mapMatcher.matched(leftProps, rightProps);\n    }\n}\n","/**\n * @hidden\n */\nexport class ObjectMapProvider {\n    /*eslint-disable-next-line @typescript-eslint/ban-types*/\n    get(object: object) {\n        const props = this.getProps(object, []);\n        const keys = [...new Set<PropertyKey>(props)];\n        const map = new Map<PropertyKey, any>();\n        for (const key of keys) {\n            map.set(key, object[key]);\n        }\n\n        return map;\n    }\n\n    private getProps(object, props: PropertyKey[]): PropertyKey[] {\n        if (object === null) return props;\n        if (object === Object.prototype) return props;\n        props = [...props, ...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];\n        return this.getProps(Object.getPrototypeOf(object), props);\n    }\n}\n\n","import { IObjectMatcher } from \"./object-matcher.type\";\nimport { Injector } from \"../static.injector/injector\";\nimport { ConstantEqualityComparer } from \"../expression.equality-comparers/constant.equality-comparer\";\n\n/**\n * Matches Map objects\n */\nexport class MapMatcher implements IObjectMatcher {\n    constructor(private readonly injector: Injector) {\n    }\n\n    public matched<T = Map<unknown, unknown>>(left: T, right: T): boolean {\n        if (left instanceof Map && right instanceof Map) {\n            if (left.size !== right.size) return false;\n            const constantMatcher = this.injector.get(ConstantEqualityComparer);\n            for (const [key, value] of left) {\n                if (right.has(key) === false) return false;\n                if (constantMatcher.equals(value, right.get(key)) === false) return false;\n            }\n            return true;\n        }\n        return undefined;\n    }\n}\n\n","import { EqualMatcher } from \"./equal.matcher\";\nimport { EqualConstantMatcher } from \"./equal-constant.matcher\";\nimport { CommonTypeProvider } from \"./common-type.provider\";\nimport { TypesMatcher } from \"./types.matcher\";\nimport { PrimitiveMatcher } from \"./primitive.matcher\";\nimport { ObjectMatcher } from \"./object.matcher\";\nimport { FunctionMatcher } from \"./function.matcher\";\nimport { IterableTester } from \"./iterable.tester\";\nimport { IteratorMatcher } from \"./iterator.matcher\";\nimport { OBJECT_MATCHERS } from \"./object-matchers.injection-token\";\nimport { POJOMatcher } from \"./pojo.matcher\";\nimport { ObjectMapProvider } from \"./object-map.provider\";\nimport { MapMatcher } from \"./map.matcher\";\nimport { Injector } from \"../static.injector/injector\";\nimport { ConstantEqualityComparer } from \"../expression.equality-comparers/constant.equality-comparer\";\nimport { ItEqualityComparer } from \"../expression.equality-comparers/it.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: ConstantEqualityComparer, useExisting: EqualConstantMatcher},\n    {provide: EqualConstantMatcher, useClass: EqualConstantMatcher, deps: [ItEqualityComparer, EqualMatcher]},\n    {provide: CommonTypeProvider, useClass: CommonTypeProvider, deps: []},\n    {\n        provide: EqualMatcher,\n        useClass: EqualMatcher,\n        deps: [\n            TypesMatcher,\n            CommonTypeProvider,\n            PrimitiveMatcher,\n            ObjectMatcher,\n            FunctionMatcher\n        ]\n    },\n    {provide: FunctionMatcher, useClass: FunctionMatcher, deps: []},\n    {provide: IterableTester, useClass: IterableTester, deps: []},\n    {\n        provide: IteratorMatcher,\n        useClass: IteratorMatcher,\n        deps: [\n            Injector,\n            IterableTester\n        ]\n    },\n    {provide: ObjectMatcher, useClass: ObjectMatcher, deps: [OBJECT_MATCHERS]},\n    {provide: POJOMatcher, useClass: POJOMatcher, deps: [MapMatcher, ObjectMapProvider]},\n    {provide: PrimitiveMatcher, useClass: PrimitiveMatcher, deps: []},\n    {provide: ObjectMapProvider, useClass: ObjectMapProvider, deps: []},\n    {provide: TypesMatcher, useClass: TypesMatcher, deps: []},\n    {provide: MapMatcher, useClass: MapMatcher, deps: [Injector]},\n];\n","import { IMockOptions } from \"../moq\";\nimport equalMatchersProviders from \"../equal-matchers\";\nimport { OBJECT_MATCHERS } from \"../equal-matchers/object-matchers.injection-token\";\nimport { DateMatcher } from \"../equal-matchers/date.matcher\";\nimport { MapMatcher } from \"../equal-matchers/map.matcher\";\nimport { IteratorMatcher } from \"../equal-matchers/iterator.matcher\";\nimport { POJOMatcher } from \"../equal-matchers/pojo.matcher\";\nimport { DefaultInjectorConfig } from \"./default-injector.config\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\n\n/**\n * Provides the configuration for Angular based injector that would use equal logic for matching values.\n * By default, all values are matched with\n * [Equality comparisons and sameness](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n * that is limited in matching objects. On the other hand developers are using so called \"deep equal comparison\" approach,\n * where objects are matched by its properties and values. This configuration changes the way how expressions are matched\n * and introduce deep equal comparison logic as well as an extension point for custom matchers.\n *\n * ```typescript\n *  import { EqualMatchingInjectorConfig, Mock } from \"moq.ts\";\n *\n *  const mock = new Mock<(args: number[]) => number>()\n *  .setup(instance => instance([2, 1]))\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object([2, 1]);\n *\n *  // since the default comparisons logic sees [2, 1] and [2, 1] as different objects the provided setup would not work\n *  expect(actual).toBe(undefined);\n *  ```\n *  and compare with\n *  ```typescript\n *  import { EqualMatchingInjectorConfig, Mock } from \"moq.ts\";\n *\n *  const mock = new Mock<(args: number[]) => number>({injectorConfig: new EqualMatchingInjectorConfig()})\n *  .setup(instance => instance([2, 1]))\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object([2, 1]);\n *\n *  expect(actual).toBe(2);\n *  ```\n *  Internally the equal comparision logic implemented as a collection of object matchers that implement {@link IObjectMatcher} interface.\n *\n *  Matchers with the most specific logic should come first in the collection and if they are not able to match the objects\n *  then more general matchers would be invoked.\n *\n *  The library comes with the following matchers:\n *  0. Custom matchers\n *  1. DateMatcher - matches [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects\n *  2. MapMatcher - matches [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects\n *  3. IteratorMatcher - matches objects that supports\n *  [Iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n *  4. POJOMatcher - as the last resort matches objects as [POJO](https://en.wikipedia.org/wiki/Plain_old_Java_object) objects.\n *\n *  if you need a custom matcher it will come at index 1. Here is an example of a custom matcher that matches Moment and Date objects.\n *  ```typescript\n *  import { EqualMatchingInjectorConfig, IObjectMatcher, Mock, OBJECT_MATCHERS } from \"moq.ts\";\n *  import { isMoment, utc } from \"moment\";\n *\n *  class MomentDateMatcher implements IObjectMatcher {\n *     matched<T extends object>(left: T, right: T): boolean | undefined {\n *         if (left instanceof Date && isMoment(right)) {\n *             return left.valueOf() === right.valueOf();\n *         }\n *         return undefined;\n *     }\n * }\n *\n *  const moment = utc(1);\n *  const injectorConfig = new EqualMatchingInjectorConfig([{\n *     provide: OBJECT_MATCHERS,\n *     useClass: MomentDateMatcher,\n *     multi: true,\n *     deps: []\n * }]);\n *\n *  const mock = new Mock<(args: any) => number>({injectorConfig})\n *  .setup(instance => instance(moment))\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object(new Date(1));\n *\n *  expect(actual).toBe(2);\n *  ```\n *  The matching logic of EqualMatchingInjectorConfig supports {@link It}.\n *  So you can do a partial comparision.\n *  ```typescript\n *  import { EqualMatchingInjectorConfig, It, Mock } from \"moq.ts\";\n *\n *  const func = () => undefined;\n *\n *  const injectorConfig = new EqualMatchingInjectorConfig();\n *  const mock = new Mock<(args: any) => number>({injectorConfig})\n *  .setup(instance => instance({func: It.IsAny()})) // <-- func property will be matched with It delegate\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object({func});\n *\n *  expect(actual).toBe(2);\n *  ```\n */\nexport class EqualMatchingInjectorConfig extends DefaultInjectorConfig {\n    constructor(private matchers: StaticProvider[] = [],\n                providers: StaticProvider[] = []) {\n        super(providers);\n    }\n\n    get(options: IMockOptions<unknown>, providers: StaticProvider[]): StaticProvider[] {\n        return [\n            ...super.get(options, providers),\n            ...equalMatchersProviders,\n            ...this.matchers,\n            {provide: OBJECT_MATCHERS, useClass: DateMatcher, multi: true, deps: []},\n            {provide: OBJECT_MATCHERS, useExisting: MapMatcher, multi: true, deps: []},\n            {provide: OBJECT_MATCHERS, useExisting: IteratorMatcher, multi: true, deps: []},\n            {provide: OBJECT_MATCHERS, useExisting: POJOMatcher, multi: true, deps: []},\n        ];\n    }\n}\n","import { InjectionFactory, TypeOfInjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable, PromisedType } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { MimicsPreset } from \"../presets/mimics.preset\";\nimport { RejectedPromiseFactory } from \"../rejected-promise.factory\";\n\n/**\n * @Hidden\n */\nexport class MimicsRejectedAsyncPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>,\n                private readonly rejectedPromise: TypeOfInjectionFactory<RejectedPromiseFactory>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, value: PromisedType<TValue>) => {\n            const preset = new MimicsPreset(playable, target, this.rejectedPromise(value));\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { InjectionFactory, TypeOfInjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable, PromisedType } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { ResolvedPromiseFactory } from \"../resolved-promise.factory\";\nimport { ReturnsPreset } from \"../presets/returns.preset\";\nimport { MimicsPreset } from \"../presets/mimics.preset\";\n\n/**\n * @Hidden\n */\nexport class MimicsResolvedAsyncPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>,\n                private readonly resolvedPromise: TypeOfInjectionFactory<ResolvedPromiseFactory>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, value: PromisedType<TValue>) => {\n            const preset = new MimicsPreset(playable, target, this.resolvedPromise(value));\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { MethodReflectorTrap } from \"./traps/method.reflector-trap\";\n\nexport class MethodReflectingProxyFactory {\n    constructor(private readonly injector: Injector) {\n    }\n\n    create() {\n        const apply = this.injector.get(MethodReflectorTrap) as unknown as TypeOfInjectionFactory<MethodReflectorTrap>;\n        const options = {apply};\n        const reflector = function () {\n            return undefined;\n        };\n        return new Proxy(reflector, options);\n    }\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport const Type = Function;\n\n/**\n * @description\n *\n * Represents an abstract class `T`, if applied to a concrete class it would stop being\n * instantiatable.\n *\n * @publicApi\n */\nexport interface AbstractType<T> extends Function {\n    prototype: T;\n}\n\nexport type Type<T> = new(...args: any[]) => T;\n","/*\n * Public API Surface of moq.ts\n*/\nexport * from \"./lib/dump\";\nexport * from \"./lib/mock\";\nexport * from \"./lib/moq\";\nexport * from \"./lib/times\";\nexport * from \"./lib/auto-mocking/auto-mock-injector.config\";\nexport * from \"./lib/auto-mocking/auto-mock-options.builder\";\nexport * from \"./lib/auto-mocking/auto-mock.factory\";\nexport * from \"./lib/auto-mocking/auto-mock.provider\";\nexport * from \"./lib/auto-mocking/auto-mock.storage\";\nexport * from \"./lib/auto-mocking/index\";\nexport * from \"./lib/auto-mocking/root-mock.provider\";\nexport * from \"./lib/auto-mocking/expression.guards/complex-expression.guard\";\nexport * from \"./lib/auto-mocking/expression.guards/complex-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/expression-guard-exception.factory\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/function-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/get-property-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/in-operator-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/index\";\nexport * from \"./lib/auto-mocking/expression.guards/instance-method-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/new-operator-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/set-property-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.formatters/complex-expression.error-formatter\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.formatters/expression.formatter\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.formatters/index\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.formatters/string.error-styler\";\nexport * from \"./lib/auto-mocking/name-formatters/auto-mock-name.formatter\";\nexport * from \"./lib/auto-mocking/name-formatters/name-prefix.provider\";\nexport * from \"./lib/core/index\";\nexport * from \"./lib/core/mock-core\";\nexport * from \"./lib/equal-matchers/common-type.provider\";\nexport * from \"./lib/equal-matchers/date.matcher\";\nexport * from \"./lib/equal-matchers/equal-constant.matcher\";\nexport * from \"./lib/equal-matchers/equal.matcher\";\nexport * from \"./lib/equal-matchers/function.matcher\";\nexport * from \"./lib/equal-matchers/index\";\nexport * from \"./lib/equal-matchers/iterable.tester\";\nexport * from \"./lib/equal-matchers/iterator.matcher\";\nexport * from \"./lib/equal-matchers/map.matcher\";\nexport * from \"./lib/equal-matchers/object-map.provider\";\nexport * from \"./lib/equal-matchers/object-matcher.type\";\nexport * from \"./lib/equal-matchers/object-matchers.injection-token\";\nexport * from \"./lib/equal-matchers/object.matcher\";\nexport * from \"./lib/equal-matchers/pojo.matcher\";\nexport * from \"./lib/equal-matchers/primitive.matcher\";\nexport * from \"./lib/equal-matchers/types.matcher\";\nexport * from \"./lib/explorers/index\";\nexport * from \"./lib/explorers/reflect-has.injection-token\";\nexport * from \"./lib/explorers/has-method.explorer/expression.has-method.explorer\";\nexport * from \"./lib/explorers/has-method.explorer/has-method.explorer\";\nexport * from \"./lib/explorers/has-method.explorer/object.has-method.explorer\";\nexport * from \"./lib/explorers/has-method.explorer/preset.has-method.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/expression-has-property.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/has-property.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/object-has-property.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/preset-has-property.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/property-is-read-only.tester\";\nexport * from \"./lib/explorers/in-operator-interaction.explorer/in-operator-interaction.explorer\";\nexport * from \"./lib/explorers/in-operator-interaction.explorer/preset.has-in-operator.explorer\";\nexport * from \"./lib/explorers/members.explorer/members-method.explorer\";\nexport * from \"./lib/explorers/members.explorer/members-property.explorer\";\nexport * from \"./lib/explorers/members.explorer/property-descriptor.provider\";\nexport * from \"./lib/expression.equality-comparers/arguments.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/constant.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/expression.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/get-property.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/in-operator.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/index\";\nexport * from \"./lib/expression.equality-comparers/instance-method.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/it.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/method.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/new-operator.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/set-property.equality-comparer\";\nexport * from \"./lib/formatters/constant.formatter\";\nexport * from \"./lib/formatters/expressions.formatter\";\nexport * from \"./lib/formatters/function.formatter\";\nexport * from \"./lib/formatters/get-property.formatter\";\nexport * from \"./lib/formatters/in-operator.formatter\";\nexport * from \"./lib/formatters/index\";\nexport * from \"./lib/formatters/interaction.formatter\";\nexport * from \"./lib/formatters/method.formatter\";\nexport * from \"./lib/formatters/new-operator.formatter\";\nexport * from \"./lib/formatters/property-key.formatter\";\nexport * from \"./lib/formatters/set-property.formatter\";\nexport * from \"./lib/formatters/tracked-expressions.formatter\";\nexport * from \"./lib/formatters/verify.formatter\";\nexport * from \"./lib/injector/default-injector.config\";\nexport * from \"./lib/injector/equal-matching-injector.config\";\nexport * from \"./lib/injector/injection-factory\";\nexport * from \"./lib/injector/injector.factory\";\nexport * from \"./lib/injector/mock-constructor.injection-token\";\nexport * from \"./lib/injector/mock.injection-token\";\nexport * from \"./lib/injector/root-mock.injection-token\";\nexport * from \"./lib/injector/typeof-injection-token\";\nexport * from \"./lib/interaction-players/callback-preset.player\";\nexport * from \"./lib/interaction-players/index\";\nexport * from \"./lib/interaction-players/interaction.player\";\nexport * from \"./lib/interaction-players/mimics-preset.player\";\nexport * from \"./lib/interaction-players/playable-preset.provider\";\nexport * from \"./lib/interaction-players/preset.player\";\nexport * from \"./lib/interaction-players/reflect-apply.injection-token\";\nexport * from \"./lib/interceptors/apply.trap\";\nexport * from \"./lib/interceptors/construct.trap\";\nexport * from \"./lib/interceptors/get-prototype-of.trap\";\nexport * from \"./lib/interceptors/get.trap\";\nexport * from \"./lib/interceptors/has.trap\";\nexport * from \"./lib/interceptors/index\";\nexport * from \"./lib/interceptors/properties-value.storage\";\nexport * from \"./lib/interceptors/prototype.storage\";\nexport * from \"./lib/interceptors/proxy.factory\";\nexport * from \"./lib/interceptors/set-prototype-of.trap\";\nexport * from \"./lib/interceptors/set.trap\";\nexport * from \"./lib/interceptors/spy-function.provider\";\nexport * from \"./lib/mock-options/mock-options.builder\";\nexport * from \"./lib/mock-options/mock-options.injection-token\";\nexport * from \"./lib/mock-options/mock-options.providers\";\nexport * from \"./lib/playables/index\";\nexport * from \"./lib/playables/play-times\";\nexport * from \"./lib/playables/playable-always\";\nexport * from \"./lib/playables/playable-exactly\";\nexport * from \"./lib/playables/playable-never\";\nexport * from \"./lib/playables/playable-once\";\nexport * from \"./lib/playables/playable-sequence\";\nexport * from \"./lib/playables/preset-playables.updater\";\nexport * from \"./lib/presets/index\";\nexport * from \"./lib/presets/preset-builder.factory\";\nexport * from \"./lib/presets/preset-builder\";\nexport * from \"./lib/presets/presets\";\nexport * from \"./lib/presets/rejected-promise.factory\";\nexport * from \"./lib/presets/resolved-promise.factory\";\nexport * from \"./lib/presets/setup.factory\";\nexport * from \"./lib/presets/factories/callback-preset.factory\";\nexport * from \"./lib/presets/factories/mimics-preset.factory\";\nexport * from \"./lib/presets/factories/mimics-rejected-async-preset.factory\";\nexport * from \"./lib/presets/factories/mimics-resolved-async-preset.factory\";\nexport * from \"./lib/presets/factories/returns-async-preset.factory\";\nexport * from \"./lib/presets/factories/returns-preset.factory\";\nexport * from \"./lib/presets/factories/throws-async-preset.factory\";\nexport * from \"./lib/presets/factories/throws-preset.factory\";\nexport * from \"./lib/presets/presets/callbacks.preset\";\nexport * from \"./lib/presets/presets/mimics.preset\";\nexport * from \"./lib/presets/presets/preset\";\nexport * from \"./lib/presets/presets/returns.preset\";\nexport * from \"./lib/presets/presets/throws.preset\";\nexport * from \"./lib/reflector/async-expression.detector\";\nexport * from \"./lib/reflector/async-expression.reflector\";\nexport * from \"./lib/reflector/async-reflecting-proxy.injector-factory\";\nexport * from \"./lib/reflector/composite-expression.reflector\";\nexport * from \"./lib/reflector/expression-predicates\";\nexport * from \"./lib/reflector/expression-reflector\";\nexport * from \"./lib/reflector/expressions\";\nexport * from \"./lib/reflector/index\";\nexport * from \"./lib/reflector/method-only-reflecting-proxy.factory\";\nexport * from \"./lib/reflector/method-reflecting-proxy.factory\";\nexport * from \"./lib/reflector/reflecting-proxy.factory\";\nexport * from \"./lib/reflector/reflecting-proxy.injector-factory\";\nexport * from \"./lib/reflector/sync-expression.reflector\";\nexport * from \"./lib/reflector/traps/apply.reflector-trap\";\nexport * from \"./lib/reflector/traps/construct.reflector-trap\";\nexport * from \"./lib/reflector/traps/get.reflector-trap\";\nexport * from \"./lib/reflector/traps/has.reflector-trap\";\nexport * from \"./lib/reflector/traps/method.reflector-trap\";\nexport * from \"./lib/reflector/traps/set.reflector-trap\";\nexport * from \"./lib/static.injector/forward_ref\";\nexport * from \"./lib/static.injector/injection_token\";\nexport * from \"./lib/static.injector/injector\";\nexport * from \"./lib/static.injector/injector_compatibility\";\nexport * from \"./lib/static.injector/metadata\";\nexport * from \"./lib/static.injector/property\";\nexport * from \"./lib/static.injector/stringify\";\nexport * from \"./lib/static.injector/type\";\nexport * from \"./lib/static.injector/interface/injector\";\nexport * from \"./lib/static.injector/interface/provider\";\nexport * from \"./lib/tracker/index\";\nexport * from \"./lib/tracker/sequence-id\";\nexport * from \"./lib/tracker/tracker\";\nexport * from \"./lib/verification/call-counter\";\nexport * from \"./lib/verification/index\";\nexport * from \"./lib/verification/verification-tester\";\nexport * from \"./lib/verification/verifier\";\nexport * from \"./lib/verification/verify-error\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["__awaiter","Range","ɵ0","InjectFlags"],"mappings":"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"}