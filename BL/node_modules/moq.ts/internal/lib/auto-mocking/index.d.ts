import { AutoMockFactory } from "./auto-mock.factory";
import { RootMockProvider } from "./root-mock.provider";
import { Optional } from "../static.injector/metadata";
import { AutoMockedStorage } from "./auto-mock.storage";
import { AutoMockProvider } from "./auto-mock.provider";
import { AutoMockOptionsBuilder } from "./auto-mock-options.builder";
import { AutoMockNameFormatter } from "./name-formatters/auto-mock-name.formatter";
import { AutoMockInjectorConfig } from "./auto-mock-injector.config";
import { NamePrefixProvider } from "./name-formatters/name-prefix.provider";
import { FunctionFormatter } from "../formatters/function.formatter";
import { MethodFormatter } from "../formatters/method.formatter";
import { ConstantFormatter } from "../formatters/constant.formatter";
import { ExpressionEqualityComparer } from "../expression.equality-comparers/expression.equality-comparer";
import { ComplexExpressionValidator } from "./expression.guards/complex-expression.validator";
declare const _default: ({
    provide: typeof import("./expression.guards/expression.formatters/complex-expression.error-formatter").ComplexExpressionErrorFormatter;
    useClass: typeof import("./expression.guards/expression.formatters/complex-expression.error-formatter").ComplexExpressionErrorFormatter;
    deps: (import("../static.injector/injection_token").InjectionToken<import("../moq").IMockOptions<any>> | typeof NamePrefixProvider | typeof import("./expression.guards/expression.formatters/expression.formatter").ExpressionFormatter | typeof import("./expression.guards/expression.formatters/string.error-styler").StringErrorStyler)[];
} | {
    provide: typeof import("./expression.guards/expression.formatters/expression.formatter").ExpressionFormatter;
    useClass: typeof import("./expression.guards/expression.formatters/expression.formatter").ExpressionFormatter;
    deps: (typeof ConstantFormatter | typeof FunctionFormatter | typeof MethodFormatter)[];
} | {
    provide: typeof import("./expression.guards/expression.formatters/string.error-styler").StringErrorStyler;
    useClass: typeof import("./expression.guards/expression.formatters/string.error-styler").StringErrorStyler;
    deps: any[];
} | {
    provide: typeof import("./expression.guards/complex-expression.guard").ComplexExpressionGuard;
    useClass: typeof import("./expression.guards/complex-expression.guard").ComplexExpressionGuard;
    deps: (typeof ComplexExpressionValidator | typeof import("./expression.guards/expression-guard-exception.factory").ExpressionGuardExceptionFactory)[];
} | {
    provide: typeof ComplexExpressionValidator;
    useClass: typeof ComplexExpressionValidator;
    deps: typeof import("./expression.guards/expression.validator").ExpressionValidator[];
} | {
    provide: typeof import("./expression.guards/expression-guard-exception.factory").ExpressionGuardExceptionFactory;
    useClass: typeof import("./expression.guards/expression-guard-exception.factory").ExpressionGuardExceptionFactory;
    deps: typeof import("./expression.guards/expression.formatters/complex-expression.error-formatter").ComplexExpressionErrorFormatter[];
} | {
    provide: typeof import("./expression.guards/expression.validator").ExpressionValidator;
    useClass: typeof import("./expression.guards/expression.validator").ExpressionValidator;
    deps: typeof import("./expression.guards/function-expression.validator").FunctionExpressionValidator[];
} | {
    provide: typeof import("./expression.guards/function-expression.validator").FunctionExpressionValidator;
    useClass: typeof import("./expression.guards/function-expression.validator").FunctionExpressionValidator;
    deps: any[];
} | {
    provide: typeof NamePrefixProvider;
    useClass: typeof NamePrefixProvider;
    deps: any[];
} | {
    provide: typeof AutoMockedStorage;
    useClass: typeof AutoMockedStorage;
    deps: any[];
} | {
    provide: typeof AutoMockNameFormatter;
    useClass: typeof AutoMockNameFormatter;
    deps: (typeof ConstantFormatter | typeof FunctionFormatter | typeof MethodFormatter | typeof NamePrefixProvider)[];
} | {
    provide: typeof AutoMockOptionsBuilder;
    useClass: typeof AutoMockOptionsBuilder;
    deps: (import("../static.injector/injection_token").InjectionToken<import("../moq").IMockOptions<any>> | typeof AutoMockNameFormatter | typeof AutoMockInjectorConfig)[];
} | {
    provide: typeof AutoMockInjectorConfig;
    useClass: typeof AutoMockInjectorConfig;
    deps: (import("../static.injector/injection_token").InjectionToken<import("../moq").IMockOptions<any>> | (import("../static.injector/injection_token").InjectionToken<import("../moq").IMock<unknown>> | Optional)[])[];
} | {
    provide: typeof AutoMockFactory;
    useClass: typeof AutoMockFactory;
    deps: (typeof AutoMockOptionsBuilder | import("../static.injector/injection_token").InjectionToken<(opts: import("../moq").IMockOptions<unknown>) => import("../moq").IMock<unknown>>)[];
} | {
    provide: typeof RootMockProvider;
    useClass: typeof RootMockProvider;
    deps: (import("../static.injector/injection_token").InjectionToken<import("../moq").IMock<unknown>> | (import("../static.injector/injection_token").InjectionToken<import("../moq").IMock<unknown>> | Optional)[])[];
} | {
    provide: typeof AutoMockProvider;
    useClass: typeof AutoMockProvider;
    deps: (typeof AutoMockFactory | typeof AutoMockedStorage | typeof ExpressionEqualityComparer)[];
})[];
/**
 * @hidden
 */
export default _default;
