import { Expressions } from "../../reflector/expressions";
import { FunctionExpressionValidator } from "./function-expression.validator";
import { GetPropertyExpressionValidator } from "./get-property-expression.validator";
import { SetPropertyExpressionValidator } from "./set-property-expression.validator";
import { InstanceMethodExpressionValidator } from "./instance-method-expression.validator";
import { NewOperatorExpressionValidator } from "./new-operator-expression.validator";
import { InOperatorExpressionValidator } from "./in-operator-expression.validator";
export declare class ExpressionValidator {
    private readonly functionExpressionGuard;
    private readonly getPropertyExpressionGuard;
    private readonly setPropertyExpressionGuard;
    private readonly inOperatorExpressionGuard;
    private readonly instanceMethodExpressionGuard;
    private readonly newOperatorExpressionGuard;
    constructor(functionExpressionGuard: FunctionExpressionValidator, getPropertyExpressionGuard: GetPropertyExpressionValidator, setPropertyExpressionGuard: SetPropertyExpressionValidator, inOperatorExpressionGuard: InOperatorExpressionValidator, instanceMethodExpressionGuard: InstanceMethodExpressionValidator, newOperatorExpressionGuard: NewOperatorExpressionValidator);
    validate(expression: Expressions<unknown>): boolean;
}
