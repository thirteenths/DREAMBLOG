/**
 * Sets the rules where bounds of a range are included or excluded from the range.
 * See {@link Times.Between}
 */
export declare enum Range {
    Exclusive = 0,
    Inclusive = 1
}
/**
 * This class expresses the expectation about amount of invocations.
 *
 * @example
 * ```typescript
 *
 * const times = new Times(expected => expected === 1, `Should be called once`);
 * const actual = times.test(2);
 *
 * expect(actual).toBe(false);
 * expect(times.message).toBe(`Should be called once`);
 * ```
 *
 * ```typescript
 *
 * const mockName = 'mock name';
 *const mock = new Mock<ITestObject>(mockName);
 *const object = mock.object();
 *
 *object.property;
 *
 *const action = () => mock.verify(instance => instance.property, Times.AtLeast(2));
 *
 *expect(action).toThrow();
 * ```
 */
export declare class Times {
    private evaluator;
    message: string;
    private static _once;
    private static _never;
    private static _atMostOnce;
    private static _atLeastOnce;
    /**
     *
     * @param evaluator It takes actual value and decides if it is expected or not.
     * Returns true or false accordingly.
     * @param message A message that describes the expectation.
     */
    constructor(evaluator: (callCount: number) => boolean, message: string);
    /**
     * It expects that the actual would be equal or bigger then the expected value.
     *
     * @param callCount The expected value.
     */
    static AtLeast(callCount: number): Times;
    /**
     * It expects that the actual would be equal or bigger then 1.
     */
    static AtLeastOnce(): Times;
    /**
     * It expects that the actual would be equal or smaller then the expected value.
     *
     * @param callCount The expected value.
     */
    static AtMost(callCount: number): Times;
    /**
     * It expects that the actual would be equal or less then 1.
     */
    static AtMostOnce(): Times;
    /**
     * It expects that the actual would be in the expected range of values.
     *
     * @param callCountFrom The lowest bound of the range.
     * @param callCountTo The highest bound of the range.
     * @param range  Sets the rules where bounds of a range are included or excluded from the range.
     */
    static Between(callCountFrom: number, callCountTo: number, range: Range): Times;
    /**
     * It expects that the actual is equal to the expected value.
     *
     * @param callCount The expected value.
     */
    static Exactly(callCount: number): Times;
    /**
     * It expects that the actual is equal 0.
     */
    static Never(): Times;
    /**
     * It expects that the actual is equal 1.
     */
    static Once(): Times;
    /**
     * Evaluates the expectation against the actual value.
     *
     * @param callCount The actual value.
     */
    test(callCount: number): boolean;
}
