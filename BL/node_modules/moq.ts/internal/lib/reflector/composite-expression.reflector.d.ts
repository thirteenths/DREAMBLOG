import { Expressions } from "./expressions";
import { ExpressionReflector, IExpression } from "./expression-reflector";
import { AsyncExpressionDetector } from "./async-expression.detector";
import { AsyncExpressionReflector } from "./async-expression.reflector";
import { SyncExpressionReflector } from "./sync-expression.reflector";
/**
 * This class reflects an expression to an expression tree representation.
 * async/await expressions are reflected in shellow mode.
 *
 * For more examples check
 * [unit tests for this class]
 * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/full.expression-reflector.spec.ts)
 */
export declare class CompositeExpressionReflector implements ExpressionReflector {
    private readonly asyncExpressionDetector;
    private readonly syncExpressionReflector;
    private readonly asyncExpressionReflector;
    constructor(asyncExpressionDetector: AsyncExpressionDetector, syncExpressionReflector: SyncExpressionReflector, asyncExpressionReflector: AsyncExpressionReflector);
    /**
     * Reflects the provided code as an expression tree.
     */
    reflect<T>(expression: IExpression<T>): Expressions<T>[];
}
