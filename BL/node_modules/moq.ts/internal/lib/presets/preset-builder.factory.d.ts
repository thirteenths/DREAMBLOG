import { Expressions } from "../reflector/expressions";
import { PresetBuilder } from "./preset-builder";
import { InjectionFactory, TypeOfInjectionFactory } from "../injector/injection-factory";
import { ReturnsPresetFactory } from "./factories/returns-preset.factory";
import { ThrowsPresetFactory } from "./factories/throws-preset.factory";
import { MimicsPresetFactory } from "./factories/mimics-preset.factory";
import { CallbackPresetFactory } from "./factories/callback-preset.factory";
import { ReturnsAsyncPresetFactory } from "./factories/returns-async-preset.factory";
import { ThrowsAsyncPresetFactory } from "./factories/throws-async-preset.factory";
/**
 * @hidden
 */
export declare class PresetBuilderFactory<T> implements InjectionFactory {
    private readonly returnsPresetFactory;
    private readonly throwsPresetFactory;
    private readonly mimicsPresetFactory;
    private readonly callbackPresetFactory;
    private readonly returnsAsyncPresetFactory;
    private readonly throwsAsyncPresetFactory;
    constructor(returnsPresetFactory: TypeOfInjectionFactory<ReturnsPresetFactory<T>>, throwsPresetFactory: TypeOfInjectionFactory<ThrowsPresetFactory<T>>, mimicsPresetFactory: TypeOfInjectionFactory<MimicsPresetFactory<T>>, callbackPresetFactory: TypeOfInjectionFactory<CallbackPresetFactory<T>>, returnsAsyncPresetFactory: TypeOfInjectionFactory<ReturnsAsyncPresetFactory<T>>, throwsAsyncPresetFactory: TypeOfInjectionFactory<ThrowsAsyncPresetFactory<T>>);
    factory(): (target: Expressions<T>) => PresetBuilder<T, any>;
}
