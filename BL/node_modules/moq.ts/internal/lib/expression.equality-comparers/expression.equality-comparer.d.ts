import { GetPropertyEqualityComparer } from "./get-property.equality-comparer";
import { SetPropertyEqualityComparer } from "./set-property.equality-comparer";
import { MethodEqualityComparer } from "./method.equality-comparer";
import { InstanceMethodEqualityComparer } from "./instance-method.equality-comparer";
import { Expressions } from "../reflector/expressions";
import { InOperatorEqualityComparer } from "./in-operator.equality-comparer";
import { NewOperatorEqualityComparer } from "./new-operator.equality-comparer";
import { ItEqualityComparer } from "./it.equality-comparer";
/**
 * @hidden
 */
export declare class ExpressionEqualityComparer {
    private readonly getPropertyExpressionMatcher;
    private readonly setPropertyExpressionMatcher;
    private readonly methodExpressionMatcher;
    private readonly namedMethodExpressionMatcher;
    private readonly inOperatorExpressionMatcher;
    private readonly newOperatorExpressionMatcher;
    private readonly itEqualityComparer;
    constructor(getPropertyExpressionMatcher: GetPropertyEqualityComparer, setPropertyExpressionMatcher: SetPropertyEqualityComparer, methodExpressionMatcher: MethodEqualityComparer, namedMethodExpressionMatcher: InstanceMethodEqualityComparer, inOperatorExpressionMatcher: InOperatorEqualityComparer, newOperatorExpressionMatcher: NewOperatorEqualityComparer, itEqualityComparer: ItEqualityComparer);
    equals<T>(left: Expressions<T>, right: Expressions<T>): boolean;
}
