import { ConstantEqualityComparer } from "./constant.equality-comparer";
import { ArgumentsEqualityComparer } from "./arguments.equality-comparer";
import { GetPropertyEqualityComparer } from "./get-property.equality-comparer";
import { InstanceMethodEqualityComparer } from "./instance-method.equality-comparer";
import { ItEqualityComparer } from "./it.equality-comparer";
import { MethodEqualityComparer } from "./method.equality-comparer";
import { NewOperatorEqualityComparer } from "./new-operator.equality-comparer";
import { SetPropertyEqualityComparer } from "./set-property.equality-comparer";
import { ExpressionEqualityComparer } from "./expression.equality-comparer";
declare const _default: ({
    provide: typeof ConstantEqualityComparer;
    useClass: typeof ConstantEqualityComparer;
    deps: (typeof ItEqualityComparer)[];
} | {
    provide: typeof ArgumentsEqualityComparer;
    useClass: typeof ArgumentsEqualityComparer;
    deps: (typeof ConstantEqualityComparer)[];
} | {
    provide: typeof GetPropertyEqualityComparer;
    useClass: typeof GetPropertyEqualityComparer;
    deps: any[];
} | {
    provide: typeof InstanceMethodEqualityComparer;
    useClass: typeof InstanceMethodEqualityComparer;
    deps: (typeof ArgumentsEqualityComparer)[];
} | {
    provide: typeof MethodEqualityComparer;
    useClass: typeof MethodEqualityComparer;
    deps: (typeof ArgumentsEqualityComparer)[];
} | {
    provide: typeof NewOperatorEqualityComparer;
    useClass: typeof NewOperatorEqualityComparer;
    deps: (typeof ArgumentsEqualityComparer)[];
} | {
    provide: typeof SetPropertyEqualityComparer;
    useClass: typeof SetPropertyEqualityComparer;
    deps: (typeof ConstantEqualityComparer)[];
} | {
    provide: typeof ExpressionEqualityComparer;
    useClass: typeof ExpressionEqualityComparer;
    deps: (typeof GetPropertyEqualityComparer | typeof SetPropertyEqualityComparer | typeof MethodEqualityComparer | typeof InstanceMethodEqualityComparer | typeof NewOperatorEqualityComparer)[];
})[];
/**
 * @hidden
 */
export default _default;
