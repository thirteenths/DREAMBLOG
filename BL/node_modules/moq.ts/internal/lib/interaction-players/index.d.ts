import { PresetPlayer } from "./preset.player";
import { CallbackPresetPlayer } from "./callback-preset.player";
import { MimicsPresetPlayer } from "./mimics-preset.player";
import { PlayablePresetProvider } from "./playable-preset.provider";
import { Presets } from "../presets/presets";
import { InteractionPlayer } from "./interaction.player";
import { PresetPlayablesUpdater } from "../playables/preset-playables.updater";
import { ExpressionEqualityComparer } from "../expression.equality-comparers/expression.equality-comparer";
declare const _default: ({
    provide: import("../static.injector/injection_token").InjectionToken<typeof Reflect.apply>;
    useValue: typeof Reflect.apply;
    deps: any[];
    useClass?: undefined;
} | {
    provide: typeof PresetPlayer;
    useClass: typeof PresetPlayer;
    deps: (typeof CallbackPresetPlayer | typeof MimicsPresetPlayer)[];
    useValue?: undefined;
} | {
    provide: typeof PlayablePresetProvider;
    useClass: typeof PlayablePresetProvider;
    deps: (typeof ExpressionEqualityComparer | typeof Presets)[];
    useValue?: undefined;
} | {
    provide: typeof MimicsPresetPlayer;
    useClass: typeof MimicsPresetPlayer;
    deps: import("../static.injector/injection_token").InjectionToken<typeof Reflect.apply>[];
    useValue?: undefined;
} | {
    provide: typeof InteractionPlayer;
    useClass: typeof InteractionPlayer;
    deps: (typeof PlayablePresetProvider | typeof PresetPlayer | typeof PresetPlayablesUpdater)[];
    useValue?: undefined;
} | {
    provide: typeof CallbackPresetPlayer;
    useClass: typeof CallbackPresetPlayer;
    deps: any[];
    useValue?: undefined;
})[];
/**
 * @hidden
 */
export default _default;
