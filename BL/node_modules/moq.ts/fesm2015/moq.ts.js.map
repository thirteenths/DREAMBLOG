{"version":3,"file":"moq.ts.js","sources":["../../../projects/moq/src/lib/formatters/tracked-expressions.formatter.ts","../../../projects/moq/src/lib/dump.ts","../../../projects/moq/src/lib/times.ts","../../../projects/moq/src/lib/static.injector/stringify.ts","../../../projects/moq/src/lib/static.injector/property.ts","../../../projects/moq/src/lib/static.injector/forward_ref.ts","../../../projects/moq/src/lib/static.injector/injection_token.ts","../../../projects/moq/src/lib/static.injector/injector_compatibility.ts","../../../projects/moq/src/lib/static.injector/interface/injector.ts","../../../projects/moq/src/lib/static.injector/metadata.ts","../../../projects/moq/src/lib/static.injector/injector.ts","../../../projects/moq/src/lib/injector/injector.factory.ts","../../../projects/moq/src/lib/injector/mock.injection-token.ts","../../../projects/moq/src/lib/tracker/sequence-id.ts","../../../projects/moq/src/lib/tracker/tracker.ts","../../../projects/moq/src/lib/tracker/index.ts","../../../projects/moq/src/lib/reflector/expression-reflector.ts","../../../projects/moq/src/lib/reflector/expressions.ts","../../../projects/moq/src/lib/reflector/traps/get.reflector-trap.ts","../../../projects/moq/src/lib/reflector/traps/set.reflector-trap.ts","../../../projects/moq/src/lib/reflector/traps/apply.reflector-trap.ts","../../../projects/moq/src/lib/reflector/traps/has.reflector-trap.ts","../../../projects/moq/src/lib/reflector/traps/construct.reflector-trap.ts","../../../projects/moq/src/lib/reflector/reflecting-proxy.factory.ts","../../../projects/moq/src/lib/reflector/reflecting-proxy.injector-factory.ts","../../../projects/moq/src/lib/reflector/expression-predicates.ts","../../../projects/moq/src/lib/reflector/sync-expression.reflector.ts","../../../projects/moq/src/lib/reflector/composite-expression.reflector.ts","../../../projects/moq/src/lib/reflector/async-expression.detector.ts","../../../projects/moq/src/lib/reflector/async-expression.reflector.ts","../../../projects/moq/src/lib/reflector/traps/method.reflector-trap.ts","../../../projects/moq/src/lib/reflector/method-only-reflecting-proxy.factory.ts","../../../projects/moq/src/lib/reflector/async-reflecting-proxy.injector-factory.ts","../../../projects/moq/src/lib/reflector/index.ts","../../../projects/moq/src/lib/presets/presets.ts","../../../projects/moq/src/lib/playables/playable-exactly.ts","../../../projects/moq/src/lib/playables/playable-never.ts","../../../projects/moq/src/lib/playables/playable-once.ts","../../../projects/moq/src/lib/playables/playable-always.ts","../../../projects/moq/src/lib/playables/playable-sequence.ts","../../../projects/moq/src/lib/playables/play-times.ts","../../../projects/moq/src/lib/presets/preset-builder.ts","../../../projects/moq/src/lib/presets/preset-builder.factory.ts","../../../projects/moq/src/lib/presets/setup.factory.ts","../../../projects/moq/src/lib/auto-mocking/root-mock.provider.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock.provider.ts","../../../projects/moq/src/lib/presets/presets/callbacks.preset.ts","../../../projects/moq/src/lib/presets/factories/callback-preset.factory.ts","../../../projects/moq/src/lib/presets/presets/mimics.preset.ts","../../../projects/moq/src/lib/presets/factories/mimics-preset.factory.ts","../../../projects/moq/src/lib/presets/presets/returns.preset.ts","../../../projects/moq/src/lib/presets/factories/returns-async-preset.factory.ts","../../../projects/moq/src/lib/presets/factories/returns-preset.factory.ts","../../../projects/moq/src/lib/presets/factories/throws-async-preset.factory.ts","../../../projects/moq/src/lib/presets/presets/throws.preset.ts","../../../projects/moq/src/lib/presets/factories/throws-preset.factory.ts","../../../projects/moq/src/lib/presets/resolved-promise.factory.ts","../../../projects/moq/src/lib/presets/rejected-promise.factory.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/complex-expression.guard.ts","../../../projects/moq/src/lib/presets/index.ts","../../../projects/moq/src/lib/verification/verifier.ts","../../../projects/moq/src/lib/verification/call-counter.ts","../../../projects/moq/src/lib/formatters/verify.formatter.ts","../../../projects/moq/src/lib/verification/verify-error.ts","../../../projects/moq/src/lib/verification/verification-tester.ts","../../../projects/moq/src/lib/expression.equality-comparers/expression.equality-comparer.ts","../../../projects/moq/src/lib/verification/index.ts","../../../projects/moq/src/lib/interceptors/apply.trap.ts","../../../projects/moq/src/lib/interaction-players/interaction.player.ts","../../../projects/moq/src/lib/moq.ts","../../../projects/moq/src/lib/interceptors/get.trap.ts","../../../projects/moq/src/lib/interceptors/properties-value.storage.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/has-property.explorer.ts","../../../projects/moq/src/lib/explorers/has-method.explorer/has-method.explorer.ts","../../../projects/moq/src/lib/interceptors/spy-function.provider.ts","../../../projects/moq/src/lib/interceptors/get-prototype-of.trap.ts","../../../projects/moq/src/lib/interceptors/prototype.storage.ts","../../../projects/moq/src/lib/interceptors/has.trap.ts","../../../projects/moq/src/lib/explorers/in-operator-interaction.explorer/in-operator-interaction.explorer.ts","../../../projects/moq/src/lib/playables/preset-playables.updater.ts","../../../projects/moq/src/lib/interceptors/set.trap.ts","../../../projects/moq/src/lib/interceptors/set-prototype-of.trap.ts","../../../projects/moq/src/lib/interceptors/proxy.factory.ts","../../../projects/moq/src/lib/mock-options/mock-options.injection-token.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/property-is-read-only.tester.ts","../../../projects/moq/src/lib/interceptors/construct.trap.ts","../../../projects/moq/src/lib/interceptors/index.ts","../../../projects/moq/src/lib/playables/index.ts","../../../projects/moq/src/lib/interaction-players/preset.player.ts","../../../projects/moq/src/lib/interaction-players/callback-preset.player.ts","../../../projects/moq/src/lib/interaction-players/mimics-preset.player.ts","../../../projects/moq/src/lib/interaction-players/playable-preset.provider.ts","../../../projects/moq/src/lib/interaction-players/reflect-apply.injection-token.ts","../../../projects/moq/src/lib/interaction-players/index.ts","../../../projects/moq/src/lib/formatters/expressions.formatter.ts","../../../projects/moq/src/lib/formatters/interaction.formatter.ts","../../../projects/moq/src/lib/formatters/set-property.formatter.ts","../../../projects/moq/src/lib/formatters/constant.formatter.ts","../../../projects/moq/src/lib/formatters/property-key.formatter.ts","../../../projects/moq/src/lib/formatters/method.formatter.ts","../../../projects/moq/src/lib/formatters/function.formatter.ts","../../../projects/moq/src/lib/formatters/in-operator.formatter.ts","../../../projects/moq/src/lib/formatters/get-property.formatter.ts","../../../projects/moq/src/lib/formatters/new-operator.formatter.ts","../../../projects/moq/src/lib/formatters/index.ts","../../../projects/moq/src/lib/explorers/has-method.explorer/expression.has-method.explorer.ts","../../../projects/moq/src/lib/explorers/members.explorer/members-method.explorer.ts","../../../projects/moq/src/lib/explorers/has-method.explorer/preset.has-method.explorer.ts","../../../projects/moq/src/lib/explorers/has-method.explorer/object.has-method.explorer.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/expression-has-property.explorer.ts","../../../projects/moq/src/lib/explorers/members.explorer/members-property.explorer.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/preset-has-property.explorer.ts","../../../projects/moq/src/lib/explorers/has-property.explorer/object-has-property.explorer.ts","../../../projects/moq/src/lib/explorers/in-operator-interaction.explorer/preset.has-in-operator.explorer.ts","../../../projects/moq/src/lib/explorers/members.explorer/property-descriptor.provider.ts","../../../projects/moq/src/lib/explorers/reflect-has.injection-token.ts","../../../projects/moq/src/lib/explorers/index.ts","../../../projects/moq/src/lib/mock-options/mock-options.builder.ts","../../../projects/moq/src/lib/mock-options/mock-options.providers.ts","../../../projects/moq/src/lib/core/mock-core.ts","../../../projects/moq/src/lib/core/index.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock.factory.ts","../../../projects/moq/src/lib/injector/root-mock.injection-token.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock.storage.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock-options.builder.ts","../../../projects/moq/src/lib/auto-mocking/name-formatters/auto-mock-name.formatter.ts","../../../projects/moq/src/lib/auto-mocking/auto-mock-injector.config.ts","../../../projects/moq/src/lib/auto-mocking/name-formatters/name-prefix.provider.ts","../../../projects/moq/src/lib/injector/mock-constructor.injection-token.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/complex-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression-guard-exception.factory.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/function-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/get-property-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/set-property-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/in-operator-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/instance-method-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/new-operator-expression.validator.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.formatters/complex-expression.error-formatter.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.formatters/expression.formatter.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.formatters/string.error-styler.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/expression.formatters/index.ts","../../../projects/moq/src/lib/auto-mocking/expression.guards/index.ts","../../../projects/moq/src/lib/auto-mocking/index.ts","../../../projects/moq/src/lib/expression.equality-comparers/constant.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/arguments.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/get-property.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/in-operator.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/instance-method.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/it.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/method.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/new-operator.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/set-property.equality-comparer.ts","../../../projects/moq/src/lib/expression.equality-comparers/index.ts","../../../projects/moq/src/lib/injector/default-injector.config.ts","../../../projects/moq/src/lib/mock.ts","../../../projects/moq/src/lib/equal-matchers/common-type.provider.ts","../../../projects/moq/src/lib/equal-matchers/date.matcher.ts","../../../projects/moq/src/lib/equal-matchers/equal-constant.matcher.ts","../../../projects/moq/src/lib/equal-matchers/equal.matcher.ts","../../../projects/moq/src/lib/equal-matchers/function.matcher.ts","../../../projects/moq/src/lib/equal-matchers/types.matcher.ts","../../../projects/moq/src/lib/equal-matchers/primitive.matcher.ts","../../../projects/moq/src/lib/equal-matchers/object.matcher.ts","../../../projects/moq/src/lib/equal-matchers/iterable.tester.ts","../../../projects/moq/src/lib/equal-matchers/iterator.matcher.ts","../../../projects/moq/src/lib/equal-matchers/object-matchers.injection-token.ts","../../../projects/moq/src/lib/equal-matchers/pojo.matcher.ts","../../../projects/moq/src/lib/equal-matchers/object-map.provider.ts","../../../projects/moq/src/lib/equal-matchers/map.matcher.ts","../../../projects/moq/src/lib/equal-matchers/index.ts","../../../projects/moq/src/lib/injector/equal-matching-injector.config.ts","../../../projects/moq/src/lib/presets/factories/mimics-rejected-async-preset.factory.ts","../../../projects/moq/src/lib/presets/factories/mimics-resolved-async-preset.factory.ts","../../../projects/moq/src/lib/reflector/method-reflecting-proxy.factory.ts","../../../projects/moq/src/lib/static.injector/type.ts","../../../projects/moq/src/lib/static.injector/interface/provider.ts","../../../projects/moq/src/public_api.ts","../../../projects/moq/src/moq.ts.ts"],"sourcesContent":["import { InteractionFormatter } from \"./interaction.formatter\";\nimport { Expression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class TrackedExpressionsFormatter {\n\n    constructor(private interactionFormatter: InteractionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expression[]): string {\n        let result = \"\";\n        for (const expression of trackedExpressions) {\n            result += `${this.interactionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n","import { TrackedExpressionsFormatter } from \"./formatters/tracked-expressions.formatter\";\r\nimport { IMock } from \"./moq\";\r\n\r\n/**\r\n * This function dumps into console.log all interactions with the mocked object\r\n */\r\nexport function dump<T>(mock: IMock<T>, writer: Console = console): void {\r\n    const formatter = mock.resolve(TrackedExpressionsFormatter);\r\n    const expressions = mock.tracker.get().map(record => record.expression);\r\n    const output = formatter.format(expressions);\r\n    const delimiter = \"-------------------------------\";\r\n    writer.log(`Dump of ${mock.name === undefined ? \"noname mock\" : mock.name}`);\r\n    writer.log(delimiter);\r\n    writer.log(`\\n${output}`);\r\n    writer.log(delimiter);\r\n}\r\n","/**\n * Sets the rules where bounds of a range are included or excluded from the range.\n * See {@link Times.Between}\n */\nexport enum Range {\n    Exclusive,\n    Inclusive\n}\n\n/**\n * This class expresses the expectation about amount of invocations.\n *\n * @example\n * ```typescript\n *\n * const times = new Times(expected => expected === 1, `Should be called once`);\n * const actual = times.test(2);\n *\n * expect(actual).toBe(false);\n * expect(times.message).toBe(`Should be called once`);\n * ```\n *\n * ```typescript\n *\n * const mockName = 'mock name';\n *const mock = new Mock<ITestObject>(mockName);\n *const object = mock.object();\n *\n *object.property;\n *\n *const action = () => mock.verify(instance => instance.property, Times.AtLeast(2));\n *\n *expect(action).toThrow();\n * ```\n */\nexport class Times {\n    private static _once: Times = new Times(expected => expected === 1, \"Should be called once\");\n    private static _never: Times = new Times(expected => expected === 0, \"Should be called never\");\n    private static _atMostOnce: Times = new Times(expected => expected <= 1, \"Should be called at most once\");\n    private static _atLeastOnce: Times = new Times(expected => expected >= 1, \"Should be called at least once\");\n\n    /**\n     *\n     * @param evaluator It takes actual value and decides if it is expected or not.\n     * Returns true or false accordingly.\n     * @param message A message that describes the expectation.\n     */\n    constructor(private evaluator: (callCount: number) => boolean,\n                public message: string) {\n\n    }\n\n    /**\n     * It expects that the actual would be equal or bigger then the expected value.\n     *\n     * @param callCount The expected value.\n     */\n    public static AtLeast(callCount: number): Times {\n        return new Times(expected => expected >= callCount, `Should be called at least ${callCount} time(s)`);\n    }\n\n    /**\n     * It expects that the actual would be equal or bigger then 1.\n     */\n    public static AtLeastOnce(): Times {\n        return Times._atLeastOnce;\n    }\n\n    /**\n     * It expects that the actual would be equal or smaller then the expected value.\n     *\n     * @param callCount The expected value.\n     */\n    public static AtMost(callCount: number): Times {\n        return new Times(expected => expected <= callCount, `Should be called at most ${callCount} time(s)`);\n    }\n\n    /**\n     * It expects that the actual would be equal or less then 1.\n     */\n    public static AtMostOnce(): Times {\n        return Times._atMostOnce;\n    }\n\n    /**\n     * It expects that the actual would be in the expected range of values.\n     *\n     * @param callCountFrom The lowest bound of the range.\n     * @param callCountTo The highest bound of the range.\n     * @param range  Sets the rules where bounds of a range are included or excluded from the range.\n     */\n    public static Between(callCountFrom: number, callCountTo: number, range: Range): Times {\n        if (range === Range.Exclusive) {\n            return new Times(\n                expected => expected > callCountFrom && expected < callCountTo,\n                `Should be called exclusively between ${callCountFrom} and ${callCountTo}`);\n        }\n\n        return new Times(\n            expected => expected >= callCountFrom && expected <= callCountTo,\n            `Should be called inclusively between ${callCountFrom} and ${callCountTo}`);\n    }\n\n    /**\n     * It expects that the actual is equal to the expected value.\n     *\n     * @param callCount The expected value.\n     */\n    public static Exactly(callCount: number): Times {\n        return new Times(\n            expected => expected === callCount,\n            `Should be called exactly ${callCount} time(s)`);\n    }\n\n    /**\n     * It expects that the actual is equal 0.\n     */\n    public static Never(): Times {\n        return Times._never;\n    }\n\n    /**\n     * It expects that the actual is equal 1.\n     */\n    public static Once(): Times {\n        return Times._once;\n    }\n\n    /**\n     * Evaluates the expectation against the actual value.\n     *\n     * @param callCount The actual value.\n     */\n    public test(callCount: number): boolean {\n        return this.evaluator(callCount);\n    }\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function stringify(token: any): string {\n    if (typeof token === \"string\") {\n        return token;\n    }\n\n    if (Array.isArray(token)) {\n        return `[${token.map(stringify).join(\", \")}]`;\n    }\n\n    if (token == null) {\n        return `${  token}`;\n    }\n\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n\n    if (token.name) {\n        return `${token.name}`;\n    }\n\n    const res = token.toString();\n\n    if (res == null) {\n        return `${  res}`;\n    }\n\n    const newLineIndex = res.indexOf(\"\\n\");\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (const key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\n      return key;\n    }\n  }\n  throw Error(\"Could not find renamed property on target object.\");\n}\n","/* eslint-disable */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Type } from \"./type\";\nimport { stringify } from \"./stringify\";\nimport { getClosureSafeProperty } from \"./property\";\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport type ForwardRefFn = () => any;\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n    (<any>forwardRefFn).__forward_ref__ = forwardRef;\n    (<any>forwardRefFn).toString = function () {\n        return stringify(this());\n    };\n    return (<Type<any>><any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef<T>(type: T): T {\n    return isForwardRef(type) ? type() : type;\n}\n\n/** Checks whether a function is wrapped by a `forwardRef`. */\nexport function isForwardRef(fn: any): fn is() => any {\n    return typeof fn === \"function\" && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef;\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport class InjectionToken<T> {\n    constructor(protected desc: string) {\n    }\n\n    toString(): string {\n        return `InjectionToken ${this.desc}`;\n    }\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from \"./injection_token\";\nimport { Injector } from \"./injector\";\nimport { ValueProvider } from \"./interface/provider\";\nimport { getClosureSafeProperty } from \"./property\";\nimport { stringify } from \"./stringify\";\n\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport const INJECTOR = new InjectionToken<Injector>(\n    \"INJECTOR\"\n);\n\nconst _THROW_IF_NOT_FOUND = {};\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\nexport const NG_TEMP_TOKEN_PATH = \"ngTempTokenPath\";\nconst NG_TOKEN_PATH = \"ngTokenPath\";\nconst NEW_LINE = /\\n/gm;\nexport const NO_NEW_LINE = \"ɵ\";\nexport const SOURCE = \"__source\";\n\nexport const USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nexport class NullInjector implements Injector {\n    get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n        if (notFoundValue === THROW_IF_NOT_FOUND) {\n            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n            error.name = \"NullInjectorError\";\n            throw error;\n        }\n        return notFoundValue;\n    }\n}\n\n\nexport function catchInjectorError(\n    e: any, token: any, injectorErrorName: string, source: string | null): never {\n    const tokenPath: any[] = e[NG_TEMP_TOKEN_PATH];\n    if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n    }\n    e.message = formatError(`\\n${e.message}`, tokenPath, injectorErrorName, source);\n    e[NG_TOKEN_PATH] = tokenPath;\n    e[NG_TEMP_TOKEN_PATH] = null;\n    throw e;\n}\n\nexport function formatError(\n    text: string, obj: any, injectorErrorName: string, source: string | null = null): string {\n    text = text && text.charAt(0) === \"\\n\" && text.charAt(1) === NO_NEW_LINE ? text.substr(2) : text;\n    let context = stringify(obj);\n    if (Array.isArray(obj)) {\n        context = obj.map(stringify).join(\" -> \");\n    } else if (typeof obj === \"object\") {\n        const parts = <string[]>[];\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                const value = obj[key];\n                parts.push(\n                    `${key}:${typeof value === \"string\" ? JSON.stringify(value) : stringify(value)}`);\n            }\n        }\n        context = `{${parts.join(\", \")}}`;\n    }\n    return `${injectorErrorName}${source ? `(${source})` : \"\"}[${context}]: ${\n        text.replace(NEW_LINE, \"\\n  \")}`;\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport enum InjectFlags {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n\n    /** Check self and check parent injector if needed */\n    Default = 0b0000,\n    /**\n     * Specifies that an injector should retrieve a dependency from any injector until reaching the\n     * host element of the current component. (Only used with Element Injector)\n     */\n    Host = 0b0001,\n    /** Don't ascend to ancestors of the node requesting injection. */\n    Self = 0b0010,\n    /** Skip the node that is requesting injection. */\n    SkipSelf = 0b0100,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional = 0b1000,\n}\n","/* eslint-disable */\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type of the Optional metadata.\n */\nexport class Optional {\n\n}\n\n/**\n * Type of the Self metadata.\n */\nexport class Self {\n\n}\n\n/**\n * Type of the SkipSelf metadata.\n */\nexport class SkipSelf {\n\n}\n\n/**\n * Type of the Host metadata.\n */\nexport class Host {\n\n}\n\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { resolveForwardRef } from \"./forward_ref\";\nimport { InjectionToken } from \"./injection_token\";\nimport {\n    catchInjectorError,\n    formatError,\n    INJECTOR,\n    NG_TEMP_TOKEN_PATH, NO_NEW_LINE,\n    NullInjector,\n    THROW_IF_NOT_FOUND,\n    USE_VALUE\n} from \"./injector_compatibility\";\nimport { InjectFlags } from \"./interface/injector\";\nimport {\n    ConstructorProvider,\n    ExistingProvider,\n    FactoryProvider,\n    StaticClassProvider,\n    StaticProvider,\n    ValueProvider\n} from \"./interface/provider\";\nimport { Optional, Self, SkipSelf } from \"./metadata\";\nimport { AbstractType, Type } from \"./type\";\nimport { stringify } from \"./stringify\";\n\nexport const INJECTOR_IMPL = (\n    providers: StaticProvider[], parent: Injector | undefined, name: string) => new StaticInjector(providers, parent, name);\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see `StaticProvider`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport abstract class Injector {\n    static THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;\n    static NULL: Injector = new NullInjector();\n    /**\n     * @internal\n     * @nocollapse\n     */\n    static __NG_ELEMENT_ID__ = -1;\n\n    /**\n     * Creates a new injector instance that provides one or more dependencies,\n     * according to a given type or types of `StaticProvider`.\n     *\n     * @param options An object with the following properties:\n     * * `providers`: An array of providers of the [StaticProvider type](api/core/StaticProvider).\n     * * `parent`: (optional) A parent injector.\n     * * `name`: (optional) A developer-defined identifying name for the new injector.\n     *\n     * @returns The new injector instance.\n     *\n     */\n    static create(options: { providers: StaticProvider[]; parent?: Injector; name?: string }): Injector;\n\n    static create(\n        options: StaticProvider[] | { providers: StaticProvider[]; parent?: Injector; name?: string },\n        parent?: Injector): Injector {\n        if (Array.isArray(options)) {\n            return INJECTOR_IMPL(options, parent, \"\");\n        } else {\n            return INJECTOR_IMPL(options.providers, options.parent, options.name || \"\");\n        }\n    }\n\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     *\n     * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     */\n    abstract get<T>(\n        token: Type<T> | InjectionToken<T> | AbstractType<T>, notFoundValue?: T, flags?: InjectFlags): T;\n}\n\n\nconst IDENT = function <T>(value: T): T {\n    return value;\n};\nconst EMPTY = <any[]>[];\nconst CIRCULAR = IDENT;\nconst MULTI_PROVIDER_FN = function (): any[] {\n    return Array.prototype.slice.call(arguments);\n};\n\nconst enum OptionFlags {\n    Optional = 1,\n    CheckSelf = 2,\n    CheckParent = 4,\n    // eslint-disable-next-line no-bitwise\n    Default = CheckSelf | CheckParent\n}\n\nexport class StaticInjector implements Injector {\n    readonly parent: Injector;\n    readonly source: string | null;\n    readonly scope: string | null;\n\n    private _records: Map<any, Record | null>;\n\n    constructor(\n        providers: StaticProvider[], parent = new NullInjector(), source: string | null = null) {\n        this.parent = parent;\n        this.source = source;\n        const records = this._records = new Map<any, Record>();\n        records.set(Injector, <Record>{token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n        records.set(INJECTOR, <Record>{token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n        this.scope = recursivelyProcessProviders(records, providers);\n    }\n\n    get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n    get(token: any, notFoundValue?: any): any;\n    get(token: any, notFoundValue?: any, flags: InjectFlags = InjectFlags.Default): any {\n        const records = this._records;\n        const record = records.get(token);\n        if (record === undefined) {\n            records.set(token, null);\n        }\n        try {\n            return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);\n        } catch (e) {\n            return catchInjectorError(e, token, \"StaticInjectorError\", this.source);\n        }\n    }\n\n    toString() {\n        const tokens = <string[]>[]; const records = this._records;\n        records.forEach((v, token) => tokens.push(stringify(token)));\n        return `StaticInjector[${tokens.join(\", \")}]`;\n    }\n}\n\ntype SupportedProvider =\n    ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider;\n\ninterface Record {\n    fn: Function;\n    useNew: boolean;\n    deps: DependencyRecord[];\n    value: any;\n}\n\ninterface DependencyRecord {\n    token: any;\n    options: number;\n}\n\nfunction resolveProvider(provider: SupportedProvider): Record {\n    const deps = computeDeps(provider);\n    let fn: Function = IDENT;\n    let value: any = EMPTY;\n    let useNew = false;\n    const provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = (provider as ValueProvider).useValue;\n    } else if ((provider as FactoryProvider).useFactory) {\n        fn = (provider as FactoryProvider).useFactory;\n    } else if ((provider as ExistingProvider).useExisting) {\n        // Just use IDENT\n    } else if ((provider as StaticClassProvider).useClass) {\n        useNew = true;\n        fn = resolveForwardRef((provider as StaticClassProvider).useClass);\n    } else if (typeof provide === \"function\") {\n        useNew = true;\n        fn = provide;\n    } else {\n        throw staticError(\n            \"StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable\",\n            provider);\n    }\n    return {deps, fn, useNew, value};\n}\n\nfunction multiProviderMixError(token: any) {\n    return staticError(\"Cannot mix multi providers and regular providers\", token);\n}\n\nfunction recursivelyProcessProviders(records: Map<any, Record>, provider: StaticProvider): string |\n    null {\n    let scope: string | null = null;\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (Array.isArray(provider)) {\n            // if we have an array recurse into the array\n            for (let i = 0; i < provider.length; i++) {\n                scope = recursivelyProcessProviders(records, provider[i]) || scope;\n            }\n        } else if (typeof provider === \"function\") {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError(\"Function/Class not supported\", provider);\n        } else if (provider && typeof provider === \"object\" && provider.provide) {\n            // At this point we have what looks like a provider: {provide: ?, ....}\n            let token = resolveForwardRef(provider.provide);\n            const resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                // This is a multi provider.\n                let multiProvider: Record | undefined = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                } else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = <Record>{\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    });\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({token, options: OptionFlags.Default});\n            }\n            const record = records.get(token);\n            if (record && record.fn === MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        } else {\n            throw staticError(\"Unexpected provider\", provider);\n        }\n    }\n    return scope;\n}\n\nfunction tryResolveToken(\n    token: any, record: Record | undefined | null, records: Map<any, Record | null>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    } catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value === CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n\nfunction resolveToken(\n    token: any, record: Record | undefined | null, records: Map<any, Record | null>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n    let value;\n    // eslint-disable-next-line no-bitwise\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value === CIRCULAR) {\n            throw Error(`${NO_NEW_LINE  }Circular dependency`);\n        } else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            const {useNew, fn, deps: depRecords} = record;\n            let deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (let i = 0; i < depRecords.length; i++) {\n                    const depRecord: DependencyRecord = depRecords[i];\n                    const options = depRecord.options;\n                    // eslint-disable-next-line no-bitwise\n                    const childRecord = options & OptionFlags.CheckSelf ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                        // Current Token to resolve\n                        depRecord.token,\n                        // A record which describes how to resolve the token.\n                        // If undefined, this means we don't have such a record\n                        childRecord,\n                        // Other records we know about.\n                        records,\n                        // If we don't know how to resolve dependency and we should not check parent for it,\n                        // than pass in Null injector.\n                        // eslint-disable-next-line no-bitwise\n                        !childRecord && !(options & OptionFlags.CheckParent) ? Injector.NULL : parent,\n                        // eslint-disable-next-line no-bitwise\n                        options & OptionFlags.Optional ? null : Injector.THROW_IF_NOT_FOUND,\n                        InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new (fn as any)(...deps) : fn.apply(undefined, deps);\n        }\n        // eslint-disable-next-line no-bitwise\n    } else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n        // eslint-disable-next-line no-bitwise\n    } else if (!(flags & InjectFlags.Optional)) {\n        value = Injector.NULL.get(token, notFoundValue);\n    } else {\n        value = Injector.NULL.get(token, typeof notFoundValue !== \"undefined\" ? notFoundValue : null);\n    }\n    return value;\n}\n\nfunction computeDeps(provider: StaticProvider): DependencyRecord[] {\n    let deps: DependencyRecord[] = EMPTY;\n    const providerDeps: any[] =\n        (provider as ExistingProvider & StaticClassProvider & ConstructorProvider).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (let i = 0; i < providerDeps.length; i++) {\n            let options = OptionFlags.Default;\n            let token = resolveForwardRef(providerDeps[i]);\n            if (Array.isArray(token)) {\n                for (let j = 0, annotations = token; j < annotations.length; j++) {\n                    const annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation === Optional) {\n                        // eslint-disable-next-line no-bitwise\n                        options = options | OptionFlags.Optional;\n                    } else if (annotation instanceof SkipSelf || annotation === SkipSelf) {\n                        // eslint-disable-next-line no-bitwise\n                        options = options & ~OptionFlags.CheckSelf;\n                    } else if (annotation instanceof Self || annotation === Self) {\n                        // eslint-disable-next-line no-bitwise\n                        options = options & ~OptionFlags.CheckParent;\n                    } else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({token, options});\n        }\n    } else if ((provider as ExistingProvider).useExisting) {\n        const token = resolveForwardRef((provider as ExistingProvider).useExisting);\n        deps = [{token, options: OptionFlags.Default}];\n    } else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError(\"'deps' required\", provider);\n    }\n    return deps;\n}\n\nfunction staticError(text: string, obj: any): Error {\n    return new Error(formatError(text, obj, \"StaticInjectorError\"));\n}\n","import { IMockOptions } from \"../moq\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport { Injector } from \"../static.injector/injector\";\n\n/**\n * Creates an angular based injector\n */\nexport function injectorFactory<T>(options: IMockOptions<T>, ...providers: StaticProvider[]) {\n    const {injectorConfig} = options;\n    if (injectorConfig) {\n        const resolved = injectorConfig.get(options, providers);\n        return Injector.create({\n            providers: resolved\n        });\n    }\n    throw new Error(\"injectorConfig is not defined\");\n}\n\n","import { IMock } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @Hidden\n */\nexport const MOCK = new InjectionToken<IMock<unknown>>(\"IMock\");\n","/**\n * @hidden\n */\nexport class SequenceId {\n    private value = 0;\n\n    public next(): number {\n        return this.value++;\n    }\n}\n","import { Expression } from \"../reflector/expressions\";\nimport { SequenceId } from \"./sequence-id\";\n\n/**\n * This class represents a recorded interaction with the a mocked object.\n */\nexport interface TrackedAction {\n    id: number;\n    expression: Expression;\n}\n\n/**\n * This class records all interactions with a mocked object.\n */\nexport class Tracker {\n    private log: TrackedAction[] = [];\n\n    constructor(private sequenceId: SequenceId) {\n\n    }\n\n    /**\n     * @hidden\n     */\n    public add(action: Expression): void {\n        const record = {id: this.sequenceId.next(), expression: action};\n        this.log.push(record);\n    }\n\n    /**\n     * Returns recorded interactions.\n     */\n    public get(): TrackedAction[] {\n        return [...this.log];\n    }\n\n    public interactions(): Expression[] {\n        return this.get().map(record => record.expression);\n    }\n}\n","import { SequenceId } from \"./sequence-id\";\nimport { Tracker } from \"./tracker\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: SequenceId, useClass: SequenceId, deps: []},\n    {provide: Tracker, useClass: Tracker, deps: [SequenceId]}\n];\n","import { It } from \"./expression-predicates\";\nimport { Expressions } from \"./expressions\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * A function that accepts a [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n * and either plays expected interaction or returns a predicate function.\n * See {@link IMock.setup} function and {@link It} class for more details.\n */\nexport type IExpression<T> = (instance: T) => void | any | It<T>;\n\n/**\n * This class reflects an expression to an expression tree representation.\n */\nexport interface ExpressionReflector {\n    /**\n     * Reflects the provided code as an expression tree.\n     */\n    reflect<T>(expression: IExpression<T>): Expressions<T>[];\n}\n\n/**\n * Injection token for an expression reflector\n */\nexport const EXPRESSION_REFLECTOR = new InjectionToken<ExpressionReflector>(\"Expression reflector\");\n\n/**\n * @hidden\n */\nexport const EXPRESSIONS = new InjectionToken<Expressions<unknown>[]>(\"reflected expressions\");\n\n/**\n * @hidden\n */\nexport interface IReturnValueFactory {\n    create(): any;\n}\n\n/**\n * @hidden\n */\nexport const GET_RETURN_VALUE = new InjectionToken<IReturnValueFactory>(\"return value factory for the get trap\");\n\n/**\n * @hidden\n */\nexport const APPLY_RETURN_VALUE = new InjectionToken<IReturnValueFactory>(\"return value factory for the apply trap\");\n\n/**\n * @hidden\n */\nexport const CONSTRUCT_RETURN_VALUE = new InjectionToken<IReturnValueFactory>(\"return value factory for the construct trap\");\n","/*eslint-disable max-classes-per-file*/\nimport { It } from \"./expression-predicates\";\n\nexport abstract class Expression {\n    protected constructor(\n        public readonly name: PropertyKey,\n        public readonly args: any[]) {\n\n    }\n}\n\n/**\n * This class represents an invocation of an instance method.\n * It provides access to the name of it and the parameters.\n */\nexport class MethodExpression extends Expression {\n    constructor(name: PropertyKey,\n                args: any[]) {\n        super(name, args);\n    }\n}\n\n/**\n * This class represents an invocation of a function.\n * It provides access to the parameters.\n */\nexport class FunctionExpression extends Expression {\n    constructor(args: any[]) {\n        super(undefined, args);\n    }\n}\n\n/**\n * This class represents a property accessing.\n * It provides access to the name of property.\n */\nexport class GetPropertyExpression extends Expression {\n    constructor(name: PropertyKey) {\n        super(name, undefined);\n    }\n}\n\n/**\n * This class represents a property write interaction.\n * It provides access to the name of property and the value.\n */\nexport class SetPropertyExpression extends Expression {\n    constructor(name: PropertyKey,\n                public readonly value: any) {\n        super(name, [value]);\n    }\n}\n\n/**\n * This class represents applying of [in operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in).\n * It provides access to the name of property.\n */\nexport class InOperatorExpression extends Expression {\n    constructor(name: PropertyKey) {\n        super(name, undefined);\n    }\n}\n\n/**\n * This class represents applying of [new operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new).\n * It provides access to the arguments of the constructor.\n */\nexport class NewOperatorExpression extends Expression {\n    constructor(args: any[]) {\n        super(undefined, args);\n    }\n}\n\n/**\n * Union of the expressions and It type.\n */\nexport type Expressions<T> =\n    FunctionExpression\n    | GetPropertyExpression\n    | SetPropertyExpression\n    | InOperatorExpression\n    | MethodExpression\n    | NewOperatorExpression\n    | It<T>;\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IReturnValueFactory } from \"../expression-reflector\";\nimport { GetPropertyExpression } from \"../expressions\";\n\nexport class GetReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly returnValueFactory: IReturnValueFactory,\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, name) => {\n            this.expressions.push(new GetPropertyExpression(name));\n            return this.returnValueFactory.create();\n        };\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { SetPropertyExpression } from \"../expressions\";\n\nexport class SetReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, name, value) => {\n            this.expressions.push(new SetPropertyExpression(name, value));\n            return true;\n        };\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IReturnValueFactory } from \"../expression-reflector\";\nimport { GetPropertyExpression, FunctionExpression, MethodExpression } from \"../expressions\";\n\nexport class ApplyReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly returnValueFactory: IReturnValueFactory,\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, thisArg, args) => {\n            const last = this.expressions.pop();\n            if (last instanceof GetPropertyExpression) {\n                this.expressions.push(new MethodExpression(last.name, args));\n            } else {\n                if (last !== undefined) {\n                    this.expressions.push(last);\n                }\n                this.expressions.push(new FunctionExpression(args));\n            }\n            return this.returnValueFactory.create();\n        };\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { InOperatorExpression } from \"../expressions\";\n\nexport class HasReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, name) => {\n            this.expressions.push(new InOperatorExpression(name));\n            return true;\n        };\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IReturnValueFactory } from \"../expression-reflector\";\nimport { NewOperatorExpression } from \"../expressions\";\n\nexport class ConstructReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly returnValueFactory: IReturnValueFactory,\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: any, args: any) => {\n            this.expressions.push(new NewOperatorExpression(args));\n            return this.returnValueFactory.create();\n        };\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { GetReflectorTrap } from \"./traps/get.reflector-trap\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { SetReflectorTrap } from \"./traps/set.reflector-trap\";\nimport { ApplyReflectorTrap } from \"./traps/apply.reflector-trap\";\nimport { HasReflectorTrap } from \"./traps/has.reflector-trap\";\nimport { ConstructReflectorTrap } from \"./traps/construct.reflector-trap\";\nimport { IReturnValueFactory } from \"./expression-reflector\";\n\nexport class ReflectingProxyFactory implements IReturnValueFactory {\n    constructor(private readonly injector: Injector) {\n    }\n\n    create() {\n        const get = this.injector.get(GetReflectorTrap) as unknown as TypeOfInjectionFactory<GetReflectorTrap>;\n        const set = this.injector.get(SetReflectorTrap) as unknown as TypeOfInjectionFactory<SetReflectorTrap>;\n        const apply = this.injector.get(ApplyReflectorTrap) as unknown as TypeOfInjectionFactory<ApplyReflectorTrap>;\n        const has = this.injector.get(HasReflectorTrap) as unknown as TypeOfInjectionFactory<HasReflectorTrap>;\n        const construct = this.injector.get(ConstructReflectorTrap) as unknown as TypeOfInjectionFactory<ConstructReflectorTrap>;\n        const options = {get, set, apply, has, construct};\n        const reflector = function () {\n            return undefined;\n        };\n        return new Proxy(reflector, options);\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { ReflectingProxyFactory } from \"./reflecting-proxy.factory\";\nimport { GetReflectorTrap } from \"./traps/get.reflector-trap\";\nimport { SetReflectorTrap } from \"./traps/set.reflector-trap\";\nimport { ApplyReflectorTrap } from \"./traps/apply.reflector-trap\";\nimport { HasReflectorTrap } from \"./traps/has.reflector-trap\";\nimport { ConstructReflectorTrap } from \"./traps/construct.reflector-trap\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport { APPLY_RETURN_VALUE, CONSTRUCT_RETURN_VALUE, EXPRESSIONS, GET_RETURN_VALUE } from \"./expression-reflector\";\n\nexport class ReflectingProxyInjectorFactory {\n    create(options: { providers: StaticProvider[] } = {providers: []}) {\n        const providers = [\n            {provide: EXPRESSIONS, useValue: [], deps: []},\n            {provide: ReflectingProxyFactory, useClass: ReflectingProxyFactory, deps: [Injector]},\n            {provide: GetReflectorTrap, useClass: GetReflectorTrap, deps: [GET_RETURN_VALUE, EXPRESSIONS]},\n            {provide: GET_RETURN_VALUE, useExisting: ReflectingProxyFactory, deps: []},\n            {provide: SetReflectorTrap, useClass: SetReflectorTrap, deps: [EXPRESSIONS]},\n            {provide: ApplyReflectorTrap, useClass: ApplyReflectorTrap, deps: [APPLY_RETURN_VALUE, EXPRESSIONS]},\n            {provide: APPLY_RETURN_VALUE, useExisting: ReflectingProxyFactory, deps: []},\n            {provide: HasReflectorTrap, useClass: HasReflectorTrap, deps: [EXPRESSIONS]},\n            {\n                provide: ConstructReflectorTrap,\n                useClass: ConstructReflectorTrap,\n                deps: [CONSTRUCT_RETURN_VALUE, EXPRESSIONS]\n            },\n            {provide: CONSTRUCT_RETURN_VALUE, useExisting: ReflectingProxyFactory, deps: []},\n            ...options.providers\n        ];\n        return Injector.create({providers});\n    }\n}\n","/*eslint @typescript-eslint/naming-convention: \"off\"*/\nexport type IPredicate<T> = (instance: T) => boolean;\n\n/**\n * This class allows to express wide range of cases in an expression.\n * You can use it with setups or verifies methods.\n *\n * @example\n * ```typescript\n *\n *  const value = 'value';\n *  const object = new Mock<Function>()\n *  .setup(instance => instance(1))\n *  .returns(value)\n *  .setup(instance => instance(It.Is(param => param > 0 && param < 2))\n *  .returns(value)\n *  .setup(instance => instance(It.IsAny())\n *  .returns(value)\n *  .object();\n *\n *  const actual = object(1);\n *\n *  expect(actual).toBe(value);\n * ```\n *\n * This class could be used not only for args matching, but also for function names, property names and so on.\n *\n * @example\n * ```typescript\n *\n * const object = new Mock<ITestObject>()\n * // the expression dynamically checks the property name that is being read\n * .setup(instance => It.Is((expression: GetPropertyExpression) => expression.name === 'property'))\n * .returns(value)\n * .object();\n *\n * const object = new Mock<ITestObject>()\n * //denis any write operation on the property\n * .setup(instance => { instance.property = It.IsAny()})\n * // true - allow, false - deny\n * .returns(false)\n * .object();\n *\n * const object = new Mock<ITestObject>()\n * .setup(instance => It.Is((expression: NamedMethodExpression) => expression.name === 'methodName' && expression.args[0] === 1))\n * .returns(value)\n * .object();\n *\n * // how to use with verify\n * mock.verify(instance => instance.method(It.Is(a => a === 2)));\n * ```\n */\nexport class It<P> {\n    constructor(public readonly predicate: IPredicate<P>) {\n\n    }\n\n    /**\n     * This factory method returns an expression that matches custom cases.\n     *\n     * @example\n     * ```typescript\n     *\n     *  const value = 'value';\n     *  const object = new Mock<Function>()\n     *  .setup(instance => instance(It.Is(param => param > 0 && param < 2))\n     *  .returns(value)\n     *  .object();\n     *\n     *  const actual = object(only_values_between_0_and_2_will_trigger_the_setup);\n     *\n     *  expect(actual).toBe(value);\n     * ```\n     */\n    public static Is<T>(predicate: IPredicate<T>): It<T> | any {\n        return new It(predicate);\n    }\n\n    /**\n     * This factory method returns a wildcat expression that matches any value.\n     *\n     * @example\n     * ```typescript\n     *\n     *  const value = 'value';\n     *  const object = new Mock<Function>()\n     *  .setup(instance => instance(It.IsAny())\n     *  .returns(value)\n     *  .object();\n     *\n     *  const actual = object(any_value_will_trigger_the_setup);\n     *\n     *  expect(actual).toBe(value);\n     * ```\n     */\n    public static IsAny<T>(): It<T> | any {\n        return new It(It.isAnyPredicate);\n    }\n\n    private static readonly isAnyPredicate = (): boolean => true;\n\n    /**\n     * Exams if the instance matches the predicate.\n     */\n    public test(instance?: P): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n","import { It } from \"./expression-predicates\";\nimport { Expressions } from \"./expressions\";\nimport { ReflectingProxyInjectorFactory } from \"./reflecting-proxy.injector-factory\";\nimport { ExpressionReflector, EXPRESSIONS, IExpression } from \"./expression-reflector\";\nimport { ReflectingProxyFactory } from \"./reflecting-proxy.factory\";\n\n/**\n * This class reflects an expression to an expression tree representation.\n * async/await is not supported.\n *\n * For more examples check\n * [unit tests for this class]\n * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/full.expression-reflector.spec.ts)\n */\nexport class SyncExpressionReflector implements ExpressionReflector {\n    constructor(private readonly injectorFactory: ReflectingProxyInjectorFactory) {\n    }\n\n    /**\n     * Reflects the provided code as an expression tree.\n     */\n    public reflect<T>(expression: IExpression<T>): Expressions<T>[] {\n        if (expression instanceof It) {\n            return [expression];\n        }\n\n        const injector = this.injectorFactory.create();\n\n        const proxyFactory = injector.get(ReflectingProxyFactory);\n        const proxy = proxyFactory.create();\n\n        const predicate = expression(proxy);\n\n        const expressions = injector.get(EXPRESSIONS);\n\n        return predicate instanceof It && expressions.length === 0\n            ? [predicate] : expressions;\n    }\n\n    public async reflectAsync<T>(expression: IExpression<T>): Promise<Expressions<T>[]> {\n        if (expression instanceof It) {\n            return [expression];\n        }\n\n        const injector = this.injectorFactory.create();\n\n        const proxyFactory = injector.get(ReflectingProxyFactory);\n        const proxy = proxyFactory.create();\n\n        const predicate = await expression(proxy);\n\n        const expressions = injector.get(EXPRESSIONS);\n        return predicate instanceof It && expressions.length === 0\n            ? [predicate] : expressions;\n    }\n}\n","import { Expressions } from \"./expressions\";\nimport { ExpressionReflector, IExpression } from \"./expression-reflector\";\nimport { AsyncExpressionDetector } from \"./async-expression.detector\";\nimport { AsyncExpressionReflector } from \"./async-expression.reflector\";\nimport { SyncExpressionReflector } from \"./sync-expression.reflector\";\n\n/**\n * This class reflects an expression to an expression tree representation.\n * async/await expressions are reflected in shellow mode.\n *\n * For more examples check\n * [unit tests for this class]\n * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/full.expression-reflector.spec.ts)\n */\nexport class CompositeExpressionReflector implements ExpressionReflector {\n    constructor(\n        private readonly asyncExpressionDetector: AsyncExpressionDetector,\n        private readonly syncExpressionReflector: SyncExpressionReflector,\n        private readonly asyncExpressionReflector: AsyncExpressionReflector) {\n    }\n\n    /**\n     * Reflects the provided code as an expression tree.\n     */\n    public reflect<T>(expression: IExpression<T>): Expressions<T>[] {\n        return this.asyncExpressionDetector.isAsync(expression)\n            ? this.asyncExpressionReflector.reflect(expression)\n            : this.syncExpressionReflector.reflect(expression);\n    }\n}\n","import { IExpression } from \"./expression-reflector\";\nimport { It } from \"./expression-predicates\";\n\nexport class AsyncExpressionDetector {\n    public isAsync<T>(expression: IExpression<T>) {\n        if (expression instanceof It) {\n            return false;\n        }\n\n        const get = () => proxy;\n        const set = () => true;\n        const apply = () => proxy;\n        const has = () => false;\n        const construct = () => proxy;\n        const options = {get, set, apply, has, construct};\n        const reflector = function () {\n            return undefined;\n        };\n        const proxy = new Proxy(reflector, options);\n        const predicate = expression(proxy as any);\n\n        return predicate instanceof It ? false : predicate instanceof Promise;\n    }\n}\n","import { Expressions } from \"./expressions\";\nimport { ExpressionReflector, EXPRESSIONS, IExpression } from \"./expression-reflector\";\nimport { ReflectingProxyFactory } from \"./reflecting-proxy.factory\";\nimport { AsyncReflectingProxyInjectorFactory } from \"./async-reflecting-proxy.injector-factory\";\n\n/**\n * This class reflects an async expression to an expression tree representation.\n * For more examples check\n * [unit tests for this class]\n * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/async.expression-reflector.spec.ts)\n */\nexport class AsyncExpressionReflector implements ExpressionReflector {\n    constructor(private readonly injectorFactory: AsyncReflectingProxyInjectorFactory) {\n    }\n\n    /**\n     * Reflects the provided async code as an expression tree.\n     */\n    public reflect<T>(expression: IExpression<T>): Expressions<T>[] {\n\n        const injector = this.injectorFactory.create();\n        const proxyFactory = injector.get(ReflectingProxyFactory);\n        const proxy = proxyFactory.create();\n        expression(proxy);\n\n        return injector.get(EXPRESSIONS);\n    }\n}\n","import { Expressions } from \"../expressions\";\nimport { InjectionFactory } from \"../../injector/injection-factory\";\nimport { GetPropertyExpression, MethodExpression } from \"../expressions\";\n\nexport class MethodReflectorTrap implements InjectionFactory {\n    constructor(\n        private readonly expressions: Expressions<unknown>[]) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target, thisArg, args) => {\n            const last = this.expressions.pop();\n            if (last instanceof GetPropertyExpression) {\n                this.expressions.push(new MethodExpression(last.name, args));\n            } else {\n                if (last !== undefined) {\n                    this.expressions.push(last);\n                }\n            }\n            return undefined;\n        };\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { GetReflectorTrap } from \"./traps/get.reflector-trap\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { SetReflectorTrap } from \"./traps/set.reflector-trap\";\nimport { ApplyReflectorTrap } from \"./traps/apply.reflector-trap\";\nimport { HasReflectorTrap } from \"./traps/has.reflector-trap\";\nimport { ConstructReflectorTrap } from \"./traps/construct.reflector-trap\";\nimport { IReturnValueFactory } from \"./expression-reflector\";\nimport { MethodReflectorTrap } from \"./traps/method.reflector-trap\";\n\nexport class MethodOnlyReflectingProxyFactory implements IReturnValueFactory {\n    constructor(private readonly injector: Injector) {\n    }\n\n    create() {\n        const apply = this.injector.get(MethodReflectorTrap) as unknown as TypeOfInjectionFactory<MethodReflectorTrap>;\n        const options = {apply};\n        const reflector = function () {\n            return undefined;\n        };\n        return new Proxy(reflector, options);\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport {\n    APPLY_RETURN_VALUE,\n    CONSTRUCT_RETURN_VALUE,\n    EXPRESSIONS,\n    GET_RETURN_VALUE,\n    IReturnValueFactory\n} from \"./expression-reflector\";\nimport { ReflectingProxyInjectorFactory } from \"./reflecting-proxy.injector-factory\";\nimport { MethodOnlyReflectingProxyFactory } from \"./method-only-reflecting-proxy.factory\";\nimport { MethodReflectorTrap } from \"./traps/method.reflector-trap\";\n\nexport class AsyncReflectingProxyInjectorFactory {\n    constructor(private readonly reflectingProxyInjectorFactory: ReflectingProxyInjectorFactory) {\n    }\n\n    create(options: { providers: StaticProvider[] } = {providers: []}) {\n        const providers = [\n            {provide: GET_RETURN_VALUE, useExisting: MethodOnlyReflectingProxyFactory, deps: []},\n            {provide: MethodOnlyReflectingProxyFactory, useClass: MethodOnlyReflectingProxyFactory, deps: [Injector]},\n            {provide: APPLY_RETURN_VALUE, useValue: {create: () => ({})} as IReturnValueFactory, deps: []},\n            {provide: CONSTRUCT_RETURN_VALUE, useValue: {create: () => ({})} as IReturnValueFactory, deps: []},\n            {provide: MethodReflectorTrap, useClass: MethodReflectorTrap, deps: [EXPRESSIONS]},\n            ...options.providers,\n        ];\n        return this.reflectingProxyInjectorFactory.create({providers});\n    }\n}\n","import { EXPRESSION_REFLECTOR } from \"./expression-reflector\";\nimport { ReflectingProxyInjectorFactory } from \"./reflecting-proxy.injector-factory\";\nimport { SyncExpressionReflector } from \"./sync-expression.reflector\";\nimport { CompositeExpressionReflector } from \"./composite-expression.reflector\";\nimport { AsyncExpressionDetector } from \"./async-expression.detector\";\nimport { AsyncExpressionReflector } from \"./async-expression.reflector\";\nimport { AsyncReflectingProxyInjectorFactory } from \"./async-reflecting-proxy.injector-factory\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: EXPRESSION_REFLECTOR, useExisting: CompositeExpressionReflector, deps: []},\n    {\n        provide: CompositeExpressionReflector,\n        useClass: CompositeExpressionReflector,\n        deps: [AsyncExpressionDetector, SyncExpressionReflector, AsyncExpressionReflector]\n    },\n    {provide: AsyncExpressionDetector, useClass: AsyncExpressionDetector, deps: []},\n    {provide: ReflectingProxyInjectorFactory, useClass: ReflectingProxyInjectorFactory, deps: []},\n    {provide: SyncExpressionReflector, useClass: SyncExpressionReflector, deps: [ReflectingProxyInjectorFactory]},\n    {\n        provide: AsyncReflectingProxyInjectorFactory,\n        useClass: AsyncReflectingProxyInjectorFactory,\n        deps: [ReflectingProxyInjectorFactory]\n    },\n    {\n        provide: AsyncExpressionReflector,\n        useClass: AsyncExpressionReflector,\n        deps: [AsyncReflectingProxyInjectorFactory]\n    },\n];\n","import { IPreset } from \"./presets/preset\";\n\n/**\n * @hidden\n */\nexport class Presets<T> {\n    private presets: IPreset<T>[] = [];\n\n    public add(preset: IPreset<T>): void {\n        this.presets.unshift(preset);\n    }\n\n    public get(): IPreset<T>[] {\n        return [...this.presets];\n    }\n}\n","import { IPlayable, PlayableUpdateReason } from \"../moq\";\n\n/**\n * The configured setup will be applied to invocations exactly n-times. After that it will be ignored.\n */\nexport class PlayableExactly implements IPlayable {\n    private invoked = 0;\n\n    constructor(private count: number) {\n    }\n\n    readonly update = (reason: PlayableUpdateReason) => {\n        if (reason === PlayableUpdateReason.OwnSetupWouldBePlayed) {\n            this.invoked++;\n        }\n    };\n\n    readonly isPlayable = () => this.invoked < this.count;\n}\n","import { IPlayable } from \"../moq\";\n\n/**\n * The configured setup will be never applied to invocations.\n */\nexport class PlayableNever implements IPlayable {\n    readonly update = () => undefined;\n    readonly isPlayable = () => false;\n}\n","import { IPlayable, PlayableUpdateReason } from \"../moq\";\n\n/**\n * The configured setup will be applied only to the first invocation.\n */\nexport class PlayableOnce implements IPlayable {\n    private played = false;\n\n    readonly update = (reason: PlayableUpdateReason) => {\n        if (reason === PlayableUpdateReason.OwnSetupWouldBePlayed) {\n            this.played = true;\n        }\n    };\n\n    readonly isPlayable = () => this.played === false;\n}\n","import { IPlayable } from \"../moq\";\n\n/**\n * The configured setup will be always applied to invocations.\n */\nexport class PlayableAlways implements IPlayable {\n    readonly isPlayable = () => true;\n    readonly update = () => undefined;\n}\n","import { IPlayable } from \"../moq\";\n\n/**\n * The configured setup will be applied or not accordingly to the value in the sequence.\n *\n * @example\n * ```typescript\n *\n * const value = 'value';\n * const object = new Mock<Function>()\n * .setup(instance => instance(1))\n * .play(PlayTimes.Sequence([false, true]))\n * .returns(value)\n * .object();\n *\n * expect(object(1).toBe(undefined);\n * expect(object(1).toBe(value);\n * expect(object(1).toBe(undefined);\n * ```\n */\nexport class PlayableSequence implements IPlayable {\n    private index = 0;\n\n    constructor(private sequence: boolean[]) {\n    }\n\n    readonly update = () => {\n        this.index++;\n    };\n\n    readonly isPlayable = () => {\n        if (this.index >= this.sequence.length) return false;\n        return this.sequence[this.index];\n    };\n}\n","import { IPlayable } from \"../moq\";\nimport { PlayableExactly } from \"./playable-exactly\";\nimport { PlayableNever } from \"./playable-never\";\nimport { PlayableOnce } from \"./playable-once\";\nimport { PlayableAlways } from \"./playable-always\";\nimport { PlayableSequence } from \"./playable-sequence\";\n\n\n/**\n * This class sets rules when a configured setup should be applied to the target invocation or not.\n *\n * @example\n * ```typescript\n *\n * const value = 'value';\n * const object = new Mock<Function>()\n * .setup(instance => instance(1))\n * .play(PlayTimes.Once())\n * .returns(value)\n * .object();\n *\n * expect(object(1).toBe(value);\n * expect(object(1).toBe(undefined);\n * ```\n */\nexport class PlayTimes {\n    private static readonly always = new PlayableAlways();\n    private static readonly never = new PlayableNever();\n\n    /**\n     * The configured setup will be applied to invocations exactly n-times. After that it will be ignored.\n     */\n    public static Exactly(count: number): IPlayable {\n        return new PlayableExactly(count);\n    }\n\n    /**\n     * The configured setup will be always applied to invocations.\n     */\n    public static Always(): IPlayable {\n        return PlayTimes.always;\n    }\n\n    /**\n     * The configured setup will be never applied to invocations.\n     */\n    public static Never(): IPlayable {\n        return PlayTimes.never;\n    }\n\n    /**\n     * The configured setup will be applied only to the first invocation.\n     */\n    public static Once(): IPlayable {\n        return new PlayableOnce();\n    }\n\n    /**\n     * The configured setup will be applied or not accordingly to the value in the sequence.\n     *\n     * @example\n     * ```typescript\n     *\n     * const value = 'value';\n     * const object = new Mock<Function>()\n     * .setup(instance => instance(1))\n     * .play(PlayTimes.Sequence([false, true]))\n     * .returns(value)\n     * .object();\n     *\n     * expect(object(1).toBe(undefined);\n     * expect(object(1).toBe(value);\n     * expect(object(1).toBe(undefined);\n     * ```\n     */\n    public static Sequence(sequence: boolean[]): IPlayable {\n        return new PlayableSequence(sequence);\n    }\n}\n","import { IMock, IPlayable, IPresetBuilder, PromisedType } from \"../moq\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { Expression } from \"../reflector/expressions\";\nimport { PlayTimes } from \"../playables/play-times\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { ReturnsPresetFactory } from \"./factories/returns-preset.factory\";\nimport { MimicsPresetFactory } from \"./factories/mimics-preset.factory\";\nimport { CallbackPresetFactory } from \"./factories/callback-preset.factory\";\nimport { ThrowsPresetFactory } from \"./factories/throws-preset.factory\";\nimport { ReturnsAsyncPresetFactory } from \"./factories/returns-async-preset.factory\";\nimport { ThrowsAsyncPresetFactory } from \"./factories/throws-async-preset.factory\";\n\n/**\n * The default implementation of {@link IPresetBuilder} interface.\n * Is it not intended to be used outside of the moq library.\n *\n * @hidden\n */\nexport class PresetBuilder<T, TValue = any> implements IPresetBuilder<T> {\n\n    constructor(\n        private readonly returnsPresetFactory: TypeOfInjectionFactory<ReturnsPresetFactory<T, TValue>>,\n        private readonly throwsPresetFactory: TypeOfInjectionFactory<ThrowsPresetFactory<T, TValue>>,\n        private readonly mimicsPresetFactory: TypeOfInjectionFactory<MimicsPresetFactory<T, TValue>>,\n        private readonly callbackPresetFactory: TypeOfInjectionFactory<CallbackPresetFactory<T, TValue>>,\n        private readonly returnsAsyncPresetFactory: TypeOfInjectionFactory<ReturnsAsyncPresetFactory<T, TValue>>,\n        private readonly throwsAsyncPresetFactory: TypeOfInjectionFactory<ThrowsAsyncPresetFactory<T, TValue>>,\n        private readonly target: Expressions<T>,\n        private playable: IPlayable = PlayTimes.Always()) {\n\n    }\n\n    public returnsAsync(value: PromisedType<TValue>): IMock<T> {\n        return this.returnsAsyncPresetFactory(this.target, this.playable, value);\n    }\n\n    public throwsAsync<TException>(exception: TException): IMock<T> {\n        return this.throwsAsyncPresetFactory(this.target, this.playable, exception);\n    }\n\n    public mimics(origin: T): IMock<T> {\n        return this.mimicsPresetFactory(this.target, this.playable, origin);\n    }\n\n    public returns(value: TValue): IMock<T> {\n        return this.returnsPresetFactory(this.target, this.playable, value);\n    }\n\n    public throws<TException>(exception: TException): IMock<T> {\n        return this.throwsPresetFactory(this.target, this.playable, exception);\n    }\n\n    public callback(callback: (interaction: Expression) => TValue): IMock<T> {\n        return this.callbackPresetFactory(this.target, this.playable, callback);\n    }\n\n    public play(playable: IPlayable): IPresetBuilder<T> {\n        this.playable = playable;\n        return this;\n    }\n}\n","import { Expressions } from \"../reflector/expressions\";\nimport { PresetBuilder } from \"./preset-builder\";\nimport { InjectionFactory, TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { ReturnsPresetFactory } from \"./factories/returns-preset.factory\";\nimport { ThrowsPresetFactory } from \"./factories/throws-preset.factory\";\nimport { MimicsPresetFactory } from \"./factories/mimics-preset.factory\";\nimport { CallbackPresetFactory } from \"./factories/callback-preset.factory\";\nimport { ReturnsAsyncPresetFactory } from \"./factories/returns-async-preset.factory\";\nimport { ThrowsAsyncPresetFactory } from \"./factories/throws-async-preset.factory\";\n\n/**\n * @hidden\n */\nexport class PresetBuilderFactory<T> implements InjectionFactory {\n    constructor(private readonly returnsPresetFactory: TypeOfInjectionFactory<ReturnsPresetFactory<T>>,\n                private readonly throwsPresetFactory: TypeOfInjectionFactory<ThrowsPresetFactory<T>>,\n                private readonly mimicsPresetFactory: TypeOfInjectionFactory<MimicsPresetFactory<T>>,\n                private readonly callbackPresetFactory: TypeOfInjectionFactory<CallbackPresetFactory<T>>,\n                private readonly returnsAsyncPresetFactory: TypeOfInjectionFactory<ReturnsAsyncPresetFactory<T>>,\n                private readonly throwsAsyncPresetFactory: TypeOfInjectionFactory<ThrowsAsyncPresetFactory<T>>) {\n        return this.factory() as any;\n    }\n\n    public factory() {\n        return (target: Expressions<T>) => new PresetBuilder<T>(\n            this.returnsPresetFactory,\n            this.throwsPresetFactory,\n            this.mimicsPresetFactory,\n            this.callbackPresetFactory,\n            this.returnsAsyncPresetFactory,\n            this.throwsAsyncPresetFactory,\n            target);\n    }\n}\n","import { IPresetBuilder } from \"../moq\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { PresetBuilderFactory } from \"./preset-builder.factory\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { AutoMockProvider } from \"../auto-mocking/auto-mock.provider\";\nimport { ComplexExpressionGuard } from \"../auto-mocking/expression.guards/complex-expression.guard\";\n\n/**\n * @Hidden\n */\nexport class SetupFactory<T> {\n    constructor(\n        private readonly presetBuilderFactory: TypeOfInjectionFactory<PresetBuilderFactory<T>>,\n        private readonly autoMockProvider: AutoMockProvider,\n        private readonly expressionGuard: ComplexExpressionGuard) {\n\n    }\n\n    public create<R = unknown>([shallow, ...rest]: Expressions<T>[]): IPresetBuilder<T, R> {\n        this.expressionGuard.verify([shallow, ...rest]);\n        const preset = this.presetBuilderFactory(shallow);\n        if (rest.length === 0) {\n            return preset;\n        }\n\n        const mock = this.autoMockProvider.getOrCreate(shallow);\n        preset.returns(mock.object());\n        const setup = mock.resolve(SetupFactory);\n        return setup.create(rest) as IPresetBuilder<T, R>;\n    }\n}\n","import { IMock } from \"../moq\";\nimport { InjectionFactory } from \"../injector/injection-factory\";\n\n/**\n * @hidden\n */\nexport class RootMockProvider implements InjectionFactory {\n    constructor(\n        private readonly mock: IMock<unknown>,\n        private readonly root: IMock<unknown>) {\n        return this.factory() as any;\n    }\n\n    public factory() {\n        return this.root ?? this.mock;\n    }\n}\n","import { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { AutoMockFactory } from \"./auto-mock.factory\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { AutoMockedStorage } from \"./auto-mock.storage\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class AutoMockProvider {\n    constructor(\n        private readonly map: TypeOfInjectionFactory<AutoMockedStorage>,\n        private readonly comparer: ExpressionEqualityComparer,\n        private readonly autoMockFactory: AutoMockFactory) {\n    }\n\n    public getOrCreate<T>(expression: Expressions<T>) {\n        for (const [key, value] of this.map) {\n            if (this.comparer.equals(expression, key) === true) {\n                return value;\n            }\n        }\n        const mock = this.autoMockFactory.create(expression);\n        this.map.set(expression, mock);\n        return mock;\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { Expression } from \"../../reflector/expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class CallbacksPreset<T> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: Expressions<T>,\n        public readonly callback: (interaction: Expression) => unknown) {\n\n    }\n}\n","import { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { CallbacksPreset } from \"../presets/callbacks.preset\";\nimport { Expression } from \"../../reflector/expressions\";\n\n/**\n * @Hidden\n */\nexport class CallbackPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, callback: (interaction: Expression) => TValue) => {\n            const preset = new CallbacksPreset(playable, target, callback);\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class MimicsPreset<T> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: Expressions<T>,\n        public readonly origin: unknown) {\n\n    }\n}\n","import { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { MimicsPreset } from \"../presets/mimics.preset\";\n\n/**\n * @Hidden\n */\nexport class MimicsPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, origin: T) => {\n            const preset = new MimicsPreset(playable, target, origin);\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class ReturnsPreset<T, TValue> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: Expressions<T>,\n        public readonly value: TValue) {\n\n    }\n}\n\n","import { InjectionFactory, TypeOfInjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable, PromisedType } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { ResolvedPromiseFactory } from \"../resolved-promise.factory\";\nimport { ReturnsPreset } from \"../presets/returns.preset\";\n\n/**\n * @Hidden\n */\nexport class ReturnsAsyncPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>,\n                private readonly resolvedPromise: TypeOfInjectionFactory<ResolvedPromiseFactory>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, value: PromisedType<TValue>) => {\n            const preset = new ReturnsPreset(playable, target, this.resolvedPromise(value));\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { ReturnsPreset } from \"../presets/returns.preset\";\nimport { Expressions } from \"../../reflector/expressions\";\n\n/**\n * @Hidden\n */\nexport class ReturnsPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, value: TValue) => {\n            const preset = new ReturnsPreset(playable, target, value);\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { InjectionFactory, TypeOfInjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { RejectedPromiseFactory } from \"../rejected-promise.factory\";\nimport { ReturnsPreset } from \"../presets/returns.preset\";\n\n/**\n * @Hidden\n */\nexport class ThrowsAsyncPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>,\n                private readonly rejectedPromise: TypeOfInjectionFactory<RejectedPromiseFactory>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return <TException>(target: Expressions<T>, playable: IPlayable, exception: TException) => {\n            const preset = new ReturnsPreset(playable, target, this.rejectedPromise(exception));\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { IPreset } from \"./preset\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { IPlayable } from \"../../moq\";\n\nexport class ThrowsPreset<T, TException> implements IPreset<T> {\n    constructor(\n        public readonly playable: IPlayable,\n        public readonly target: Expressions<T>,\n        public readonly exception: TException) {\n\n    }\n}\n","import { InjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { ThrowsPreset } from \"../presets/throws.preset\";\n\n/**\n * @Hidden\n */\nexport class ThrowsPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return <TException>(target: Expressions<T>, playable: IPlayable, exception: TException) => {\n            const preset = new ThrowsPreset(playable, target, exception);\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { InjectionFactory } from \"../injector/injection-factory\";\n\n/**\n * This service is an adapter for a resolved promise.\n */\nexport class ResolvedPromiseFactory implements InjectionFactory {\n    constructor() {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return <T>(value: T) => {\n            const promise = Promise.resolve<T>(value);\n            promise.then = promise.then.bind(promise);\n            promise.catch = promise.catch.bind(promise);\n            promise.finally = promise.finally.bind(promise);\n            return promise;\n        };\n    }\n}\n","import { InjectionFactory } from \"../injector/injection-factory\";\n\n/**\n * This service is an adapter for a rejected promise.\n */\nexport class RejectedPromiseFactory implements InjectionFactory {\n    constructor() {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return <T>(value: T) => {\n            const promise = Promise.reject<T>(value);\n            promise.then = promise.then.bind(promise);\n            promise.catch = promise.catch.bind(promise);\n            promise.finally = promise.finally.bind(promise);\n            return promise;\n        };\n    }\n}\n","import { Expressions } from \"../../reflector/expressions\";\nimport { ComplexExpressionValidator } from \"./complex-expression.validator\";\nimport { ExpressionGuardExceptionFactory } from \"./expression-guard-exception.factory\";\n\nexport class ComplexExpressionGuard {\n\n    constructor(private readonly complexExpressionValidator: ComplexExpressionValidator,\n                private readonly expressionGuardExceptionFactory: ExpressionGuardExceptionFactory) {\n    }\n\n    verify(expressions: Expressions<unknown>[]) {\n        const {valid, errors} = this.complexExpressionValidator.validate(expressions);\n        if (valid === false) {\n            throw this.expressionGuardExceptionFactory.create(errors);\n        }\n    }\n}\n","import { Presets } from \"./presets\";\nimport { PresetBuilderFactory } from \"./preset-builder.factory\";\nimport { SetupFactory } from \"./setup.factory\";\nimport { RootMockProvider } from \"../auto-mocking/root-mock.provider\";\nimport { AutoMockProvider } from \"../auto-mocking/auto-mock.provider\";\nimport { CallbackPresetFactory } from \"./factories/callback-preset.factory\";\nimport { MimicsPresetFactory } from \"./factories/mimics-preset.factory\";\nimport { ReturnsAsyncPresetFactory } from \"./factories/returns-async-preset.factory\";\nimport { ReturnsPresetFactory } from \"./factories/returns-preset.factory\";\nimport { ThrowsAsyncPresetFactory } from \"./factories/throws-async-preset.factory\";\nimport { ThrowsPresetFactory } from \"./factories/throws-preset.factory\";\nimport { ResolvedPromiseFactory } from \"./resolved-promise.factory\";\nimport { RejectedPromiseFactory } from \"./rejected-promise.factory\";\nimport { ComplexExpressionGuard } from \"../auto-mocking/expression.guards/complex-expression.guard\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: SetupFactory,\n        useClass: SetupFactory,\n        deps: [PresetBuilderFactory, AutoMockProvider, ComplexExpressionGuard]\n    },\n    {provide: Presets, useClass: Presets, deps: []},\n    {provide: ResolvedPromiseFactory, useClass: ResolvedPromiseFactory, deps: []},\n    {provide: RejectedPromiseFactory, useClass: RejectedPromiseFactory, deps: []},\n    {provide: ReturnsPresetFactory, useClass: ReturnsPresetFactory, deps: [RootMockProvider, Presets]},\n    {provide: ThrowsPresetFactory, useClass: ThrowsPresetFactory, deps: [RootMockProvider, Presets]},\n    {provide: CallbackPresetFactory, useClass: CallbackPresetFactory, deps: [RootMockProvider, Presets]},\n    {provide: MimicsPresetFactory, useClass: MimicsPresetFactory, deps: [RootMockProvider, Presets]},\n    {\n        provide: ReturnsAsyncPresetFactory,\n        useClass: ReturnsAsyncPresetFactory,\n        deps: [RootMockProvider, Presets, ResolvedPromiseFactory]\n    },\n    {\n        provide: ThrowsAsyncPresetFactory,\n        useClass: ThrowsAsyncPresetFactory,\n        deps: [RootMockProvider, Presets, RejectedPromiseFactory]\n    },\n    {\n        provide: PresetBuilderFactory, useClass: PresetBuilderFactory, deps: [\n            ReturnsPresetFactory,\n            ThrowsPresetFactory,\n            MimicsPresetFactory,\n            CallbackPresetFactory,\n            ReturnsAsyncPresetFactory,\n            ThrowsAsyncPresetFactory\n        ]\n    },\n];\n","import { Times } from \"../times\";\nimport { CallCounter } from \"./call-counter\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { AutoMockProvider } from \"../auto-mocking/auto-mock.provider\";\nimport { VerificationTester } from \"./verification-tester\";\n\n/**\n * @hidden\n */\nexport class Verifier<T> {\n    constructor(\n        private readonly callCounter: CallCounter,\n        private readonly verificationTester: VerificationTester,\n        private readonly autoMockProvider: AutoMockProvider) {\n\n    }\n\n    public test([shallow, ...rest]: Expressions<T>[], times: Times): void {\n        const callCount = this.callCounter.count(shallow);\n        if (rest.length === 0) {\n            this.verificationTester.test(shallow, callCount, times);\n        } else {\n            this.verificationTester.test(shallow, callCount, Times.AtLeastOnce());\n            const autoMock = this.autoMockProvider.getOrCreate(shallow);\n            const verifier = autoMock.resolve(Verifier);\n            verifier.test(rest, times);\n        }\n    }\n}\n","import { Expressions } from \"../reflector/expressions\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class CallCounter {\n\n    constructor(\n        private readonly comparer: ExpressionEqualityComparer,\n        private readonly tracker: Tracker) {\n\n    }\n\n    public count<T>(expected: Expressions<T>): number {\n        let count = 0;\n        for (const expression of this.tracker.interactions()) {\n            if (this.comparer.equals(expression, expected) === true) {\n                count += 1;\n            }\n        }\n\n        return count;\n    }\n}\n","import { Expressions } from \"../reflector/expressions\";\nimport { ExpressionsFormatter } from \"./expressions.formatter\";\nimport { TrackedExpressionsFormatter } from \"./tracked-expressions.formatter\";\nimport { Tracker } from \"../tracker/tracker\";\n\n/**\n * @hidden\n */\nexport class VerifyFormatter {\n\n    constructor(\n        private readonly expressionsFormatter: ExpressionsFormatter,\n        private readonly trackedExpressionsFormatter: TrackedExpressionsFormatter,\n        private readonly tracker: Tracker) {\n    }\n\n    public format(\n        expected: Expressions<any>,\n        timesMessage: string,\n        haveBeenCalledTimes: number): string {\n        const interactions = this.tracker.interactions();\n        const expectedExpressionMessage = this.expressionsFormatter.format(expected, timesMessage, haveBeenCalledTimes);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(interactions);\n        const delimiter = \"-------------------------------------\";\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`;\n    }\n}\n","export class VerifyError extends Error {\n    constructor(message: string) {\n        super(message);\n    }\n}\n","import { Times } from \"../times\";\nimport { VerifyFormatter } from \"../formatters/verify.formatter\";\nimport { VerifyError } from \"./verify-error\";\nimport { Expressions } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class VerificationTester {\n    constructor(private readonly verifyFormatter: VerifyFormatter) {\n    }\n\n    public test(expression: Expressions<any>, callCount: number, times: Times): void {\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount);\n            throw new VerifyError(message);\n        }\n    }\n}\n","import { GetPropertyEqualityComparer } from \"./get-property.equality-comparer\";\nimport { SetPropertyEqualityComparer } from \"./set-property.equality-comparer\";\nimport { MethodEqualityComparer } from \"./method.equality-comparer\";\nimport { InstanceMethodEqualityComparer } from \"./instance-method.equality-comparer\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { InOperatorEqualityComparer } from \"./in-operator.equality-comparer\";\nimport { NewOperatorEqualityComparer } from \"./new-operator.equality-comparer\";\nimport { ItEqualityComparer } from \"./it.equality-comparer\";\nimport { It } from \"../reflector/expression-predicates\";\nimport {\n    GetPropertyExpression,\n    InOperatorExpression,\n    FunctionExpression,\n    MethodExpression,\n    NewOperatorExpression,\n    SetPropertyExpression\n} from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class ExpressionEqualityComparer {\n\n    constructor(private readonly getPropertyExpressionMatcher: GetPropertyEqualityComparer,\n                private readonly setPropertyExpressionMatcher: SetPropertyEqualityComparer,\n                private readonly methodExpressionMatcher: MethodEqualityComparer,\n                private readonly namedMethodExpressionMatcher: InstanceMethodEqualityComparer,\n                private readonly inOperatorExpressionMatcher: InOperatorEqualityComparer,\n                private readonly newOperatorExpressionMatcher: NewOperatorEqualityComparer,\n                private readonly itEqualityComparer: ItEqualityComparer) {\n\n    }\n\n    public equals<T>(left: Expressions<T>, right: Expressions<T>): boolean {\n        if (left === right) return true;\n        if (left instanceof It || right instanceof It) {\n            return this.itEqualityComparer.equals(left, right);\n        }\n        if (left instanceof GetPropertyExpression && right instanceof GetPropertyExpression) {\n            return this.getPropertyExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof SetPropertyExpression && right instanceof SetPropertyExpression) {\n            return this.setPropertyExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof InOperatorExpression && right instanceof InOperatorExpression) {\n            return this.inOperatorExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof FunctionExpression && right instanceof FunctionExpression) {\n            return this.methodExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof MethodExpression && right instanceof MethodExpression) {\n            return this.namedMethodExpressionMatcher.equals(left, right);\n        }\n        if (left instanceof NewOperatorExpression && right instanceof NewOperatorExpression) {\n            return this.newOperatorExpressionMatcher.equals(left, right);\n        }\n\n        return false;\n    }\n}\n","import { Verifier } from \"./verifier\";\nimport { CallCounter } from \"./call-counter\";\nimport { VerifyFormatter } from \"../formatters/verify.formatter\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { AutoMockProvider } from \"../auto-mocking/auto-mock.provider\";\nimport { VerificationTester } from \"./verification-tester\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: Verifier, useClass: Verifier, deps: [CallCounter, VerificationTester, AutoMockProvider]},\n    {provide: CallCounter, useClass: CallCounter, deps: [ExpressionEqualityComparer, Tracker]},\n    {provide: VerificationTester, useClass: VerificationTester, deps: [VerifyFormatter]},\n];\n","import { Tracker } from \"../tracker/tracker\";\nimport { FunctionExpression } from \"../reflector/expressions\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\n\n/**\n * @hidden\n */\nexport class ApplyTrap {\n    constructor(\n        private tracker: Tracker,\n        private interactionPlayer: InteractionPlayer) {\n\n    }\n\n    public intercept(target: any, thisArg: any, argArray?: any): any {\n        const expression = new FunctionExpression(argArray);\n\n        this.tracker.add(expression);\n\n        return this.interactionPlayer.play(expression);\n    }\n}\n","import { Expression } from \"../reflector/expressions\";\nimport { PlayablePresetProvider } from \"./playable-preset.provider\";\nimport { PresetPlayer } from \"./preset.player\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\n\n/**\n * @hidden\n */\nexport class InteractionPlayer {\n    constructor(\n        private playablePresetProvider: PlayablePresetProvider,\n        private presetPlayablesUpdater: PresetPlayablesUpdater,\n        private presetPlayer: PresetPlayer) {\n\n    }\n\n    public play(interaction: Expression): any {\n        const preset = this.playablePresetProvider.get(interaction);\n        this.presetPlayablesUpdater.update(interaction, preset);\n        if (preset === undefined) return undefined;\n        return this.presetPlayer.play(preset, interaction);\n    }\n}\n","import { Times } from \"./times\";\r\nimport { Expression } from \"./reflector/expressions\";\r\nimport { Tracker } from \"./tracker/tracker\";\r\nimport { StaticProvider } from \"./static.injector/interface/provider\";\r\nimport { InjectionFactory, TypeOfInjectionFactory } from \"./injector/injection-factory\";\r\nimport { Type } from \"./static.injector/type\";\r\nimport { InjectionToken } from \"./static.injector/injection_token\";\r\nimport { IExpression } from \"./reflector/expression-reflector\";\r\n\r\nexport type PromisedType<T> = T extends Promise<infer P> ? P : never;\r\n\r\nexport const enum PlayableUpdateReason {\r\n    /**\r\n     * The playable is update because it's setup is about to be played\r\n     */\r\n    OwnSetupWouldBePlayed,\r\n    /**\r\n     * The playable is update because another setup is about to be played\r\n     */\r\n    OtherSetupWouldBePlayed\r\n}\r\n\r\n/**\r\n * Provides playable logic for a setup\r\n */\r\nexport interface IPlayable {\r\n    /**\r\n     * Tests if setup is playable\r\n     */\r\n    isPlayable(): boolean;\r\n\r\n    /**\r\n     * Invokes as the setup is about to be played, so the playable logic can change it's state.\r\n     *\r\n     * @param reason The reason why this update is called {@link PlayableUpdateReason}\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     *     const playable1 = new PlayableOnce();\r\n     *     const playable2 = new PlayableOnce();\r\n     *\r\n     *     const mock = new Mock<(val: number) => void)>()\r\n     *     // setup A\r\n     *     .setup(instance => instance(1))\r\n     *     .play(playable1)\r\n     *     .returns(1)\r\n     *     // setup B\r\n     *     .setup(instance => instance(2))\r\n     *     .play(playable2)\r\n     *     .returns(2);\r\n     *\r\n     *     const actual = mock.object()(1);\r\n     *     // at this point the update of playable1 should be called with OwnSetupWouldBePlayed\r\n     *     // because setup A would be played\r\n     *     // and the update of playable2 should be called with OtherSetupWouldBePlayed\r\n     * ```\r\n     */\r\n    update(reason: PlayableUpdateReason): void;\r\n}\r\n\r\n/**\r\n * Sets a behaviour rule for a particular use case\r\n *\r\n * @param T The type of mocked object.\r\n */\r\nexport interface IPresetBuilder<T, TValue = any> {\r\n    /**\r\n     * Returns the provided value as a result of interaction in case of\r\n     * - get property value\r\n     * - invocation a function\r\n     *\r\n     * Controls write operation in case of\r\n     * - property assignment (true - the assignment is allowed, false - the assignment is not allowed)\r\n     *\r\n     * @param value The value\r\n     */\r\n    returns(value: TValue): IMock<T>;\r\n\r\n    /**\r\n     * Returns the provided value with a resolved Promise as a result of invocation an asynchronous function\r\n     *\r\n     * @param value The value\r\n     */\r\n    returnsAsync(value: PromisedType<TValue>): IMock<T>;\r\n\r\n    /**\r\n     * Throws the provided exception.\r\n     */\r\n    throws<TException>(exception: TException): IMock<T>;\r\n\r\n    /**\r\n     * Returns the provided value with a rejected Promise as a result of interaction with an asynchronous function.\r\n     */\r\n    throwsAsync<TException>(exception: TException): IMock<T>;\r\n\r\n    /**\r\n     * @param callback A callback function that will intercept the interaction.\r\n     * The function may returns a value that will be provided as result (see {@link IPresetBuilder.returns})\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     *     const ipcRendererMock = new StrictMock<typeof ipcRenderer>()\r\n     *     .setup(instance => instance.on(ipcRendererChannelName, It.IsAny()))\r\n     *     .callback(({args: [channel, listener]}) => listener(undefined, response));\r\n     * ```\r\n     */\r\n    callback(callback: (interaction: Expression) => TValue): IMock<T>;\r\n\r\n    /**\r\n     * Plays the setup on target invocation when predicate returns true otherwise the setup will be ignored.\r\n     * As predicate {@link PlayTimes} could be used.\r\n     */\r\n    play(predicate: IPlayable): IPresetBuilder<T, TValue>;\r\n\r\n    /**\r\n     * Replicates interactions with original object.\r\n     * The mock object keeps tracking all interactions and reflects them on the original object.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     * const value = 2;\r\n     *\r\n     * class Origin {\r\n     *   public property = value;\r\n     *}\r\n     *\r\n     * const origin = new Origin();\r\n     * const mock = new Mock<Origin>()\r\n     * .setup(() => It.IsAny())\r\n     * .mimics(origin);\r\n     *\r\n     * const actual = mock.object().property;\r\n     * expect(actual).toBe(2);\r\n     * ```\r\n     */\r\n    mimics(origin: T): IMock<T>;\r\n}\r\n\r\n/**\r\n * The main API of the framework.\r\n *\r\n * @example\r\n * ```typescript\r\n *\r\n *  const value = 'value';\r\n *  const object = new Mock<Function>()\r\n *  .setup(instance => instance(1))\r\n *  .returns(value)\r\n *  .object();\r\n *\r\n *  const actual = object(1);\r\n *\r\n *  expect(actual).toBe(value);\r\n * ```\r\n * ---\r\n * #### Latest setups have more precedence over earlier setups.\r\n * @example\r\n * ```typescript\r\n *\r\n *  const object = new Mock<Function>()\r\n *  .setup(instance => instance(1))\r\n *  .returns(1)\r\n *  .setup(instance => instance(1))\r\n *  .returns(2)\r\n *  .object();\r\n *\r\n *  const actual = object(1);\r\n *\r\n *  expect(actual).toBe(2);\r\n * ```\r\n *\r\n * @param T The type of mocked object. Could be any type including:\r\n * - Function,\r\n * - arrow function,\r\n * - interface,\r\n * - class,\r\n * - object and etc.\r\n */\r\nexport interface IMock<T> {\r\n    /**\r\n     * You can name the mock. The name will be displayed with any relative output, so you can easily distinct\r\n     * output of several mocks. On the mocked object you can find this name at 'mockName' property of the [[Handler]].\r\n     */\r\n    readonly name?: string;\r\n\r\n    /**\r\n     * Returns the tracker object that responsible for storing history of interactions with the mocked object.\r\n     */\r\n    readonly tracker: Tracker;\r\n\r\n    /**\r\n     * Returns options object\r\n     */\r\n    readonly options: IMockOptions<T>;\r\n\r\n    /**\r\n     * Returns instance of mocked object\r\n     */\r\n    object(): T;\r\n\r\n    /**\r\n     * Defines a configuration for particular interaction with the mocked object.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     * // a function invoke with 1 as parameter\r\n     * .setup(instance => instance(1))\r\n     *\r\n     * // apply function invoke on a function with null as the first parameter and a placeholder for the second parameter\r\n     * .setup(instance => instance.apply(null, It.IsAny()))\r\n     *\r\n     * // accessing to a property\r\n     * .setup(instance => instance.property)\r\n     *\r\n     * //accessing to a named function with name 'test' of an object and the first parameter is 1\r\n     * .setup(instance => It.Is((expression: NamedMethodExpression) => {\r\n     *      return expression.name === 'test' && expression.args[0] === 1\r\n     * }))\r\n     *\r\n     * //setting propertyA to value of 'a'\r\n     * .setup(instance => {instance.propertyA = 'a'})\r\n     * ```\r\n     * @param expression A function that accepts a\r\n     * [Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\r\n     * and either plays expected interaction or returns a predicate function.\r\n     * Refer {@link It} class for parameter placeholders or predicate functions.\r\n     * Refer the integration tests for more examples.\r\n     * @returns PresetBuilder config interface for the provided expression.\r\n     */\r\n    setup<E extends IExpression<T>,\r\n        R = E extends (...args: any[]) => infer M ? M : any>(expression: E): IPresetBuilder<T, R>;\r\n\r\n    /**\r\n     * Asserts expected interactions with the mocked object.\r\n     *\r\n     * @param expression Expected expression\r\n     * @param times The default value is {@link Times.Once()}\r\n     */\r\n    verify(expression: IExpression<T>, times?: Times): IMock<T>;\r\n\r\n    /**\r\n     * Set the prototype of the mocked object.\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     *\r\n     *  class PrototypeClass {}\r\n     *\r\n     *  const mock = new Mock<{}>();\r\n     *  const object = mock.object();\r\n     *\r\n     *  Object.setPrototypeOf(object, PrototypeClass.prototype);\r\n     *\r\n     *  expect(object instanceof PrototypeClass).toBe(true);\r\n     * ```\r\n     */\r\n    prototypeof(prototype?: any): IMock<T>;\r\n\r\n    /**\r\n     * @experimental\r\n     * @hidden\r\n     */\r\n    insequence(sequence: ISequenceVerifier, expression: IExpression<T>): IMock<T>;\r\n\r\n    /**\r\n     * Retrieves an instance from the injector based on the provided token.\r\n     *\r\n     * @returns The instance from the injector if defined, otherwise null.\r\n     */\r\n    resolve<S, R = S extends InjectionFactory ? TypeOfInjectionFactory<S> : S>(token: Type<S> | InjectionToken<S>): R;\r\n}\r\n\r\n/**\r\n * @hidden\r\n * @experimental\r\n */\r\nexport interface ISequenceVerifier {\r\n    add<T>(mock: IMock<T>, expression: IExpression<T>): ISequenceVerifier;\r\n\r\n    verify(times?: Times): void;\r\n}\r\n\r\n/**\r\n * A mock object exposes a symbol property to access to its Moq API.\r\n * This property is read only and trackable.\r\n * Since this property makes sense only in context of the moq library\r\n * and is not specific for mocked types it is not possible to define an interaction behaviour with Setup API.\r\n *\r\n * @example\r\n * ```typescript\r\n *\r\n *  const mock = new Mock<() => void>()\r\n *  .object();\r\n *\r\n *  mock[MoqAPI]\r\n *  .setup(instance => instance())\r\n *  .returns(12);\r\n *\r\n *  const actual = mock();\r\n *\r\n *  expect(actual).toBe(12);\r\n * ```\r\n */\r\nexport const MoqAPI = Symbol(\"MoqAPI\");\r\n\r\n\r\n/**\r\n * The Mock internally depends on angular based injector to construct its dependencies.\r\n */\r\nexport interface IInjectorConfig {\r\n    /**\r\n     * Returns array of StaticProviders to construct an angular based injector.\r\n     *\r\n     * @param options The final version of mock options. Options that passed to Mock constructor are merged with\r\n     * the global mock options ({@link Mock.options}). Some components depend on the options and the injector\r\n     * should be able to resolve it. To configure the injector property the implementation could do the following:\r\n     * ``` typescript\r\n     * return [\r\n     *  {provide: MOCK_OPTIONS, useValue: options, deps: []},\r\n     * ];\r\n     * ```\r\n     * @param providers An array of additional providers that could be added to the final configuration.\r\n     */\r\n    get(options: IMockOptions<unknown>, ...providers: StaticProvider[]): StaticProvider[];\r\n}\r\n\r\n/**\r\n * Mock instance options.\r\n * Could be passed as parameter on mock instantiating or could be set globally on {@link Mock.options}.\r\n */\r\nexport interface IMockOptions<T> {\r\n    /**\r\n     * You can name the mock. The name will be displayed with any relative output, so you can easily distinct\r\n     * output of several mocks. On the mocked object you can find this name at 'mockName' property of the [[Handler]].\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The target object for Proxy that is used under the hood.\r\n     * typeof operation is applied to this target.\r\n     * The default value is a function.\r\n     */\r\n    target?: T;\r\n    /**\r\n     * The Mock internally based on angular injector to construct its dependencies.\r\n     * An instance of {@link IInjectorConfig} implementation could be passed as parameter in order to\r\n     * changed the mock behaviour. The default value is an instance of {@link DefaultInjectorConfig}.\r\n     * There is also {@link EqualMatchingInjectorConfig} that would setup Mock to use equal logic for comparing values.\r\n     */\r\n    injectorConfig?: IInjectorConfig;\r\n}\r\n","import { GetPropertyExpression } from \"../reflector/expressions\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { SpyFunctionProvider } from \"./spy-function.provider\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { HasPropertyExplorer } from \"../explorers/has-property.explorer/has-property.explorer\";\nimport { HasMethodExplorer } from \"../explorers/has-method.explorer/has-method.explorer\";\nimport { MoqAPI } from \"../moq\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK } from \"../injector/mock.injection-token\";\n\n/**\n * @hidden\n */\nexport class GetTrap {\n    constructor(\n        private mock: TypeofInjectionToken<typeof MOCK>,\n        private tracker: Tracker,\n        private propertiesValueStorage: PropertiesValueStorage,\n        private interactionPlayer: InteractionPlayer,\n        private hasPropertyExplorer: HasPropertyExplorer,\n        private hasMethodExplorer: HasMethodExplorer,\n        private spyFunctionProvider: SpyFunctionProvider) {\n\n    }\n\n    public intercept(property: PropertyKey): any {\n        const interaction = new GetPropertyExpression(property);\n\n        this.tracker.add(interaction);\n\n        if (property === MoqAPI) {\n            return this.mock;\n        }\n\n        if (this.propertiesValueStorage.has(property)) {\n            return this.propertiesValueStorage.get(property);\n        }\n\n        if (this.hasPropertyExplorer.has(property)) {\n            return this.interactionPlayer.play(interaction);\n        }\n\n        if (this.hasMethodExplorer.has(property)) {\n            return this.spyFunctionProvider.get(property);\n        }\n\n        return this.interactionPlayer.play(interaction);\n    }\n}\n","export class PropertiesValueStorage {\n    private storage = new Map<PropertyKey, any>();\n\n    public has(property: PropertyKey): boolean {\n        return this.storage.has(property);\n    }\n\n    public get(property: PropertyKey): any {\n        return this.storage.get(property);\n    }\n\n    public set(property: PropertyKey, value: any): void {\n        this.storage.set(property, value);\n    }\n}\n","import { PresetHasPropertyExplorer } from \"./preset-has-property.explorer\";\nimport { Presets } from \"../../presets/presets\";\nimport { MembersPropertyExplorer } from \"../members.explorer/members-property.explorer\";\n\n/**\n * @hidden\n */\nexport class HasPropertyExplorer {\n    constructor(\n        private presets: Presets<unknown>,\n        private membersExplorer: MembersPropertyExplorer,\n        private explorer: PresetHasPropertyExplorer) {\n\n    }\n\n    public has(name: PropertyKey): boolean {\n        if (this.membersExplorer.hasProperty(name)) {\n            return true;\n        }\n        return this.presets\n            .get()\n            .find(preset => this.explorer.has(name, preset)) !== undefined;\n    }\n}\n","import { PresetHasMethodExplorer } from \"./preset.has-method.explorer\";\nimport { Presets } from \"../../presets/presets\";\nimport { MembersMethodExplorer } from \"../members.explorer/members-method.explorer\";\n\n/**\n * @hidden\n */\nexport class HasMethodExplorer {\n    constructor(\n        private presets: Presets<unknown>,\n        private membersExplorer: MembersMethodExplorer,\n        private explorer: PresetHasMethodExplorer) {\n\n    }\n\n    public has(name: PropertyKey): boolean {\n        if (this.membersExplorer.hasMethod(name)) {\n            return true;\n        }\n\n        return this.presets\n            .get()\n            .find(preset => this.explorer.has(name, preset)) !== undefined;\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { MethodExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class SpyFunctionProvider {\n    private map = new Map<PropertyKey, (...args) => any>();\n\n    constructor(\n        private tracker: Tracker,\n        private interactionPlayer: InteractionPlayer) {\n\n    }\n\n    public get(property: PropertyKey): (...args) => any {\n        if (this.map.has(property) === false) {\n            this.map.set(property, (...args): any => {\n                const interaction = new MethodExpression(property, args);\n                this.tracker.add(interaction);\n                return this.interactionPlayer.play(interaction);\n            });\n        }\n        return this.map.get(property);\n    }\n}\n","import { PrototypeStorage } from \"./prototype.storage\";\n\n/**\n * @hidden\n */\nexport class GetPrototypeOfTrap {\n    constructor(\n        private prototypeStorage: PrototypeStorage) {\n\n    }\n\n    public intercept(): any {\n        return this.prototypeStorage.get();\n    }\n}\n","/**\n * @hidden\n */\n\nexport class PrototypeStorage {\n    private prototype: any = null;\n\n    constructor(mockTarget: any) {\n        this.prototype = mockTarget?.prototype ?? mockTarget;\n    }\n\n    public get(): any {\n        return this.prototype;\n    }\n\n    public set(prototype: any): void {\n        this.prototype = prototype;\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { InOperatorExpression } from \"../reflector/expressions\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { HasPropertyExplorer } from \"../explorers/has-property.explorer/has-property.explorer\";\nimport { HasMethodExplorer } from \"../explorers/has-method.explorer/has-method.explorer\";\nimport { InOperatorInteractionExplorer } from \"../explorers/in-operator-interaction.explorer/in-operator-interaction.explorer\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\n\n/**\n * @hidden\n */\nexport class HasTrap {\n    constructor(\n        private readonly tracker: Tracker,\n        private readonly propertiesValueStorage: PropertiesValueStorage,\n        private readonly interactionPlayer: InteractionPlayer,\n        private readonly inOperatorInteractionExplorer: InOperatorInteractionExplorer,\n        private readonly hasPropertyExplorer: HasPropertyExplorer,\n        private readonly hasMethodExplorer: HasMethodExplorer,\n        private readonly presetPlayablesUpdater: PresetPlayablesUpdater) {\n\n    }\n\n    public intercept(property: PropertyKey): any {\n        const interaction = new InOperatorExpression(property);\n        this.tracker.add(interaction);\n\n        if (this.propertiesValueStorage.has(property)) {\n            return true;\n        }\n\n        if (this.inOperatorInteractionExplorer.has(property)) {\n            return this.interactionPlayer.play(interaction);\n        }\n\n        this.presetPlayablesUpdater.update(interaction, undefined);\n\n        if (this.hasPropertyExplorer.has(property)) {\n            return true;\n        }\n\n        if (this.hasMethodExplorer.has(property)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n","import { PresetHasInOperatorExplorer } from \"./preset.has-in-operator.explorer\";\nimport { Presets } from \"../../presets/presets\";\n\n/**\n * @hidden\n */\nexport class InOperatorInteractionExplorer {\n    constructor(\n        private presets: Presets<unknown>,\n        private explorer: PresetHasInOperatorExplorer) {\n\n    }\n\n    public has(name: PropertyKey): boolean {\n        return this.presets\n            .get()\n            .find(preset => this.explorer.has(name, preset)) !== undefined;\n    }\n}\n","import { IPreset } from \"../presets/presets/preset\";\nimport { Expression } from \"../reflector/expressions\";\nimport { Presets } from \"../presets/presets\";\nimport { PlayableUpdateReason } from \"../moq\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class PresetPlayablesUpdater {\n\n    constructor(\n        private presets: Presets<unknown>,\n        private matcher: ExpressionEqualityComparer) {\n\n    }\n\n    public update(interaction: Expression, playable: IPreset<unknown>) {\n        for (const preset of this.presets.get()) {\n            const {target, playable: {update}} = preset;\n            if (this.matcher.equals(interaction, target)) {\n                const reason = preset === playable ?\n                    PlayableUpdateReason.OwnSetupWouldBePlayed :\n                    PlayableUpdateReason.OtherSetupWouldBePlayed;\n                update(reason);\n            }\n        }\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { SetPropertyExpression } from \"../reflector/expressions\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { MoqAPI } from \"../moq\";\nimport { PropertyIsReadOnlyTester } from \"../explorers/has-property.explorer/property-is-read-only.tester\";\n\n/**\n * @hidden\n */\nexport class SetTrap {\n    constructor(\n        private tracker: Tracker,\n        private propertiesValueStorage: PropertiesValueStorage,\n        private interactionPlayer: InteractionPlayer,\n        private propertyIsReadOnlyTester: PropertyIsReadOnlyTester) {\n\n    }\n\n    public intercept(target: any, property: PropertyKey, value: any): boolean {\n        const expression = new SetPropertyExpression(property, value);\n\n        this.tracker.add(expression);\n\n        if (property === MoqAPI) {\n            return false;\n        }\n\n        if (this.propertyIsReadOnlyTester.isReadOnly(property) === true) {\n            return false;\n        }\n\n        const accepted = this.interactionPlayer.play(expression);\n        if (accepted === true || accepted === undefined) {\n            this.propertiesValueStorage.set(property, value);\n        }\n\n        return accepted === undefined ? true : accepted;\n    }\n}\n","import { PrototypeStorage } from \"./prototype.storage\";\n\n/**\n * @hidden\n */\nexport class SetPrototypeOfTrap {\n    constructor(\n        private prototypeStorage: PrototypeStorage) {\n\n    }\n\n    public intercept(prototype: any): any {\n        if (prototype !== undefined) {\n            this.prototypeStorage.set(prototype);\n            return true;\n        }\n        return false;\n\n    }\n}\n","import { GetTrap } from \"./get.trap\";\nimport { SetTrap } from \"./set.trap\";\nimport { ApplyTrap } from \"./apply.trap\";\nimport { GetPrototypeOfTrap } from \"./get-prototype-of.trap\";\nimport { SetPrototypeOfTrap } from \"./set-prototype-of.trap\";\nimport { HasTrap } from \"./has.trap\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { ConstructTrap } from \"./construct.trap\";\n\n/**\n * @hidden\n */\nexport class ProxyFactory<T> {\n    private _proxy: T;\n\n    constructor(private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n                private readonly getTrap: GetTrap,\n                private readonly setTrap: SetTrap,\n                private readonly hasTrap: HasTrap,\n                private readonly applyTrap: ApplyTrap,\n                private readonly getPrototypeOfTrap: GetPrototypeOfTrap,\n                private readonly setPrototypeOfTrap: SetPrototypeOfTrap,\n                private readonly constructTrap: ConstructTrap) {\n    }\n\n    public object(): T {\n        if (this._proxy === undefined) {\n            this._proxy = this.createObject();\n        }\n\n        return this._proxy;\n    }\n\n    private createObject(): T {\n        const options = {\n            get: (target, name) => this.getTrap.intercept(name),\n            set: (target, name, value) => this.setTrap.intercept(target, name, value),\n            has: (target, name) => this.hasTrap.intercept(name),\n            apply: (target, thisArg, args) => this.applyTrap.intercept(target, thisArg, args),\n            getPrototypeOf: () => this.getPrototypeOfTrap.intercept(),\n            setPrototypeOf: (target, prototype) => this.setPrototypeOfTrap.intercept(prototype),\n            construct: (target, args) => this.constructTrap.intercept(args)\n        };\n\n        if (this.options.name) {\n            options[\"mockName\"] = this.options.name;\n        }\n\n        return new Proxy(this.options.target, options);\n    }\n}\n","import { IMockOptions } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const MOCK_OPTIONS = new InjectionToken<IMockOptions<any>>(\"mock options\");\n","import { PrototypeStorage } from \"../../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"../members.explorer/property-descriptor.provider\";\nimport { TypeofInjectionToken } from \"../../injector/typeof-injection-token\";\nimport { REFLECT_HAS } from \"../reflect-has.injection-token\";\n\n/**\n * @hidden\n */\nexport class PropertyIsReadOnlyTester {\n    constructor(\n        private storage: PrototypeStorage,\n        private propertyDescriptorProvider: PropertyDescriptorProvider,\n        private has: TypeofInjectionToken<typeof REFLECT_HAS>) {\n\n    }\n\n    public isReadOnly(name: PropertyKey): boolean {\n        const prototype = this.storage.get();\n        if (prototype && this.has(prototype, name)) {\n            const descriptor = this.propertyDescriptorProvider.get(prototype, name);\n            return descriptor.get instanceof Function && descriptor.set === undefined || descriptor.writable === false;\n        }\n        return false;\n    }\n}\n","import { Tracker } from \"../tracker/tracker\";\nimport { NewOperatorExpression } from \"../reflector/expressions\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\n\n/**\n * @hidden\n */\nexport class ConstructTrap {\n    constructor(\n        private tracker: Tracker,\n        private interactionPlayer: InteractionPlayer) {\n\n    }\n\n    public intercept(args: any[]): any {\n        const interaction = new NewOperatorExpression(args);\n        this.tracker.add(interaction);\n        return this.interactionPlayer.play(interaction);\n    }\n}\n","import { ApplyTrap } from \"./apply.trap\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { InteractionPlayer } from \"../interaction-players/interaction.player\";\nimport { GetTrap } from \"./get.trap\";\nimport { PropertiesValueStorage } from \"./properties-value.storage\";\nimport { HasPropertyExplorer } from \"../explorers/has-property.explorer/has-property.explorer\";\nimport { HasMethodExplorer } from \"../explorers/has-method.explorer/has-method.explorer\";\nimport { SpyFunctionProvider } from \"./spy-function.provider\";\nimport { GetPrototypeOfTrap } from \"./get-prototype-of.trap\";\nimport { PrototypeStorage } from \"./prototype.storage\";\nimport { HasTrap } from \"./has.trap\";\nimport {\n    InOperatorInteractionExplorer\n} from \"../explorers/in-operator-interaction.explorer/in-operator-interaction.explorer\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\nimport { SetTrap } from \"./set.trap\";\nimport { SetPrototypeOfTrap } from \"./set-prototype-of.trap\";\nimport { ProxyFactory } from \"./proxy.factory\";\nimport { MOCK } from \"../injector/mock.injection-token\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { PropertyIsReadOnlyTester } from \"../explorers/has-property.explorer/property-is-read-only.tester\";\nimport { ConstructTrap } from \"./construct.trap\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: ProxyFactory, useClass: ProxyFactory, deps: [\n            MOCK_OPTIONS,\n            GetTrap,\n            SetTrap,\n            HasTrap,\n            ApplyTrap,\n            GetPrototypeOfTrap,\n            SetPrototypeOfTrap,\n            ConstructTrap\n        ]\n    },\n    {provide: ApplyTrap, useClass: ApplyTrap, deps: [Tracker, InteractionPlayer]},\n    {\n        provide: GetTrap, useClass: GetTrap, deps: [\n            MOCK,\n            Tracker,\n            PropertiesValueStorage,\n            InteractionPlayer,\n            HasPropertyExplorer,\n            HasMethodExplorer,\n            SpyFunctionProvider\n        ]\n    },\n    {provide: GetPrototypeOfTrap, useClass: GetPrototypeOfTrap, deps: [PrototypeStorage]},\n    {\n        provide: HasTrap, useClass: HasTrap, deps: [\n            Tracker,\n            PropertiesValueStorage,\n            InteractionPlayer,\n            InOperatorInteractionExplorer,\n            HasPropertyExplorer,\n            HasMethodExplorer,\n            PresetPlayablesUpdater\n        ]\n    },\n    {provide: PropertiesValueStorage, useClass: PropertiesValueStorage, deps: []},\n    {provide: PrototypeStorage, useFactory: ({target}) => new PrototypeStorage(target), deps: [MOCK_OPTIONS]},\n    {\n        provide: SetTrap,\n        useClass: SetTrap,\n        deps: [Tracker, PropertiesValueStorage, InteractionPlayer, PropertyIsReadOnlyTester]\n    },\n    {provide: SetPrototypeOfTrap, useClass: SetPrototypeOfTrap, deps: [PrototypeStorage]},\n    {provide: SpyFunctionProvider, useClass: SpyFunctionProvider, deps: [Tracker, InteractionPlayer]},\n    {provide: ConstructTrap, useClass: ConstructTrap, deps: [Tracker, InteractionPlayer]},\n];\n","import { PresetPlayablesUpdater } from \"./preset-playables.updater\";\nimport { Presets } from \"../presets/presets\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: PresetPlayablesUpdater, useClass: PresetPlayablesUpdater, deps: [Presets, ExpressionEqualityComparer]}\n];\n","import { IPreset } from \"../presets/presets/preset\";\nimport { Expression } from \"../reflector/expressions\";\nimport { ReturnsPreset } from \"../presets/presets/returns.preset\";\nimport { CallbackPresetPlayer } from \"./callback-preset.player\";\nimport { CallbacksPreset } from \"../presets/presets/callbacks.preset\";\nimport { ThrowsPreset } from \"../presets/presets/throws.preset\";\nimport { MimicsPresetPlayer } from \"./mimics-preset.player\";\nimport { MimicsPreset } from \"../presets/presets/mimics.preset\";\n\n/**\n * @hidden\n */\nexport class PresetPlayer {\n    constructor(\n        private callbackPresetPlayer: CallbackPresetPlayer,\n        private mimicsPresetPlayer: MimicsPresetPlayer) {\n\n    }\n\n    public play<T>(preset: IPreset<T>, interaction: Expression): any {\n        if (preset instanceof ReturnsPreset) {\n            return preset.value;\n        }\n        if (preset instanceof CallbacksPreset) {\n            return this.callbackPresetPlayer.play(preset.callback, interaction);\n        }\n        if (preset instanceof MimicsPreset) {\n            return this.mimicsPresetPlayer.play(preset.origin, interaction);\n        }\n        if (preset instanceof ThrowsPreset) {\n            throw preset.exception;\n        }\n    }\n}\n","import { Expression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class CallbackPresetPlayer {\n    public play<TValue>(callback: (interaction: Expression) => TValue, interaction: Expression): any {\n        return callback.apply(undefined, [interaction]);\n    }\n}\n","import {\n    GetPropertyExpression,\n    InOperatorExpression,\n    Expression,\n    FunctionExpression,\n    MethodExpression,\n    NewOperatorExpression,\n    SetPropertyExpression\n} from \"../reflector/expressions\";\nimport { REFLECT_APPLY } from \"./reflect-apply.injection-token\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class MimicsPresetPlayer {\n    constructor(\n        private apply: TypeofInjectionToken<typeof REFLECT_APPLY>) {\n\n    }\n\n    public play(origin: any, interaction: Expression): any {\n        if (interaction instanceof GetPropertyExpression) {\n            return origin[interaction.name];\n        }\n        if (interaction instanceof SetPropertyExpression) {\n            origin[interaction.name] = interaction.value;\n            return true;\n        }\n        if (interaction instanceof MethodExpression) {\n            const method = origin[interaction.name];\n            return this.apply(method, origin, interaction.args);\n        }\n        if (interaction instanceof FunctionExpression) {\n            return this.apply(origin, undefined, interaction.args);\n        }\n        if (interaction instanceof InOperatorExpression) {\n            return interaction.name in origin;\n        }\n\n        if (interaction instanceof NewOperatorExpression) {\n            return new origin(...interaction.args);\n        }\n    }\n}\n","import { IPreset } from \"../presets/presets/preset\";\nimport { Expression } from \"../reflector/expressions\";\nimport { Presets } from \"../presets/presets\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class PlayablePresetProvider {\n\n    constructor(\n        private presets: Presets<unknown>,\n        private matcher: ExpressionEqualityComparer) {\n\n    }\n\n    public get(interaction: Expression): IPreset<unknown> | undefined {\n        for (const preset of this.presets.get()) {\n            const {target, playable: {isPlayable}} = preset;\n            if (this.matcher.equals(interaction, target) && isPlayable() === true) {\n                return preset;\n            }\n        }\n    }\n}\n","import { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const REFLECT_APPLY = new InjectionToken<typeof Reflect.apply>(\"Reflect Apply\");\n","import { PresetPlayer } from \"./preset.player\";\nimport { CallbackPresetPlayer } from \"./callback-preset.player\";\nimport { MimicsPresetPlayer } from \"./mimics-preset.player\";\nimport { PlayablePresetProvider } from \"./playable-preset.provider\";\nimport { Presets } from \"../presets/presets\";\nimport { InteractionPlayer } from \"./interaction.player\";\nimport { PresetPlayablesUpdater } from \"../playables/preset-playables.updater\";\nimport { REFLECT_APPLY } from \"./reflect-apply.injection-token\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: REFLECT_APPLY, useValue: Reflect.apply, deps: []},\n    {provide: PresetPlayer, useClass: PresetPlayer, deps: [CallbackPresetPlayer, MimicsPresetPlayer]},\n    {provide: PlayablePresetProvider, useClass: PlayablePresetProvider, deps: [Presets, ExpressionEqualityComparer]},\n    {provide: MimicsPresetPlayer, useClass: MimicsPresetPlayer, deps: [REFLECT_APPLY]},\n    {\n        provide: InteractionPlayer,\n        useClass: InteractionPlayer,\n        deps: [PlayablePresetProvider, PresetPlayablesUpdater, PresetPlayer]\n    },\n    {provide: CallbackPresetPlayer, useClass: CallbackPresetPlayer, deps: []},\n];\n","import { Expressions } from \"../reflector/expressions\";\nimport { InteractionFormatter } from \"./interaction.formatter\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\n\n/**\n * @hidden\n */\nexport class ExpressionsFormatter {\n\n    constructor(private readonly interactionFormatter: InteractionFormatter,\n                private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>) {\n\n    }\n\n    public format(expression: Expressions<any>, timesMessage: string, haveBeenCalledTimes: number): string {\n        const expressionDescription = this.interactionFormatter.format(expression);\n        const mockName = this.options.name;\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : \"\";\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n","import {\n    GetPropertyExpression,\n    InOperatorExpression,\n    Expression,\n    FunctionExpression,\n    MethodExpression, NewOperatorExpression,\n    SetPropertyExpression\n} from \"../reflector/expressions\";\nimport { It } from \"../reflector/expression-predicates\";\nimport { GetPropertyFormatter } from \"./get-property.formatter\";\nimport { SetPropertyFormatter } from \"./set-property.formatter\";\nimport { FunctionFormatter } from \"./function.formatter\";\nimport { MethodFormatter } from \"./method.formatter\";\nimport { ConstantFormatter } from \"./constant.formatter\";\nimport { InOperatorFormatter } from \"./in-operator.formatter\";\nimport { NewOperatorFormatter } from \"./new-operator.formatter\";\n\n/**\n * @hidden\n */\nexport class InteractionFormatter {\n\n    constructor(private readonly getPropertyFormatter: GetPropertyFormatter,\n                private readonly setPropertyFormatter: SetPropertyFormatter,\n                private readonly methodFormatter: FunctionFormatter,\n                private readonly namedMethodFormatter: MethodFormatter,\n                private readonly constantFormatter: ConstantFormatter,\n                private readonly inOperatorFormatter: InOperatorFormatter,\n                private readonly newOperatorFormatter: NewOperatorFormatter) {\n\n    }\n\n    public format(interaction: Expression | It<any>): string {\n        if (interaction instanceof GetPropertyExpression) return this.getPropertyFormatter.format(interaction);\n        if (interaction instanceof SetPropertyExpression) return this.setPropertyFormatter.format(interaction);\n        if (interaction instanceof InOperatorExpression) return this.inOperatorFormatter.format(interaction);\n        if (interaction instanceof FunctionExpression) return this.methodFormatter.format(interaction);\n        if (interaction instanceof MethodExpression) return this.namedMethodFormatter.format(interaction);\n        if (interaction instanceof NewOperatorExpression) return this.newOperatorFormatter.format(interaction);\n        if (interaction instanceof It) return this.constantFormatter.format(interaction);\n\n        return undefined;\n    }\n}\n","import { SetPropertyExpression } from \"../reflector/expressions\";\nimport { ConstantFormatter } from \"./constant.formatter\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class SetPropertyFormatter {\n\n    constructor(private constantFormatter: ConstantFormatter,\n                private propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(expression: SetPropertyExpression): string {\n        const value = this.constantFormatter.format(expression.value);\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\n        return `Assignment of ${value} to property \\'${propertyKey}\\'`;\n    }\n}\n","import { It } from \"../reflector/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class ConstantFormatter {\n    public format(object: any | It<any>): string {\n        if (object instanceof It) return `It.Is(${(object as It<any>).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const value of object) {\n                description.push(this.format(value));\n            }\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class PropertyKeyFormatter {\n    public format(property: PropertyKey): string {\n        return String(property);\n    }\n}\n","import { MethodExpression } from \"../reflector/expressions\";\nimport { ConstantFormatter } from \"./constant.formatter\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class MethodFormatter {\n\n    constructor(private readonly constantFormatter: ConstantFormatter,\n                private readonly propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(expression: MethodExpression): string {\n        const formatted: string[] = [];\n\n        for (const arg of expression.args) {\n            formatted.push(this.constantFormatter.format(arg));\n        }\n\n        const value = formatted.join(\", \");\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\n        return `${propertyKey}(${value})`;\n    }\n}\n","import { FunctionExpression } from \"../reflector/expressions\";\nimport { ConstantFormatter } from \"./constant.formatter\";\n\n/**\n * @hidden\n */\nexport class FunctionFormatter {\n\n    constructor(private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: FunctionExpression): string {\n        const value = this.constantFormatter.format(expression.args);\n        return `(${value})`;\n    }\n}\n","import { InOperatorExpression } from \"../reflector/expressions\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class InOperatorFormatter {\n    constructor(private propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(expression: InOperatorExpression): string {\n        const propertyKey = this.propertyKeyFormatter.format(expression.name);\n        return `In operator for \\'${propertyKey}\\'`;\n    }\n}\n","import { GetPropertyExpression } from \"../reflector/expressions\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\n\n/**\n * @hidden\n */\nexport class GetPropertyFormatter {\n    constructor(private readonly propertyKeyFormatter: PropertyKeyFormatter) {\n\n    }\n\n    public format(interaction: GetPropertyExpression): string {\n        const propertyKey = this.propertyKeyFormatter.format(interaction.name);\n        return `Getter of \\'${propertyKey}\\'`;\n    }\n}\n","import { NewOperatorExpression } from \"../reflector/expressions\";\nimport { ConstantFormatter } from \"./constant.formatter\";\n\n/**\n * @hidden\n */\nexport class NewOperatorFormatter {\n\n    constructor(private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: NewOperatorExpression): string {\n        const value = this.constantFormatter.format(expression.args);\n        return `new constructor(${value})`;\n    }\n}\n","import { VerifyFormatter } from \"./verify.formatter\";\nimport { ExpressionsFormatter } from \"./expressions.formatter\";\nimport { TrackedExpressionsFormatter } from \"./tracked-expressions.formatter\";\nimport { InteractionFormatter } from \"./interaction.formatter\";\nimport { SetPropertyFormatter } from \"./set-property.formatter\";\nimport { ConstantFormatter } from \"./constant.formatter\";\nimport { PropertyKeyFormatter } from \"./property-key.formatter\";\nimport { MethodFormatter } from \"./method.formatter\";\nimport { FunctionFormatter } from \"./function.formatter\";\nimport { InOperatorFormatter } from \"./in-operator.formatter\";\nimport { GetPropertyFormatter } from \"./get-property.formatter\";\nimport { NewOperatorFormatter } from \"./new-operator.formatter\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { Tracker } from \"../tracker/tracker\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: VerifyFormatter,\n        useClass: VerifyFormatter,\n        deps: [ExpressionsFormatter, TrackedExpressionsFormatter, Tracker]\n    },\n    {provide: TrackedExpressionsFormatter, useClass: TrackedExpressionsFormatter, deps: [InteractionFormatter]},\n    {provide: SetPropertyFormatter, useClass: SetPropertyFormatter, deps: [ConstantFormatter, PropertyKeyFormatter]},\n    {provide: PropertyKeyFormatter, useClass: PropertyKeyFormatter, deps: []},\n    {provide: MethodFormatter, useClass: MethodFormatter, deps: [ConstantFormatter, PropertyKeyFormatter]},\n    {provide: FunctionFormatter, useClass: FunctionFormatter, deps: [ConstantFormatter]},\n    {provide: InOperatorFormatter, useClass: InOperatorFormatter, deps: [PropertyKeyFormatter]},\n    {provide: GetPropertyFormatter, useClass: GetPropertyFormatter, deps: [PropertyKeyFormatter]},\n    {provide: ExpressionsFormatter, useClass: ExpressionsFormatter, deps: [InteractionFormatter, MOCK_OPTIONS]},\n    {provide: ConstantFormatter, useClass: ConstantFormatter, deps: []},\n    {provide: NewOperatorFormatter, useClass: NewOperatorFormatter, deps: [ConstantFormatter]},\n    {\n        provide: InteractionFormatter,\n        useClass: InteractionFormatter,\n        deps: [\n            GetPropertyFormatter,\n            SetPropertyFormatter,\n            FunctionFormatter,\n            MethodFormatter,\n            ConstantFormatter,\n            InOperatorFormatter,\n            NewOperatorFormatter\n        ]\n    }\n];\n","import { Expressions } from \"../../reflector/expressions\";\nimport { MethodExpression } from \"../../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class ExpressionHasMethodExplorer {\n    public has(name: PropertyKey, expression: Expressions<unknown>): boolean {\n        if (expression instanceof MethodExpression) {\n            return expression.name === name;\n        }\n\n        return false;\n    }\n}\n","import { PrototypeStorage } from \"../../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"./property-descriptor.provider\";\nimport { REFLECT_HAS } from \"../reflect-has.injection-token\";\nimport { TypeofInjectionToken } from \"../../injector/typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class MembersMethodExplorer {\n    constructor(\n        private storage: PrototypeStorage,\n        private propertyDescriptorProvider: PropertyDescriptorProvider,\n        private has: TypeofInjectionToken<typeof REFLECT_HAS>) {\n\n    }\n\n    public hasMethod(name: PropertyKey): boolean {\n        const prototype = this.storage.get();\n        if (prototype && this.has(prototype, name)) {\n            const descriptor = this.propertyDescriptorProvider.get(prototype, name);\n            return descriptor.value instanceof Function;\n        }\n        return false;\n    }\n}\n\n","import { IPreset } from \"../../presets/presets/preset\";\nimport { ExpressionHasMethodExplorer } from \"./expression.has-method.explorer\";\nimport { ObjectHasMethodExplorer } from \"./object.has-method.explorer\";\nimport { MimicsPreset } from \"../../presets/presets/mimics.preset\";\n\n/**\n * @hidden\n */\nexport class PresetHasMethodExplorer {\n    constructor(private expressionHasMethodExplorer: ExpressionHasMethodExplorer,\n                private objectHasMethodExplorer: ObjectHasMethodExplorer) {\n\n    }\n\n    public has(name: PropertyKey, preset: IPreset<unknown>): boolean {\n        if (preset instanceof MimicsPreset && this.objectHasMethodExplorer.has(name, preset.origin)) {\n            return true;\n        }\n        return this.expressionHasMethodExplorer.has(name, preset.target);\n    }\n}\n","/**\n * @hidden\n */\nexport class ObjectHasMethodExplorer {\n    public has(name: PropertyKey, target: any): boolean {\n        return target[name] instanceof Function;\n    }\n}\n","import { Expressions } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\nimport { InOperatorExpression, FunctionExpression, MethodExpression } from \"../../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class ExpressionHasPropertyExplorer {\n    public has(name: PropertyKey, expression: Expressions<unknown>): boolean {\n        if (expression instanceof It\n            || expression instanceof FunctionExpression\n            || expression instanceof MethodExpression\n            || expression instanceof InOperatorExpression) {\n            return false;\n        }\n\n        return expression.name === name;\n    }\n}\n","import { PrototypeStorage } from \"../../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"./property-descriptor.provider\";\nimport { REFLECT_HAS } from \"../reflect-has.injection-token\";\nimport { TypeofInjectionToken } from \"../../injector/typeof-injection-token\";\n\n/**\n * @hidden\n */\nexport class MembersPropertyExplorer {\n    constructor(\n        private storage: PrototypeStorage,\n        private propertyDescriptorProvider: PropertyDescriptorProvider,\n        private has: TypeofInjectionToken<typeof REFLECT_HAS>) {\n\n    }\n\n    public hasProperty(name: PropertyKey): boolean {\n        const prototype = this.storage.get();\n        if (prototype && this.has(prototype, name)) {\n            const descriptor = this.propertyDescriptorProvider.get(prototype, name);\n            return descriptor.get !== undefined || (descriptor.value instanceof Function) === false;\n        }\n        return false;\n    }\n}\n","import { IPreset } from \"../../presets/presets/preset\";\nimport { ExpressionHasPropertyExplorer } from \"./expression-has-property.explorer\";\nimport { ObjectHasPropertyExplorer } from \"./object-has-property.explorer\";\nimport { MimicsPreset } from \"../../presets/presets/mimics.preset\";\n\n/**\n * @hidden\n */\nexport class PresetHasPropertyExplorer {\n    constructor(private expressionHasPropertyExplorer: ExpressionHasPropertyExplorer,\n                private objectHasPropertyExplorer: ObjectHasPropertyExplorer) {\n\n    }\n\n    public has(name: PropertyKey, preset: IPreset<unknown>): boolean {\n        if (preset instanceof MimicsPreset && this.objectHasPropertyExplorer.has(name, preset.origin)) {\n            return true;\n        }\n        return this.expressionHasPropertyExplorer.has(name, preset.target);\n    }\n}\n","/**\n * @hidden\n */\nexport class ObjectHasPropertyExplorer {\n    public has(name: PropertyKey, target: any): boolean {\n        return Reflect.has(target, name) && (target[name] instanceof Function) === false;\n    }\n}\n","import { IPreset } from \"../../presets/presets/preset\";\nimport { InOperatorExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class PresetHasInOperatorExplorer {\n    public has(name: PropertyKey, preset: IPreset<unknown>): boolean {\n        const {playable: {isPlayable}} = preset;\n\n        if (isPlayable() === false) {\n            return false;\n        }\n\n        if (preset.target instanceof InOperatorExpression) {\n            return preset.target.name === name;\n        }\n\n        if (preset.target instanceof It) {\n            return preset.target.test(new InOperatorExpression(name));\n        }\n\n        return false;\n    }\n}\n","/**\n * @hidden\n */\nexport class PropertyDescriptorProvider {\n    get(target: any, name: PropertyKey) {\n        let prototype = target;\n        while (prototype !== null) {\n            const descriptor = Reflect.getOwnPropertyDescriptor(prototype, name);\n            if (descriptor !== undefined) return descriptor;\n            prototype = Reflect.getPrototypeOf(prototype);\n        }\n    }\n}\n","import { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @hidden\n */\nexport const REFLECT_HAS = new InjectionToken<typeof Reflect.has>(\"Reflect has\");\n","import { ExpressionHasMethodExplorer } from \"./has-method.explorer/expression.has-method.explorer\";\nimport { HasMethodExplorer } from \"./has-method.explorer/has-method.explorer\";\nimport { Presets } from \"../presets/presets\";\nimport { MembersMethodExplorer } from \"./members.explorer/members-method.explorer\";\nimport { PresetHasMethodExplorer } from \"./has-method.explorer/preset.has-method.explorer\";\nimport { ObjectHasMethodExplorer } from \"./has-method.explorer/object.has-method.explorer\";\nimport { ExpressionHasPropertyExplorer } from \"./has-property.explorer/expression-has-property.explorer\";\nimport { HasPropertyExplorer } from \"./has-property.explorer/has-property.explorer\";\nimport { MembersPropertyExplorer } from \"./members.explorer/members-property.explorer\";\nimport { PresetHasPropertyExplorer } from \"./has-property.explorer/preset-has-property.explorer\";\nimport { ObjectHasPropertyExplorer } from \"./has-property.explorer/object-has-property.explorer\";\nimport { InOperatorInteractionExplorer } from \"./in-operator-interaction.explorer/in-operator-interaction.explorer\";\nimport { PresetHasInOperatorExplorer } from \"./in-operator-interaction.explorer/preset.has-in-operator.explorer\";\nimport { PrototypeStorage } from \"../interceptors/prototype.storage\";\nimport { PropertyDescriptorProvider } from \"./members.explorer/property-descriptor.provider\";\nimport { REFLECT_HAS } from \"./reflect-has.injection-token\";\nimport { PropertyIsReadOnlyTester } from \"./has-property.explorer/property-is-read-only.tester\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: ExpressionHasMethodExplorer, useClass: ExpressionHasMethodExplorer, deps: []},\n    {\n        provide: HasMethodExplorer,\n        useClass: HasMethodExplorer,\n        deps: [Presets, MembersMethodExplorer, PresetHasMethodExplorer]\n    },\n    {provide: ObjectHasMethodExplorer, useClass: ObjectHasMethodExplorer, deps: []},\n    {\n        provide: PresetHasMethodExplorer,\n        useClass: PresetHasMethodExplorer,\n        deps: [ExpressionHasMethodExplorer, ObjectHasMethodExplorer]\n    },\n    {provide: ExpressionHasPropertyExplorer, useClass: ExpressionHasPropertyExplorer, deps: []},\n    {\n        provide: HasPropertyExplorer,\n        useClass: HasPropertyExplorer,\n        deps: [Presets, MembersPropertyExplorer, PresetHasPropertyExplorer]\n    },\n    {provide: ObjectHasPropertyExplorer, useClass: ObjectHasPropertyExplorer, deps: []},\n    {\n        provide: PresetHasPropertyExplorer,\n        useClass: PresetHasPropertyExplorer,\n        deps: [ExpressionHasPropertyExplorer, ObjectHasPropertyExplorer]\n    },\n    {\n        provide: InOperatorInteractionExplorer,\n        useClass: InOperatorInteractionExplorer,\n        deps: [Presets, PresetHasInOperatorExplorer]\n    },\n    {provide: PresetHasInOperatorExplorer, useClass: PresetHasInOperatorExplorer, deps: []},\n    {\n        provide: MembersMethodExplorer,\n        useClass: MembersMethodExplorer,\n        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]\n    },\n    {\n        provide: PropertyIsReadOnlyTester,\n        useClass: PropertyIsReadOnlyTester,\n        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]\n    },\n    {\n        provide: MembersPropertyExplorer,\n        useClass: MembersPropertyExplorer,\n        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]\n    },\n    {provide: PropertyDescriptorProvider, useClass: PropertyDescriptorProvider, deps: []},\n    {provide: REFLECT_HAS, useValue: Reflect.has, deps: []},\n];\n","import { IMockOptions } from \"../moq\";\n\n/**\n * @hidden\n */\nexport class MockOptionsBuilder {\n    build<T>(options: IMockOptions<T>) {\n        const target = (() => undefined) as unknown as T;\n        return {target, ...options};\n    }\n}\n\n","import { IMockOptions } from \"../moq\";\nimport { MOCK_OPTIONS } from \"./mock-options.injection-token\";\nimport { MockOptionsBuilder } from \"./mock-options.builder\";\n\n/**\n * @hidden\n */\nexport function mockOptionsProviders<T>(options: IMockOptions<T>) {\n    return [\n        {provide: MockOptionsBuilder, useClass: MockOptionsBuilder, deps: []},\n        {provide: MOCK_OPTIONS, useFactory: builder => builder.build(options), deps: [MockOptionsBuilder]},\n    ];\n}\n","import { ProxyFactory } from \"../interceptors/proxy.factory\";\nimport { IMock, IPresetBuilder, ISequenceVerifier } from \"../moq\";\nimport { Times } from \"../times\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { Verifier } from \"../verification/verifier\";\nimport { PrototypeStorage } from \"../interceptors/prototype.storage\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { Mock } from \"../mock\";\nimport { MOCK } from \"../injector/mock.injection-token\";\nimport { SetupFactory } from \"../presets/setup.factory\";\nimport { InjectionFactory } from \"../injector/injection-factory\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\nimport { Type } from \"../static.injector/type\";\nimport { Injector } from \"../static.injector/injector\";\nimport { EXPRESSION_REFLECTOR, IExpression } from \"../reflector/expression-reflector\";\n\n\n/**\n * The internal core of {@link Mock} class.\n */\nexport class MockCore<T> implements IMock<T> {\n    constructor(\n        public readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n        public readonly tracker: Tracker,\n        private readonly injector: Injector,\n        private readonly reflector: TypeofInjectionToken<typeof EXPRESSION_REFLECTOR>,\n        private readonly interceptor: ProxyFactory<T>,\n        private readonly verifier: Verifier<T>,\n        private readonly prototypeStorage: PrototypeStorage,\n        private readonly mock: TypeofInjectionToken<typeof MOCK>,\n        private readonly setupFactory: SetupFactory<T>) {\n\n    }\n\n    public get name() {\n        return this.options.name;\n    }\n\n    public resolve<S, R = S extends InjectionFactory ? ReturnType<S[\"factory\"]> : S>(token: Type<S> | InjectionToken<S>): R {\n        return this.injector.get(token, null) as unknown as R;\n    }\n\n    public setup<E extends IExpression<T>,\n        R = E extends (...args: any[]) => infer M ? M : any>(expression: E): IPresetBuilder<T, R> {\n        const expressions = this.reflector.reflect(expression);\n        return this.setupFactory.create<R>(expressions);\n    }\n\n    public verify(expression: IExpression<T>, times: Times): IMock<T> {\n        const expressions = this.reflector.reflect(expression);\n        this.verifier.test(expressions, times);\n        return this.mock as IMock<T>;\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock<T> {\n        this.prototypeStorage.set(prototype);\n        return this.mock as IMock<T>;\n    }\n\n    /**\n     * @experimental\n     */\n    public insequence(sequence: ISequenceVerifier, expression: IExpression<T>): IMock<T> {\n        sequence.add(this, expression);\n        return this.mock as IMock<T>;\n    }\n}\n","import { MockCore } from \"./mock-core\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { Tracker } from \"../tracker/tracker\";\nimport { ProxyFactory } from \"../interceptors/proxy.factory\";\nimport { Verifier } from \"../verification/verifier\";\nimport { PrototypeStorage } from \"../interceptors/prototype.storage\";\nimport { MOCK } from \"../injector/mock.injection-token\";\nimport { SetupFactory } from \"../presets/setup.factory\";\nimport { Injector } from \"../static.injector/injector\";\nimport { EXPRESSION_REFLECTOR } from \"../reflector/expression-reflector\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: MockCore, useClass: MockCore, deps: [\n            MOCK_OPTIONS,\n            Tracker,\n            Injector,\n            EXPRESSION_REFLECTOR,\n            ProxyFactory,\n            Verifier,\n            PrototypeStorage,\n            MOCK,\n            SetupFactory\n        ]\n    },\n];\n","import { Expressions } from \"../reflector/expressions\";\nimport { AutoMockOptionsBuilder } from \"./auto-mock-options.builder\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK_CONSTRUCTOR } from \"../injector/mock-constructor.injection-token\";\n\n/**\n * This service is used to create an instance of a Mock for auto mocking feature\n */\nexport class AutoMockFactory {\n    constructor(\n        private readonly ctor: TypeofInjectionToken<typeof MOCK_CONSTRUCTOR>,\n        private readonly optionsBuilder: AutoMockOptionsBuilder) {\n    }\n\n    public create<T>(expression: Expressions<T>) {\n        const options = this.optionsBuilder.create(expression);\n        return this.ctor(options);\n    }\n}\n\n","import { IMock } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @Hidden\n */\nexport const ROOT_MOCK = new InjectionToken<IMock<unknown>>(\"ROOT MOCK\");\n","import { Expressions } from \"../reflector/expressions\";\nimport { IMock } from \"../moq\";\nimport { InjectionFactory } from \"../injector/injection-factory\";\n\n\n/**\n * This service provides access to all auto mocked instances\n */\nexport class AutoMockedStorage implements InjectionFactory {\n    constructor() {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return new Map<Expressions<unknown>, IMock<unknown>>();\n    }\n}\n","import { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { AutoMockNameFormatter } from \"./name-formatters/auto-mock-name.formatter\";\nimport { Expressions } from \"../reflector/expressions\";\nimport { IMockOptions } from \"../moq\";\nimport { AutoMockInjectorConfig } from \"./auto-mock-injector.config\";\n\n/**\n * This class provides configuration for auto mocking mocks\n */\nexport class AutoMockOptionsBuilder {\n    constructor(\n        private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n        private readonly autoMockNameFormatter: AutoMockNameFormatter,\n        private readonly autoMockInjectorConfig: AutoMockInjectorConfig) {\n    }\n\n    public create<T>(expression: Expressions<T>): IMockOptions<T> {\n        return {\n            name: this.autoMockNameFormatter.format(this.options.name, expression),\n            target: this.options.target,\n            injectorConfig: this.autoMockInjectorConfig\n        };\n    }\n}\n","import { Expressions } from \"../../reflector/expressions\";\nimport { FunctionFormatter } from \"../../formatters/function.formatter\";\nimport { PropertyKeyFormatter } from \"../../formatters/property-key.formatter\";\nimport { MethodFormatter } from \"../../formatters/method.formatter\";\nimport { ConstantFormatter } from \"../../formatters/constant.formatter\";\nimport { NamePrefixProvider } from \"./name-prefix.provider\";\nimport {\n    GetPropertyExpression,\n    FunctionExpression,\n    MethodExpression,\n    NewOperatorExpression\n} from \"../../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class AutoMockNameFormatter {\n    constructor(\n        private readonly namePrefixProvider: NamePrefixProvider,\n        private readonly methodFormatter: FunctionFormatter,\n        private readonly propertyKeyFormatter: PropertyKeyFormatter,\n        private readonly namedMethodFormatter: MethodFormatter,\n        private readonly constantFormatter: ConstantFormatter) {\n    }\n\n    public format<T>(name: string | undefined, expression: Expressions<T>): string {\n        const prefix = this.namePrefixProvider.get(name);\n        if (expression instanceof FunctionExpression) {\n            return `${prefix}${this.methodFormatter.format(expression)}`;\n        }\n        if (expression instanceof GetPropertyExpression) {\n            return `${prefix}.${this.propertyKeyFormatter.format(expression.name)}`;\n        }\n        if (expression instanceof MethodExpression) {\n            return `${prefix}.${this.namedMethodFormatter.format(expression)}`;\n        }\n        if (expression instanceof NewOperatorExpression) {\n            return `new ${name}(${this.constantFormatter.format(expression.args)})`;\n        }\n\n        return `${name}[${expression}]`;\n    }\n}\n","import { IInjectorConfig, IMock, IMockOptions } from \"../moq\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { ROOT_MOCK } from \"../injector/root-mock.injection-token\";\n\n/**\n * Provides configuration for an angular based injector that would be used internally for auto mocking feature\n */\nexport class AutoMockInjectorConfig implements IInjectorConfig {\n    constructor(private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n                private readonly mock: IMock<unknown>,\n                private readonly root: IMock<unknown>) {\n\n    }\n\n    get(options: IMockOptions<unknown>, providers: StaticProvider[]): StaticProvider[] {\n        if (this.root) {\n            return this.options.injectorConfig.get(options, providers);\n        }\n        return [\n            ...this.options.injectorConfig.get(options, providers),\n            {provide: ROOT_MOCK, useValue: this.mock, deps: []},\n        ];\n    }\n}\n","/**\n * @hidden\n */\nexport class NamePrefixProvider {\n    public get(name: string | undefined) {\n        return name ? name : \"instance\";\n    }\n}\n","import { IMock, IMockOptions } from \"../moq\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\n/**\n * @Hidden\n */\nexport const MOCK_CONSTRUCTOR = new InjectionToken<(opts: IMockOptions<unknown>) => IMock<unknown>>(\"IMock constructor\");\n","import { Expressions } from \"../../reflector/expressions\";\nimport { ExpressionValidator } from \"./expression.validator\";\n\nexport class ComplexExpressionValidator {\n\n    constructor(private readonly validator: ExpressionValidator) {\n    }\n\n    validate(expressions: Expressions<unknown>[]): { valid: boolean; errors: [Expressions<unknown>, boolean][] } {\n        const errors: [Expressions<unknown>, boolean][] = [];\n        const clone = [...expressions];\n        const last = clone.pop();\n        for (const expression of clone) {\n            errors.push([expression, this.validator.validate(expression)]);\n        }\n        errors.push([last, true]);\n        const isValid = errors.filter(([, valid]) => valid === false).length === 0;\n        return {\n            valid: isValid,\n            errors :  isValid ? [] : errors\n        };\n    }\n}\n","import { Expressions } from \"../../reflector/expressions\";\nimport { ComplexExpressionErrorFormatter } from \"./expression.formatters/complex-expression.error-formatter\";\n\nexport class ExpressionGuardExceptionFactory {\n    constructor(\n        private readonly formatter: ComplexExpressionErrorFormatter) {\n    }\n\n    create(expressions: [Expressions<unknown>, boolean][]): Error {\n        const message = `${this.formatter.format(expressions)} is not a safe expression for auto mocking. `\n        + \" It predicate could not be used, the only exception is the last part.\"\n        + \" Please see https://github.com/dvabuzyarov/moq.ts#auto-mocking for more details.\";\n        return new Error(message);\n    }\n}\n","import {\n    Expressions,\n    FunctionExpression,\n    GetPropertyExpression,\n    InOperatorExpression,\n    MethodExpression,\n    NewOperatorExpression,\n    SetPropertyExpression\n} from \"../../reflector/expressions\";\nimport { FunctionExpressionValidator } from \"./function-expression.validator\";\nimport { GetPropertyExpressionValidator } from \"./get-property-expression.validator\";\nimport { SetPropertyExpressionValidator } from \"./set-property-expression.validator\";\nimport { InstanceMethodExpressionValidator } from \"./instance-method-expression.validator\";\nimport { NewOperatorExpressionValidator } from \"./new-operator-expression.validator\";\nimport { It } from \"../../reflector/expression-predicates\";\nimport { InOperatorExpressionValidator } from \"./in-operator-expression.validator\";\n\nexport class ExpressionValidator {\n\n    constructor(private readonly functionExpressionGuard: FunctionExpressionValidator,\n                private readonly getPropertyExpressionGuard: GetPropertyExpressionValidator,\n                private readonly setPropertyExpressionGuard: SetPropertyExpressionValidator,\n                private readonly inOperatorExpressionGuard: InOperatorExpressionValidator,\n                private readonly instanceMethodExpressionGuard: InstanceMethodExpressionValidator,\n                private readonly newOperatorExpressionGuard: NewOperatorExpressionValidator) {\n    }\n\n    validate(expression: Expressions<unknown>) {\n        switch (expression.constructor) {\n            case FunctionExpression:\n                return this.functionExpressionGuard.validate(expression as FunctionExpression);\n            case GetPropertyExpression:\n                return this.getPropertyExpressionGuard.validate(expression as GetPropertyExpression);\n            case SetPropertyExpression:\n                return this.setPropertyExpressionGuard.validate(expression as SetPropertyExpression);\n            case InOperatorExpression:\n                return this.inOperatorExpressionGuard.validate(expression as InOperatorExpression);\n            case MethodExpression:\n                return this.instanceMethodExpressionGuard.validate(expression as MethodExpression);\n            case NewOperatorExpression:\n                return this.newOperatorExpressionGuard.validate(expression as NewOperatorExpression);\n            case It:\n                return false;\n            default:\n                throw new Error(`Unknown expression type: ${expression.constructor.name}`);\n        }\n    }\n}\n","import { FunctionExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class FunctionExpressionValidator {\n    validate({args}: FunctionExpression) {\n        return args.filter(arg => arg instanceof It).length === 0;\n    }\n}\n","import { GetPropertyExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class GetPropertyExpressionValidator {\n    validate({name}: GetPropertyExpression) {\n        return (name as any instanceof It) === false;\n    }\n}\n","import { SetPropertyExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class SetPropertyExpressionValidator {\n    validate({name, value}: SetPropertyExpression) {\n        return (name as any instanceof It || value instanceof It) === false;\n    }\n}\n","import { InOperatorExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class InOperatorExpressionValidator {\n\n    validate({name}: InOperatorExpression) {\n        return (name as any instanceof It) === false;\n    }\n}\n","import { MethodExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class InstanceMethodExpressionValidator {\n    validate({name, args}: MethodExpression) {\n        return (name as any instanceof It || args.filter(arg => arg instanceof It).length > 0) === false;\n    }\n}\n","import { NewOperatorExpression } from \"../../reflector/expressions\";\nimport { It } from \"../../reflector/expression-predicates\";\n\nexport class NewOperatorExpressionValidator {\n    validate({args}: NewOperatorExpression) {\n        return args.filter(arg => arg instanceof It).length === 0;\n    }\n}\n","import { Expressions } from \"../../../reflector/expressions\";\nimport { TypeofInjectionToken } from \"../../../injector/typeof-injection-token\";\nimport { MOCK_OPTIONS } from \"../../../mock-options/mock-options.injection-token\";\nimport { NamePrefixProvider } from \"../../name-formatters/name-prefix.provider\";\nimport { ExpressionFormatter } from \"./expression.formatter\";\nimport { StringErrorStyler } from \"./string.error-styler\";\n\nexport class ComplexExpressionErrorFormatter {\n    constructor(\n        private readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>,\n        private readonly namePrefixProvider: NamePrefixProvider,\n        private readonly expressionFormatter: ExpressionFormatter,\n        private readonly errorStyler: StringErrorStyler) {\n    }\n\n    public format(expressions: [Expressions<unknown>, boolean][]) {\n        const instance = this.namePrefixProvider.get(this.options.name);\n        let message = instance;\n        for (const [expression, valid] of expressions) {\n            const value = this.expressionFormatter.format(expression, instance);\n            message += valid ? value : this.errorStyler.style(value);\n        }\n\n        return message;\n    }\n}\n","import {\n    Expressions,\n    FunctionExpression,\n    GetPropertyExpression,\n    MethodExpression,\n    NewOperatorExpression\n} from \"../../../reflector/expressions\";\nimport { FunctionFormatter } from \"../../../formatters/function.formatter\";\nimport { PropertyKeyFormatter } from \"../../../formatters/property-key.formatter\";\nimport { MethodFormatter } from \"../../../formatters/method.formatter\";\nimport { ConstantFormatter } from \"../../../formatters/constant.formatter\";\n\nexport class ExpressionFormatter {\n    constructor(\n        private readonly functionFormatter: FunctionFormatter,\n        private readonly propertyKeyFormatter: PropertyKeyFormatter,\n        private readonly instanceMethodFormatter: MethodFormatter,\n        private readonly constantFormatter: ConstantFormatter) {\n    }\n\n    public format(expression: Expressions<unknown>, name: string) {\n        if (expression instanceof FunctionExpression) {\n            return this.functionFormatter.format(expression);\n        }\n        if (expression instanceof GetPropertyExpression) {\n            return `.${this.propertyKeyFormatter.format(expression.name)}`;\n        }\n        if (expression instanceof MethodExpression) {\n            return `.${this.instanceMethodFormatter.format(expression)}`;\n        }\n        if (expression instanceof NewOperatorExpression) {\n            return `new ${name}(${this.constantFormatter.format(expression.args)})`;\n        }\n\n        return `[${expression}]`;\n    }\n}\n","export class StringErrorStyler {\n    public style(value: string) {\n        return `\\u001B[4m${value}\\u001B[24m`;\n    }\n}\n","import { ComplexExpressionErrorFormatter } from \"./complex-expression.error-formatter\";\nimport { MOCK_OPTIONS } from \"../../../mock-options/mock-options.injection-token\";\nimport { NamePrefixProvider } from \"../../name-formatters/name-prefix.provider\";\nimport { ExpressionFormatter } from \"./expression.formatter\";\nimport { FunctionFormatter } from \"../../../formatters/function.formatter\";\nimport { PropertyKeyFormatter } from \"../../../formatters/property-key.formatter\";\nimport { MethodFormatter } from \"../../../formatters/method.formatter\";\nimport { ConstantFormatter } from \"../../../formatters/constant.formatter\";\nimport { StringErrorStyler } from \"./string.error-styler\";\n\nexport default [\n    {\n        provide: ComplexExpressionErrorFormatter, useClass: ComplexExpressionErrorFormatter, deps: [\n            MOCK_OPTIONS,\n            NamePrefixProvider,\n            ExpressionFormatter,\n            StringErrorStyler\n        ]\n    },\n    {\n        provide: ExpressionFormatter,\n        useClass: ExpressionFormatter,\n        deps: [FunctionFormatter, PropertyKeyFormatter, MethodFormatter, ConstantFormatter]\n    },\n    {provide: StringErrorStyler, useClass: StringErrorStyler, deps: []},\n];\n","import { ComplexExpressionGuard } from \"./complex-expression.guard\";\nimport { ComplexExpressionValidator } from \"./complex-expression.validator\";\nimport { ExpressionGuardExceptionFactory } from \"./expression-guard-exception.factory\";\nimport { ExpressionValidator } from \"./expression.validator\";\nimport { FunctionExpressionValidator } from \"./function-expression.validator\";\nimport { GetPropertyExpressionValidator } from \"./get-property-expression.validator\";\nimport { SetPropertyExpressionValidator } from \"./set-property-expression.validator\";\nimport { InOperatorExpressionValidator } from \"./in-operator-expression.validator\";\nimport { InstanceMethodExpressionValidator } from \"./instance-method-expression.validator\";\nimport { NewOperatorExpressionValidator } from \"./new-operator-expression.validator\";\nimport { ComplexExpressionErrorFormatter } from \"./expression.formatters/complex-expression.error-formatter\";\nimport expressionFormatters from \"./expression.formatters\";\n\n/**\n * @hidden\n */\nexport default [\n    {\n        provide: ComplexExpressionGuard,\n        useClass: ComplexExpressionGuard,\n        deps: [ComplexExpressionValidator, ExpressionGuardExceptionFactory]\n    },\n    {provide: ComplexExpressionValidator, useClass: ComplexExpressionValidator, deps: [ExpressionValidator]},\n    {\n        provide: ExpressionGuardExceptionFactory,\n        useClass: ExpressionGuardExceptionFactory,\n        deps: [ComplexExpressionErrorFormatter]\n    },\n    {\n        provide: ExpressionValidator, useClass: ExpressionValidator, deps: [\n            FunctionExpressionValidator,\n            GetPropertyExpressionValidator,\n            SetPropertyExpressionValidator,\n            InOperatorExpressionValidator,\n            InstanceMethodExpressionValidator,\n            NewOperatorExpressionValidator\n        ]\n    },\n    {provide: FunctionExpressionValidator, useClass: FunctionExpressionValidator, deps: []},\n    {provide: GetPropertyExpressionValidator, useClass: GetPropertyExpressionValidator, deps: []},\n    {provide: SetPropertyExpressionValidator, useClass: SetPropertyExpressionValidator, deps: []},\n    {provide: InOperatorExpressionValidator, useClass: InOperatorExpressionValidator, deps: []},\n    {provide: InstanceMethodExpressionValidator, useClass: InstanceMethodExpressionValidator, deps: []},\n    {provide: NewOperatorExpressionValidator, useClass: NewOperatorExpressionValidator, deps: []},\n    ...expressionFormatters\n];\n","import { MOCK } from \"../injector/mock.injection-token\";\nimport { AutoMockFactory } from \"./auto-mock.factory\";\nimport { MOCK_OPTIONS } from \"../mock-options/mock-options.injection-token\";\nimport { RootMockProvider } from \"./root-mock.provider\";\nimport { Optional } from \"../static.injector/metadata\";\nimport { ROOT_MOCK } from \"../injector/root-mock.injection-token\";\nimport { AutoMockedStorage } from \"./auto-mock.storage\";\nimport { AutoMockProvider } from \"./auto-mock.provider\";\nimport { AutoMockOptionsBuilder } from \"./auto-mock-options.builder\";\nimport { AutoMockNameFormatter } from \"./name-formatters/auto-mock-name.formatter\";\nimport { AutoMockInjectorConfig } from \"./auto-mock-injector.config\";\nimport { NamePrefixProvider } from \"./name-formatters/name-prefix.provider\";\nimport { FunctionFormatter } from \"../formatters/function.formatter\";\nimport { PropertyKeyFormatter } from \"../formatters/property-key.formatter\";\nimport { MethodFormatter } from \"../formatters/method.formatter\";\nimport { ConstantFormatter } from \"../formatters/constant.formatter\";\nimport { MOCK_CONSTRUCTOR } from \"../injector/mock-constructor.injection-token\";\nimport { ExpressionEqualityComparer } from \"../expression.equality-comparers/expression.equality-comparer\";\nimport { ComplexExpressionValidator } from \"./expression.guards/complex-expression.validator\";\nimport expressionGuards from \"./expression.guards\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: NamePrefixProvider, useClass: NamePrefixProvider, deps: []},\n    {provide: AutoMockedStorage, useClass: AutoMockedStorage, deps: []},\n    {\n        provide: AutoMockNameFormatter,\n        useClass: AutoMockNameFormatter,\n        deps: [NamePrefixProvider, FunctionFormatter, PropertyKeyFormatter, MethodFormatter, ConstantFormatter]\n    },\n    {\n        provide: AutoMockOptionsBuilder,\n        useClass: AutoMockOptionsBuilder,\n        deps: [MOCK_OPTIONS, AutoMockNameFormatter, AutoMockInjectorConfig]\n    },\n    {\n        provide: AutoMockInjectorConfig,\n        useClass: AutoMockInjectorConfig,\n        deps: [MOCK_OPTIONS, MOCK, [new Optional(), ROOT_MOCK]]\n    },\n    {provide: AutoMockFactory, useClass: AutoMockFactory, deps: [MOCK_CONSTRUCTOR, AutoMockOptionsBuilder]},\n    {provide: RootMockProvider, useClass: RootMockProvider, deps: [MOCK, [new Optional(), ROOT_MOCK]]},\n    {\n        provide: AutoMockProvider,\n        useClass: AutoMockProvider,\n        deps: [AutoMockedStorage, ExpressionEqualityComparer, AutoMockFactory]\n    },\n    {provide: ComplexExpressionValidator, useClass: ComplexExpressionValidator, deps: []},\n    ...expressionGuards\n];\n","import { ItEqualityComparer } from \"./it.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class ConstantEqualityComparer {\n    constructor(private readonly itEqualityComparer: ItEqualityComparer) {\n    }\n\n    public equals(left: any, right: any): boolean {\n        const actual = this.itEqualityComparer.equals(left, right);\n        return actual === undefined ? left === right : actual;\n    }\n}\n\n","import { ConstantEqualityComparer } from \"./constant.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class ArgumentsEqualityComparer {\n    constructor(private readonly constantMatcher: ConstantEqualityComparer) {\n\n    }\n\n    public equals(left: any[], right: any[]): boolean {\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        for (let i = 0; i < left.length; i++) {\n            const lvalue = left[i];\n            const rvalue = right[i];\n            if (this.constantMatcher.equals(lvalue, rvalue) === false) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","import { GetPropertyExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class GetPropertyEqualityComparer {\n\n    public equals(left: GetPropertyExpression, right: GetPropertyExpression): boolean {\n        return left.name === right.name;\n    }\n}\n","import { InOperatorExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class InOperatorEqualityComparer {\n    public equals(left: InOperatorExpression, right: InOperatorExpression): boolean {\n        return left.name === right.name;\n    }\n}\n","import { ArgumentsEqualityComparer } from \"./arguments.equality-comparer\";\nimport { MethodExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class InstanceMethodEqualityComparer {\n\n    constructor(\n        private readonly argumentsMatcher: ArgumentsEqualityComparer) {\n\n    }\n\n    public equals(left: MethodExpression, right: MethodExpression): boolean {\n        return left.name === right.name && this.argumentsMatcher.equals(left.args, right.args);\n    }\n}\n","import { It } from \"../reflector/expression-predicates\";\n\n/**\n * @hidden\n */\nexport class ItEqualityComparer {\n\n    public equals<T>(left: any | It<T>, right: any | It<T>): boolean {\n        if (left instanceof It && right instanceof It) {\n            return left === right || left.predicate === right.predicate;\n        }\n        if (left instanceof It) {\n            return left.test(right);\n        }\n\n        if (right instanceof It) {\n            return right.test(left);\n        }\n\n        return undefined;\n    }\n}\n","import { ArgumentsEqualityComparer } from \"./arguments.equality-comparer\";\nimport { FunctionExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class MethodEqualityComparer {\n\n    constructor(private readonly argumentsMatcher: ArgumentsEqualityComparer) {\n\n    }\n\n    public equals(left: FunctionExpression, right: FunctionExpression): boolean {\n        return this.argumentsMatcher.equals(left.args, right.args);\n    }\n}\n","import { ArgumentsEqualityComparer } from \"./arguments.equality-comparer\";\nimport { NewOperatorExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class NewOperatorEqualityComparer {\n\n    constructor(private readonly argumentsMatcher: ArgumentsEqualityComparer) {\n\n    }\n\n    public equals(left: NewOperatorExpression, right: NewOperatorExpression): boolean {\n        return this.argumentsMatcher.equals(left.args, right.args);\n    }\n}\n","import { ConstantEqualityComparer } from \"./constant.equality-comparer\";\nimport { SetPropertyExpression } from \"../reflector/expressions\";\n\n/**\n * @hidden\n */\nexport class SetPropertyEqualityComparer {\n\n    constructor(private readonly constantMatcher: ConstantEqualityComparer) {\n\n    }\n\n    public equals(left: SetPropertyExpression, right: SetPropertyExpression): boolean {\n        return left.name === right.name && this.constantMatcher.equals(left.value, right.value);\n    }\n}\n","import { ConstantEqualityComparer } from \"./constant.equality-comparer\";\nimport { ArgumentsEqualityComparer } from \"./arguments.equality-comparer\";\nimport { GetPropertyEqualityComparer } from \"./get-property.equality-comparer\";\nimport { InOperatorEqualityComparer } from \"./in-operator.equality-comparer\";\nimport { InstanceMethodEqualityComparer } from \"./instance-method.equality-comparer\";\nimport { ItEqualityComparer } from \"./it.equality-comparer\";\nimport { MethodEqualityComparer } from \"./method.equality-comparer\";\nimport { NewOperatorEqualityComparer } from \"./new-operator.equality-comparer\";\nimport { SetPropertyEqualityComparer } from \"./set-property.equality-comparer\";\nimport { ExpressionEqualityComparer } from \"./expression.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: ConstantEqualityComparer, useClass: ConstantEqualityComparer, deps: [ItEqualityComparer]},\n    {provide: ArgumentsEqualityComparer, useClass: ArgumentsEqualityComparer, deps: [ConstantEqualityComparer]},\n    {provide: GetPropertyEqualityComparer, useClass: GetPropertyEqualityComparer, deps: []},\n    {provide: InOperatorEqualityComparer, useClass: InOperatorEqualityComparer, deps: []},\n    {\n        provide: InstanceMethodEqualityComparer,\n        useClass: InstanceMethodEqualityComparer,\n        deps: [ArgumentsEqualityComparer]\n    },\n    {provide: ItEqualityComparer, useClass: ItEqualityComparer, deps: []},\n    {provide: MethodEqualityComparer, useClass: MethodEqualityComparer, deps: [ArgumentsEqualityComparer]},\n    {provide: NewOperatorEqualityComparer, useClass: NewOperatorEqualityComparer, deps: [ArgumentsEqualityComparer]},\n    {provide: SetPropertyEqualityComparer, useClass: SetPropertyEqualityComparer, deps: [ConstantEqualityComparer]},\n    {\n        provide: ExpressionEqualityComparer,\n        useClass: ExpressionEqualityComparer,\n        deps: [\n            GetPropertyEqualityComparer,\n            SetPropertyEqualityComparer,\n            MethodEqualityComparer,\n            InstanceMethodEqualityComparer,\n            InOperatorEqualityComparer,\n            NewOperatorEqualityComparer,\n            ItEqualityComparer\n        ]\n    },\n];\n\n","import { IInjectorConfig, IMockOptions } from \"../moq\";\nimport trackerProviders from \"../tracker\";\nimport reflectorProviders from \"../reflector\";\nimport presetsProviders from \"../presets\";\nimport verificationProviders from \"../verification\";\nimport interceptorsProviders from \"../interceptors\";\nimport playablesProviders from \"../playables\";\nimport interactionPlayersProviders from \"../interaction-players\";\nimport formattersProviders from \"../formatters\";\nimport typeExplorersProviders from \"../explorers\";\nimport { mockOptionsProviders } from \"../mock-options/mock-options.providers\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\nimport mockCoreProviders from \"../core\";\nimport autoMockingProviders from \"../auto-mocking\";\nimport expressionEqualityComparersProviders from \"../expression.equality-comparers\";\n\n/**\n * Provides the default configuration for an angular based injector that would be used internally by {@link Mock} instance.\n */\nexport class DefaultInjectorConfig implements IInjectorConfig {\n    constructor(private readonly providers: StaticProvider[] = []) {\n    }\n\n    get(options: IMockOptions<unknown>, providers: StaticProvider[]): StaticProvider[] {\n        return [\n            ...providers,\n            ...mockOptionsProviders(options),\n            ...trackerProviders,\n            ...reflectorProviders,\n            ...presetsProviders,\n            ...autoMockingProviders,\n            ...verificationProviders,\n            ...interceptorsProviders,\n            ...playablesProviders,\n            ...interactionPlayersProviders,\n            ...formattersProviders,\n            ...expressionEqualityComparersProviders,\n            ...typeExplorersProviders,\n            ...mockCoreProviders,\n            ...this.providers,\n        ];\n    }\n}\n","import { IMock, IMockOptions, IPresetBuilder, ISequenceVerifier } from \"./moq\";\nimport { Times } from \"./times\";\nimport { injectorFactory } from \"./injector/injector.factory\";\nimport { MOCK } from \"./injector/mock.injection-token\";\nimport { DefaultInjectorConfig } from \"./injector/default-injector.config\";\nimport { MockCore } from \"./core/mock-core\";\nimport { InjectionFactory, TypeOfInjectionFactory } from \"./injector/injection-factory\";\nimport { Type } from \"./static.injector/type\";\nimport { InjectionToken } from \"./static.injector/injection_token\";\nimport { MOCK_CONSTRUCTOR } from \"./injector/mock-constructor.injection-token\";\nimport { IExpression } from \"./reflector/expression-reflector\";\n\n/**\n * The default implementation of {@link IMock} interface.\n */\nexport class Mock<T> implements IMock<T> {\n    private static Options: IMockOptions<unknown> = undefined;\n    private readonly core: MockCore<T>;\n\n    constructor(options: IMockOptions<T> = {}) {\n        const preOptions = {...Mock.options, ...options} as IMockOptions<T>;\n        const providers = [\n            {provide: MOCK, useValue: this, deps: []},\n            {provide: MOCK_CONSTRUCTOR, useValue: (opts: IMockOptions<unknown>) => new Mock(opts), deps: []},\n        ];\n        const injector = injectorFactory(preOptions, ...providers);\n        this.core = injector.get(MockCore);\n    }\n\n    /**\n     * The default mock options that would applied to all instantiating Mock objects.\n     * By default it sets {@link IMockOptions.target} as a function, {@link IMockOptions.injectorConfig} as\n     * instance of {@link DefaultInjectorConfig} and {@link IMockOptions.name} as undefined.\n     * If an options are passed as constructor parameter {@link Mock.constructor} they will override the default options.\n     */\n    static get options() {\n        if (Mock.Options === undefined) {\n            Mock.Options = {\n                target: () => undefined,\n                injectorConfig: new DefaultInjectorConfig()\n            };\n        }\n        return Mock.Options;\n    }\n\n    /**\n     * The default mock options that would applied to all instantiating Mock objects.\n     * If an options are passed as constructor parameter they will override the default options.\n     */\n    static set options(options: IMockOptions<unknown>) {\n        Mock.Options = options;\n    }\n\n    public get options() {\n        return this.core.options;\n    }\n\n    public get tracker() {\n        return this.core.tracker;\n    }\n\n    public get name() {\n        return this.core.name;\n    }\n\n    public setup<E extends IExpression<T>,\n        R = E extends (...args: any[]) => infer M ? M : any>(expression: E): IPresetBuilder<T, R> {\n        return this.core.setup(expression);\n    }\n\n    public verify(expression: IExpression<T>, times = Times.Once()): IMock<T> {\n        return this.core.verify(expression, times);\n    }\n\n    public object(): T {\n        return this.core.object();\n    }\n\n    public prototypeof(prototype?: any): IMock<T> {\n        return this.core.prototypeof(prototype);\n    }\n\n    /**\n     * @experimental\n     */\n    public insequence(sequence: ISequenceVerifier, expression: IExpression<T>): IMock<T> {\n        return this.core.insequence(sequence, expression);\n    }\n\n    public resolve<S, R = S extends InjectionFactory ? TypeOfInjectionFactory<S> : S>(token: Type<S> | InjectionToken<S>): R {\n        return this.core.resolve(token);\n    }\n}\n","/**\n * @hidden\n */\nexport class CommonTypeProvider {\n    public ofType(left: unknown, right: unknown) {\n        return typeof left && typeof right;\n    }\n}\n\n","import { IObjectMatcher } from \"./object-matcher.type\";\n\n/**\n * Matches Date objects\n */\nexport class DateMatcher implements IObjectMatcher {\n    public matched<T = Date>(left: T, right: T): boolean {\n        if (left instanceof Date && right instanceof Date) {\n            return left.valueOf() === right.valueOf();\n        }\n        return undefined;\n    }\n}\n\n","import { EqualMatcher } from \"./equal.matcher\";\nimport { ConstantEqualityComparer } from \"../expression.equality-comparers/constant.equality-comparer\";\nimport { ItEqualityComparer } from \"../expression.equality-comparers/it.equality-comparer\";\n\n/**\n * @hidden\n */\nexport class EqualConstantMatcher implements Readonly<ConstantEqualityComparer> {\n    constructor(\n        private readonly itEqualityComparer: ItEqualityComparer,\n        private readonly equalMatcher: EqualMatcher) {\n    }\n\n    equals(left: any, right: any): boolean {\n        const actual = this.itEqualityComparer.equals(left, right);\n        return actual === undefined ? this.equalMatcher.matched(left, right) : actual;\n    }\n}\n\n","import { PrimitiveMatcher } from \"./primitive.matcher\";\nimport { TypesMatcher } from \"./types.matcher\";\nimport { CommonTypeProvider } from \"./common-type.provider\";\nimport { ObjectMatcher } from \"./object.matcher\";\nimport { FunctionMatcher } from \"./function.matcher\";\n\n/**\n * @hidden\n */\nexport class EqualMatcher {\n\n    constructor(\n        private readonly typesMatcher: TypesMatcher,\n        private readonly commonTypeProvider: CommonTypeProvider,\n        private readonly primitiveMatcher: PrimitiveMatcher,\n        private readonly objectMatcher: ObjectMatcher,\n        private readonly functionMatcher: FunctionMatcher) {\n    }\n\n    public matched(left: any, right: any): boolean {\n        if (this.typesMatcher.matched(left, right) === false) {\n            return false;\n        }\n\n        switch (this.commonTypeProvider.ofType(left, right)) {\n            case \"undefined\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"object\":\n                return this.objectMatcher.matched(left, right);\n            case \"boolean\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"number\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"string\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"function\":\n                return this.functionMatcher.matched(left, right);\n            case \"symbol\":\n                return this.primitiveMatcher.matched(left, right);\n            case \"bigint\":\n                return this.primitiveMatcher.matched(left, right);\n        }\n    }\n}\n\n","/**\n * @hidden\n */\nexport class FunctionMatcher {\n\n    public matched<T extends (...args) => unknown>(left: T, right: T): boolean {\n        return left === right;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class TypesMatcher {\n\n    public matched(left: unknown, right: unknown): boolean {\n        return typeof left === typeof right;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class PrimitiveMatcher {\n\n    public matched<T extends (string | number | bigint | boolean | symbol)>(left: T, right: T): boolean {\n        return left === right;\n    }\n}\n\n","import { TypeofInjectionToken } from \"../injector/typeof-injection-token\";\nimport { OBJECT_MATCHERS } from \"./object-matchers.injection-token\";\n\n/**\n * @hidden\n */\nexport class ObjectMatcher {\n\n    constructor(\n        private readonly matchers: TypeofInjectionToken<typeof OBJECT_MATCHERS>) {\n    }\n\n    public matched<T extends Record<string, unknown>>(left: T, right: T): boolean {\n        if (left === null && right === null) return true;\n        if (left === right) return true;\n        for (const matcher of this.matchers) {\n            const matched = matcher.matched(left, right);\n            if (matched === undefined) {\n                continue;\n            }\n            return matched;\n        }\n\n        return false;\n    }\n}\n\n","/**\n * @hidden\n */\nexport class IterableTester {\n\n    public verify(left: unknown, right: unknown) {\n        return typeof left[Symbol.iterator] === \"function\" && typeof right[Symbol.iterator] === \"function\";\n    }\n}\n","import { IterableTester } from \"./iterable.tester\";\nimport { IObjectMatcher } from \"./object-matcher.type\";\nimport { Injector } from \"../static.injector/injector\";\nimport { ConstantEqualityComparer } from \"../expression.equality-comparers/constant.equality-comparer\";\n\n/**\n * Matches objects that support Iterable protocol\n */\nexport class IteratorMatcher implements IObjectMatcher {\n\n    constructor(\n        private readonly injector: Injector,\n        private readonly iterableTester: IterableTester) {\n    }\n\n    /*eslint-disable-next-line @typescript-eslint/ban-types*/\n    public matched<T extends object>(left: T, right: T): boolean {\n        if (this.iterableTester.verify(left, right) === true) {\n            const leftIterator = [...left[Symbol.iterator]()];\n            const rightIterator = [...right[Symbol.iterator]()];\n            if (leftIterator.length !== rightIterator.length) return false;\n\n            const constantMatcher = this.injector.get(ConstantEqualityComparer);\n            for (let i = 0; i < leftIterator.length; i++) {\n                const leftValue = leftIterator[i];\n                const rightValue = rightIterator[i];\n                if (constantMatcher.equals(leftValue, rightValue) === false) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return undefined;\n    }\n}\n\n","import { IObjectMatcher } from \"./object-matcher.type\";\nimport { InjectionToken } from \"../static.injector/injection_token\";\n\nexport const OBJECT_MATCHERS = new InjectionToken<IObjectMatcher[]>(\"OBJECT_MATCHERS\");\n","import { ObjectMapProvider } from \"./object-map.provider\";\nimport { IObjectMatcher } from \"./object-matcher.type\";\nimport { MapMatcher } from \"./map.matcher\";\n\n/**\n * Matches objects as POJO\n */\nexport class POJOMatcher implements IObjectMatcher {\n    constructor(\n        private readonly mapMatcher: MapMatcher,\n        private readonly objectMapProvider: ObjectMapProvider) {\n    }\n\n    /*eslint-disable-next-line @typescript-eslint/ban-types*/\n    public matched<T extends object>(left: T, right: T): boolean {\n        const leftProps = this.objectMapProvider.get(left);\n        const rightProps = this.objectMapProvider.get(right);\n        return this.mapMatcher.matched(leftProps, rightProps);\n    }\n}\n","/**\n * @hidden\n */\nexport class ObjectMapProvider {\n    /*eslint-disable-next-line @typescript-eslint/ban-types*/\n    get(object: object) {\n        const props = this.getProps(object, []);\n        const keys = [...new Set<PropertyKey>(props)];\n        const map = new Map<PropertyKey, any>();\n        for (const key of keys) {\n            map.set(key, object[key]);\n        }\n\n        return map;\n    }\n\n    private getProps(object, props: PropertyKey[]): PropertyKey[] {\n        if (object === null) return props;\n        if (object === Object.prototype) return props;\n        props = [...props, ...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];\n        return this.getProps(Object.getPrototypeOf(object), props);\n    }\n}\n\n","import { IObjectMatcher } from \"./object-matcher.type\";\nimport { Injector } from \"../static.injector/injector\";\nimport { ConstantEqualityComparer } from \"../expression.equality-comparers/constant.equality-comparer\";\n\n/**\n * Matches Map objects\n */\nexport class MapMatcher implements IObjectMatcher {\n    constructor(private readonly injector: Injector) {\n    }\n\n    public matched<T = Map<unknown, unknown>>(left: T, right: T): boolean {\n        if (left instanceof Map && right instanceof Map) {\n            if (left.size !== right.size) return false;\n            const constantMatcher = this.injector.get(ConstantEqualityComparer);\n            for (const [key, value] of left) {\n                if (right.has(key) === false) return false;\n                if (constantMatcher.equals(value, right.get(key)) === false) return false;\n            }\n            return true;\n        }\n        return undefined;\n    }\n}\n\n","import { EqualMatcher } from \"./equal.matcher\";\nimport { EqualConstantMatcher } from \"./equal-constant.matcher\";\nimport { CommonTypeProvider } from \"./common-type.provider\";\nimport { TypesMatcher } from \"./types.matcher\";\nimport { PrimitiveMatcher } from \"./primitive.matcher\";\nimport { ObjectMatcher } from \"./object.matcher\";\nimport { FunctionMatcher } from \"./function.matcher\";\nimport { IterableTester } from \"./iterable.tester\";\nimport { IteratorMatcher } from \"./iterator.matcher\";\nimport { OBJECT_MATCHERS } from \"./object-matchers.injection-token\";\nimport { POJOMatcher } from \"./pojo.matcher\";\nimport { ObjectMapProvider } from \"./object-map.provider\";\nimport { MapMatcher } from \"./map.matcher\";\nimport { Injector } from \"../static.injector/injector\";\nimport { ConstantEqualityComparer } from \"../expression.equality-comparers/constant.equality-comparer\";\nimport { ItEqualityComparer } from \"../expression.equality-comparers/it.equality-comparer\";\n\n/**\n * @hidden\n */\nexport default [\n    {provide: ConstantEqualityComparer, useExisting: EqualConstantMatcher},\n    {provide: EqualConstantMatcher, useClass: EqualConstantMatcher, deps: [ItEqualityComparer, EqualMatcher]},\n    {provide: CommonTypeProvider, useClass: CommonTypeProvider, deps: []},\n    {\n        provide: EqualMatcher,\n        useClass: EqualMatcher,\n        deps: [\n            TypesMatcher,\n            CommonTypeProvider,\n            PrimitiveMatcher,\n            ObjectMatcher,\n            FunctionMatcher\n        ]\n    },\n    {provide: FunctionMatcher, useClass: FunctionMatcher, deps: []},\n    {provide: IterableTester, useClass: IterableTester, deps: []},\n    {\n        provide: IteratorMatcher,\n        useClass: IteratorMatcher,\n        deps: [\n            Injector,\n            IterableTester\n        ]\n    },\n    {provide: ObjectMatcher, useClass: ObjectMatcher, deps: [OBJECT_MATCHERS]},\n    {provide: POJOMatcher, useClass: POJOMatcher, deps: [MapMatcher, ObjectMapProvider]},\n    {provide: PrimitiveMatcher, useClass: PrimitiveMatcher, deps: []},\n    {provide: ObjectMapProvider, useClass: ObjectMapProvider, deps: []},\n    {provide: TypesMatcher, useClass: TypesMatcher, deps: []},\n    {provide: MapMatcher, useClass: MapMatcher, deps: [Injector]},\n];\n","import { IMockOptions } from \"../moq\";\nimport equalMatchersProviders from \"../equal-matchers\";\nimport { OBJECT_MATCHERS } from \"../equal-matchers/object-matchers.injection-token\";\nimport { DateMatcher } from \"../equal-matchers/date.matcher\";\nimport { MapMatcher } from \"../equal-matchers/map.matcher\";\nimport { IteratorMatcher } from \"../equal-matchers/iterator.matcher\";\nimport { POJOMatcher } from \"../equal-matchers/pojo.matcher\";\nimport { DefaultInjectorConfig } from \"./default-injector.config\";\nimport { StaticProvider } from \"../static.injector/interface/provider\";\n\n/**\n * Provides the configuration for Angular based injector that would use equal logic for matching values.\n * By default, all values are matched with\n * [Equality comparisons and sameness](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n * that is limited in matching objects. On the other hand developers are using so called \"deep equal comparison\" approach,\n * where objects are matched by its properties and values. This configuration changes the way how expressions are matched\n * and introduce deep equal comparison logic as well as an extension point for custom matchers.\n *\n * ```typescript\n *  import { EqualMatchingInjectorConfig, Mock } from \"moq.ts\";\n *\n *  const mock = new Mock<(args: number[]) => number>()\n *  .setup(instance => instance([2, 1]))\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object([2, 1]);\n *\n *  // since the default comparisons logic sees [2, 1] and [2, 1] as different objects the provided setup would not work\n *  expect(actual).toBe(undefined);\n *  ```\n *  and compare with\n *  ```typescript\n *  import { EqualMatchingInjectorConfig, Mock } from \"moq.ts\";\n *\n *  const mock = new Mock<(args: number[]) => number>({injectorConfig: new EqualMatchingInjectorConfig()})\n *  .setup(instance => instance([2, 1]))\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object([2, 1]);\n *\n *  expect(actual).toBe(2);\n *  ```\n *  Internally the equal comparision logic implemented as a collection of object matchers that implement {@link IObjectMatcher} interface.\n *\n *  Matchers with the most specific logic should come first in the collection and if they are not able to match the objects\n *  then more general matchers would be invoked.\n *\n *  The library comes with the following matchers:\n *  0. Custom matchers\n *  1. DateMatcher - matches [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) objects\n *  2. MapMatcher - matches [Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) objects\n *  3. IteratorMatcher - matches objects that supports\n *  [Iterator protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n *  4. POJOMatcher - as the last resort matches objects as [POJO](https://en.wikipedia.org/wiki/Plain_old_Java_object) objects.\n *\n *  if you need a custom matcher it will come at index 1. Here is an example of a custom matcher that matches Moment and Date objects.\n *  ```typescript\n *  import { EqualMatchingInjectorConfig, IObjectMatcher, Mock, OBJECT_MATCHERS } from \"moq.ts\";\n *  import { isMoment, utc } from \"moment\";\n *\n *  class MomentDateMatcher implements IObjectMatcher {\n *     matched<T extends object>(left: T, right: T): boolean | undefined {\n *         if (left instanceof Date && isMoment(right)) {\n *             return left.valueOf() === right.valueOf();\n *         }\n *         return undefined;\n *     }\n * }\n *\n *  const moment = utc(1);\n *  const injectorConfig = new EqualMatchingInjectorConfig([{\n *     provide: OBJECT_MATCHERS,\n *     useClass: MomentDateMatcher,\n *     multi: true,\n *     deps: []\n * }]);\n *\n *  const mock = new Mock<(args: any) => number>({injectorConfig})\n *  .setup(instance => instance(moment))\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object(new Date(1));\n *\n *  expect(actual).toBe(2);\n *  ```\n *  The matching logic of EqualMatchingInjectorConfig supports {@link It}.\n *  So you can do a partial comparision.\n *  ```typescript\n *  import { EqualMatchingInjectorConfig, It, Mock } from \"moq.ts\";\n *\n *  const func = () => undefined;\n *\n *  const injectorConfig = new EqualMatchingInjectorConfig();\n *  const mock = new Mock<(args: any) => number>({injectorConfig})\n *  .setup(instance => instance({func: It.IsAny()})) // <-- func property will be matched with It delegate\n *  .returns(2);\n *\n *  const object = mock.object();\n *\n *  const actual = object({func});\n *\n *  expect(actual).toBe(2);\n *  ```\n */\nexport class EqualMatchingInjectorConfig extends DefaultInjectorConfig {\n    constructor(private matchers: StaticProvider[] = [],\n                providers: StaticProvider[] = []) {\n        super(providers);\n    }\n\n    get(options: IMockOptions<unknown>, providers: StaticProvider[]): StaticProvider[] {\n        return [\n            ...super.get(options, providers),\n            ...equalMatchersProviders,\n            ...this.matchers,\n            {provide: OBJECT_MATCHERS, useClass: DateMatcher, multi: true, deps: []},\n            {provide: OBJECT_MATCHERS, useExisting: MapMatcher, multi: true, deps: []},\n            {provide: OBJECT_MATCHERS, useExisting: IteratorMatcher, multi: true, deps: []},\n            {provide: OBJECT_MATCHERS, useExisting: POJOMatcher, multi: true, deps: []},\n        ];\n    }\n}\n","import { InjectionFactory, TypeOfInjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable, PromisedType } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { MimicsPreset } from \"../presets/mimics.preset\";\nimport { RejectedPromiseFactory } from \"../rejected-promise.factory\";\n\n/**\n * @Hidden\n */\nexport class MimicsRejectedAsyncPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>,\n                private readonly rejectedPromise: TypeOfInjectionFactory<RejectedPromiseFactory>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, value: PromisedType<TValue>) => {\n            const preset = new MimicsPreset(playable, target, this.rejectedPromise(value));\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { InjectionFactory, TypeOfInjectionFactory } from \"../../injector/injection-factory\";\nimport { IMock, IPlayable, PromisedType } from \"../../moq\";\nimport { Presets } from \"../presets\";\nimport { Expressions } from \"../../reflector/expressions\";\nimport { ResolvedPromiseFactory } from \"../resolved-promise.factory\";\nimport { ReturnsPreset } from \"../presets/returns.preset\";\nimport { MimicsPreset } from \"../presets/mimics.preset\";\n\n/**\n * @Hidden\n */\nexport class MimicsResolvedAsyncPresetFactory<T, TValue = any> implements InjectionFactory {\n    constructor(private readonly rootMock: IMock<T>,\n                private readonly presets: Presets<T>,\n                private readonly resolvedPromise: TypeOfInjectionFactory<ResolvedPromiseFactory>) {\n        return this.factory() as any;\n    }\n\n    factory() {\n        return (target: Expressions<T>, playable: IPlayable, value: PromisedType<TValue>) => {\n            const preset = new MimicsPreset(playable, target, this.resolvedPromise(value));\n            this.presets.add(preset);\n            return this.rootMock;\n        };\n    }\n}\n","import { Injector } from \"../static.injector/injector\";\nimport { TypeOfInjectionFactory } from \"../injector/injection-factory\";\nimport { MethodReflectorTrap } from \"./traps/method.reflector-trap\";\n\nexport class MethodReflectingProxyFactory {\n    constructor(private readonly injector: Injector) {\n    }\n\n    create() {\n        const apply = this.injector.get(MethodReflectorTrap) as unknown as TypeOfInjectionFactory<MethodReflectorTrap>;\n        const options = {apply};\n        const reflector = function () {\n            return undefined;\n        };\n        return new Proxy(reflector, options);\n    }\n}\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport const Type = Function;\n\n/**\n * @description\n *\n * Represents an abstract class `T`, if applied to a concrete class it would stop being\n * instantiatable.\n *\n * @publicApi\n */\nexport interface AbstractType<T> extends Function {\n    prototype: T;\n}\n\nexport type Type<T> = new(...args: any[]) => T;\n","/* eslint-disable */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { Type } from \"../type\";\n\n/**\n * Configures the `Injector` to return a value for a token.\n * Base for `ValueProvider` decorator.\n *\n * @publicApi\n */\nexport interface ValueSansProvider {\n    /**\n     * The value to inject.\n     */\n    useValue: any;\n}\n\n/**\n * Configures the `Injector` to return a value for a token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ValueProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ValueProvider extends ValueSansProvider {\n    /**\n     * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n     */\n    provide: any;\n\n    /**\n     * When true, injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n * Base for `StaticClassProvider` decorator.\n *\n * @publicApi\n */\nexport interface StaticClassSansProvider {\n    /**\n     * An optional class to instantiate for the `token`. By default, the `provide`\n     * class is instantiated.\n     */\n    useClass: Type<any>;\n\n    /**\n     * A list of `token`s to be resolved by the injector. The list of values is then\n     * used as arguments to the `useClass` constructor.\n     */\n    deps: any[];\n}\n\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface StaticClassProvider extends StaticClassSansProvider {\n    /**\n     * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n     */\n    provide: any;\n\n    /**\n     * When true, injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * ```ts\n * @Injectable(SomeModule, {deps: []})\n * class MyService {}\n * ```\n *\n * @publicApi\n */\nexport interface ConstructorSansProvider {\n    /**\n     * A list of `token`s to be resolved by the injector.\n     */\n    deps?: any[];\n}\n\n/**\n * Configures the `Injector` to return an instance of a token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ConstructorProvider extends ConstructorSansProvider {\n    /**\n     * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n     */\n    provide: Type<any>;\n\n    /**\n     * When true, injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * @see `ExistingProvider`\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @publicApi\n */\nexport interface ExistingSansProvider {\n    /**\n     * Existing `token` to return. (Equivalent to `injector.get(useExisting)`)\n     */\n    useExisting: any;\n}\n\n/**\n * Configures the `Injector` to return a value of another `useExisting` token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ExistingProvider extends ExistingSansProvider {\n    /**\n     * An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n     */\n    provide: any;\n\n    /**\n     * When true, injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n *\n * @see `FactoryProvider`\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @publicApi\n */\nexport interface FactorySansProvider {\n    /**\n     * A function to invoke to create a value for this `token`. The function is invoked with\n     * resolved values of `token`s in the `deps` field.\n     */\n    useFactory: Function;\n\n    /**\n     * A list of `token`s to be resolved by the injector. The list of values is then\n     * used as arguments to the `useFactory` function.\n     */\n    deps?: any[];\n}\n\n/**\n * Configures the `Injector` to return a value by invoking a `useFactory` function.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n *\n * Dependencies can also be marked as optional:\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface FactoryProvider extends FactorySansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n\n    /**\n     * When true, injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n\n/**\n * Describes how an `Injector` should be configured as static (that is, without reflection).\n * A static provider provides tokens to an injector for various types of dependencies.\n *\n * @see [Injector.create()](/api/core/Injector#create).\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection-providers).\n *\n * @publicApi\n */\nexport type StaticProvider =\n    ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider | any[];\n\n\n/**\n * Configures the `Injector` to return an instance of `Type` when `Type' is used as the token.\n *\n * Create an instance by invoking the `new` operator and supplying additional arguments.\n * This form is a short form of `TypeProvider`;\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='TypeProvider'}\n *\n * @publicApi\n */\nexport type TypeProvider = Type<any>;\n\n/**\n * Configures the `Injector` to return a value by invoking a `useClass` function.\n * Base for `ClassProvider` decorator.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @publicApi\n */\nexport interface ClassSansProvider {\n    /**\n     * Class to instantiate for the `token`.\n     */\n    useClass: Type<any>;\n}\n\n/**\n * Configures the `Injector` to return an instance of `useClass` for a token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport interface ClassProvider extends ClassSansProvider {\n    /**\n     * An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n     */\n    provide: any;\n\n    /**\n     * When true, injector returns an array of instances. This is useful to allow multiple\n     * providers spread across many files to provide configuration information to a common token.\n     */\n    multi?: boolean;\n}\n\n/**\n * Describes how the `Injector` should be configured.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @see `StaticProvider`\n *\n * @publicApi\n */\nexport type Provider = TypeProvider | ValueProvider | ClassProvider | ConstructorProvider |\n    ExistingProvider | FactoryProvider | any[];\n","/*\n * Public API Surface of moq.ts\n*/\nexport * from \"./lib/dump\";\nexport * from \"./lib/mock\";\nexport * from \"./lib/moq\";\nexport * from \"./lib/times\";\nexport * from \"./lib/auto-mocking/auto-mock-injector.config\";\nexport * from \"./lib/auto-mocking/auto-mock-options.builder\";\nexport * from \"./lib/auto-mocking/auto-mock.factory\";\nexport * from \"./lib/auto-mocking/auto-mock.provider\";\nexport * from \"./lib/auto-mocking/auto-mock.storage\";\nexport * from \"./lib/auto-mocking/index\";\nexport * from \"./lib/auto-mocking/root-mock.provider\";\nexport * from \"./lib/auto-mocking/expression.guards/complex-expression.guard\";\nexport * from \"./lib/auto-mocking/expression.guards/complex-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/expression-guard-exception.factory\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/function-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/get-property-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/in-operator-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/index\";\nexport * from \"./lib/auto-mocking/expression.guards/instance-method-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/new-operator-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/set-property-expression.validator\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.formatters/complex-expression.error-formatter\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.formatters/expression.formatter\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.formatters/index\";\nexport * from \"./lib/auto-mocking/expression.guards/expression.formatters/string.error-styler\";\nexport * from \"./lib/auto-mocking/name-formatters/auto-mock-name.formatter\";\nexport * from \"./lib/auto-mocking/name-formatters/name-prefix.provider\";\nexport * from \"./lib/core/index\";\nexport * from \"./lib/core/mock-core\";\nexport * from \"./lib/equal-matchers/common-type.provider\";\nexport * from \"./lib/equal-matchers/date.matcher\";\nexport * from \"./lib/equal-matchers/equal-constant.matcher\";\nexport * from \"./lib/equal-matchers/equal.matcher\";\nexport * from \"./lib/equal-matchers/function.matcher\";\nexport * from \"./lib/equal-matchers/index\";\nexport * from \"./lib/equal-matchers/iterable.tester\";\nexport * from \"./lib/equal-matchers/iterator.matcher\";\nexport * from \"./lib/equal-matchers/map.matcher\";\nexport * from \"./lib/equal-matchers/object-map.provider\";\nexport * from \"./lib/equal-matchers/object-matcher.type\";\nexport * from \"./lib/equal-matchers/object-matchers.injection-token\";\nexport * from \"./lib/equal-matchers/object.matcher\";\nexport * from \"./lib/equal-matchers/pojo.matcher\";\nexport * from \"./lib/equal-matchers/primitive.matcher\";\nexport * from \"./lib/equal-matchers/types.matcher\";\nexport * from \"./lib/explorers/index\";\nexport * from \"./lib/explorers/reflect-has.injection-token\";\nexport * from \"./lib/explorers/has-method.explorer/expression.has-method.explorer\";\nexport * from \"./lib/explorers/has-method.explorer/has-method.explorer\";\nexport * from \"./lib/explorers/has-method.explorer/object.has-method.explorer\";\nexport * from \"./lib/explorers/has-method.explorer/preset.has-method.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/expression-has-property.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/has-property.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/object-has-property.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/preset-has-property.explorer\";\nexport * from \"./lib/explorers/has-property.explorer/property-is-read-only.tester\";\nexport * from \"./lib/explorers/in-operator-interaction.explorer/in-operator-interaction.explorer\";\nexport * from \"./lib/explorers/in-operator-interaction.explorer/preset.has-in-operator.explorer\";\nexport * from \"./lib/explorers/members.explorer/members-method.explorer\";\nexport * from \"./lib/explorers/members.explorer/members-property.explorer\";\nexport * from \"./lib/explorers/members.explorer/property-descriptor.provider\";\nexport * from \"./lib/expression.equality-comparers/arguments.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/constant.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/expression.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/get-property.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/in-operator.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/index\";\nexport * from \"./lib/expression.equality-comparers/instance-method.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/it.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/method.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/new-operator.equality-comparer\";\nexport * from \"./lib/expression.equality-comparers/set-property.equality-comparer\";\nexport * from \"./lib/formatters/constant.formatter\";\nexport * from \"./lib/formatters/expressions.formatter\";\nexport * from \"./lib/formatters/function.formatter\";\nexport * from \"./lib/formatters/get-property.formatter\";\nexport * from \"./lib/formatters/in-operator.formatter\";\nexport * from \"./lib/formatters/index\";\nexport * from \"./lib/formatters/interaction.formatter\";\nexport * from \"./lib/formatters/method.formatter\";\nexport * from \"./lib/formatters/new-operator.formatter\";\nexport * from \"./lib/formatters/property-key.formatter\";\nexport * from \"./lib/formatters/set-property.formatter\";\nexport * from \"./lib/formatters/tracked-expressions.formatter\";\nexport * from \"./lib/formatters/verify.formatter\";\nexport * from \"./lib/injector/default-injector.config\";\nexport * from \"./lib/injector/equal-matching-injector.config\";\nexport * from \"./lib/injector/injection-factory\";\nexport * from \"./lib/injector/injector.factory\";\nexport * from \"./lib/injector/mock-constructor.injection-token\";\nexport * from \"./lib/injector/mock.injection-token\";\nexport * from \"./lib/injector/root-mock.injection-token\";\nexport * from \"./lib/injector/typeof-injection-token\";\nexport * from \"./lib/interaction-players/callback-preset.player\";\nexport * from \"./lib/interaction-players/index\";\nexport * from \"./lib/interaction-players/interaction.player\";\nexport * from \"./lib/interaction-players/mimics-preset.player\";\nexport * from \"./lib/interaction-players/playable-preset.provider\";\nexport * from \"./lib/interaction-players/preset.player\";\nexport * from \"./lib/interaction-players/reflect-apply.injection-token\";\nexport * from \"./lib/interceptors/apply.trap\";\nexport * from \"./lib/interceptors/construct.trap\";\nexport * from \"./lib/interceptors/get-prototype-of.trap\";\nexport * from \"./lib/interceptors/get.trap\";\nexport * from \"./lib/interceptors/has.trap\";\nexport * from \"./lib/interceptors/index\";\nexport * from \"./lib/interceptors/properties-value.storage\";\nexport * from \"./lib/interceptors/prototype.storage\";\nexport * from \"./lib/interceptors/proxy.factory\";\nexport * from \"./lib/interceptors/set-prototype-of.trap\";\nexport * from \"./lib/interceptors/set.trap\";\nexport * from \"./lib/interceptors/spy-function.provider\";\nexport * from \"./lib/mock-options/mock-options.builder\";\nexport * from \"./lib/mock-options/mock-options.injection-token\";\nexport * from \"./lib/mock-options/mock-options.providers\";\nexport * from \"./lib/playables/index\";\nexport * from \"./lib/playables/play-times\";\nexport * from \"./lib/playables/playable-always\";\nexport * from \"./lib/playables/playable-exactly\";\nexport * from \"./lib/playables/playable-never\";\nexport * from \"./lib/playables/playable-once\";\nexport * from \"./lib/playables/playable-sequence\";\nexport * from \"./lib/playables/preset-playables.updater\";\nexport * from \"./lib/presets/index\";\nexport * from \"./lib/presets/preset-builder.factory\";\nexport * from \"./lib/presets/preset-builder\";\nexport * from \"./lib/presets/presets\";\nexport * from \"./lib/presets/rejected-promise.factory\";\nexport * from \"./lib/presets/resolved-promise.factory\";\nexport * from \"./lib/presets/setup.factory\";\nexport * from \"./lib/presets/factories/callback-preset.factory\";\nexport * from \"./lib/presets/factories/mimics-preset.factory\";\nexport * from \"./lib/presets/factories/mimics-rejected-async-preset.factory\";\nexport * from \"./lib/presets/factories/mimics-resolved-async-preset.factory\";\nexport * from \"./lib/presets/factories/returns-async-preset.factory\";\nexport * from \"./lib/presets/factories/returns-preset.factory\";\nexport * from \"./lib/presets/factories/throws-async-preset.factory\";\nexport * from \"./lib/presets/factories/throws-preset.factory\";\nexport * from \"./lib/presets/presets/callbacks.preset\";\nexport * from \"./lib/presets/presets/mimics.preset\";\nexport * from \"./lib/presets/presets/preset\";\nexport * from \"./lib/presets/presets/returns.preset\";\nexport * from \"./lib/presets/presets/throws.preset\";\nexport * from \"./lib/reflector/async-expression.detector\";\nexport * from \"./lib/reflector/async-expression.reflector\";\nexport * from \"./lib/reflector/async-reflecting-proxy.injector-factory\";\nexport * from \"./lib/reflector/composite-expression.reflector\";\nexport * from \"./lib/reflector/expression-predicates\";\nexport * from \"./lib/reflector/expression-reflector\";\nexport * from \"./lib/reflector/expressions\";\nexport * from \"./lib/reflector/index\";\nexport * from \"./lib/reflector/method-only-reflecting-proxy.factory\";\nexport * from \"./lib/reflector/method-reflecting-proxy.factory\";\nexport * from \"./lib/reflector/reflecting-proxy.factory\";\nexport * from \"./lib/reflector/reflecting-proxy.injector-factory\";\nexport * from \"./lib/reflector/sync-expression.reflector\";\nexport * from \"./lib/reflector/traps/apply.reflector-trap\";\nexport * from \"./lib/reflector/traps/construct.reflector-trap\";\nexport * from \"./lib/reflector/traps/get.reflector-trap\";\nexport * from \"./lib/reflector/traps/has.reflector-trap\";\nexport * from \"./lib/reflector/traps/method.reflector-trap\";\nexport * from \"./lib/reflector/traps/set.reflector-trap\";\nexport * from \"./lib/static.injector/forward_ref\";\nexport * from \"./lib/static.injector/injection_token\";\nexport * from \"./lib/static.injector/injector\";\nexport * from \"./lib/static.injector/injector_compatibility\";\nexport * from \"./lib/static.injector/metadata\";\nexport * from \"./lib/static.injector/property\";\nexport * from \"./lib/static.injector/stringify\";\nexport * from \"./lib/static.injector/type\";\nexport * from \"./lib/static.injector/interface/injector\";\nexport * from \"./lib/static.injector/interface/provider\";\nexport * from \"./lib/tracker/index\";\nexport * from \"./lib/tracker/sequence-id\";\nexport * from \"./lib/tracker/tracker\";\nexport * from \"./lib/verification/call-counter\";\nexport * from \"./lib/verification/index\";\nexport * from \"./lib/verification/verification-tester\";\nexport * from \"./lib/verification/verifier\";\nexport * from \"./lib/verification/verify-error\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["ɵ0"],"mappings":"AAGA;;AAEG;MACU,2BAA2B,CAAA;AAEpC,IAAA,WAAA,CAAoB,oBAA0C,EAAA;QAA1C,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;KAE7D;AAEM,IAAA,MAAM,CAAC,kBAAgC,EAAA;QAC1C,IAAI,MAAM,GAAG,EAAE,CAAC;AAChB,QAAA,KAAK,MAAM,UAAU,IAAI,kBAAkB,EAAE;YACzC,MAAM,IAAI,CAAG,EAAA,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA,EAAA,CAAI,CAAC;AACjE,SAAA;AAED,QAAA,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KAC9C;AACJ;;ACjBD;;AAEG;SACa,IAAI,CAAI,IAAc,EAAE,SAAkB,OAAO,EAAA;IAC7D,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,CAAC;AAC5D,IAAA,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;IACxE,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC7C,MAAM,SAAS,GAAG,iCAAiC,CAAC;IACpD,MAAM,CAAC,GAAG,CAAC,CAAA,QAAA,EAAW,IAAI,CAAC,IAAI,KAAK,SAAS,GAAG,aAAa,GAAG,IAAI,CAAC,IAAI,CAAE,CAAA,CAAC,CAAC;AAC7E,IAAA,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACtB,IAAA,MAAM,CAAC,GAAG,CAAC,KAAK,MAAM,CAAA,CAAE,CAAC,CAAC;AAC1B,IAAA,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC1B;;ACfA;;;AAGG;IACS,MAGX;AAHD,CAAA,UAAY,KAAK,EAAA;AACb,IAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAS,CAAA;AACT,IAAA,KAAA,CAAA,KAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAS,CAAA;AACb,CAAC,EAHW,KAAK,KAAL,KAAK,GAGhB,EAAA,CAAA,CAAA,CAAA;AAED;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG;MACU,KAAK,CAAA;AAMd;;;;;AAKG;IACH,WAAoB,CAAA,SAAyC,EAC1C,OAAe,EAAA;QADd,IAAS,CAAA,SAAA,GAAT,SAAS,CAAgC;QAC1C,IAAO,CAAA,OAAA,GAAP,OAAO,CAAQ;KAEjC;AAED;;;;AAIG;IACI,OAAO,OAAO,CAAC,SAAiB,EAAA;AACnC,QAAA,OAAO,IAAI,KAAK,CAAC,QAAQ,IAAI,QAAQ,IAAI,SAAS,EAAE,CAAA,0BAAA,EAA6B,SAAS,CAAA,QAAA,CAAU,CAAC,CAAC;KACzG;AAED;;AAEG;AACI,IAAA,OAAO,WAAW,GAAA;QACrB,OAAO,KAAK,CAAC,YAAY,CAAC;KAC7B;AAED;;;;AAIG;IACI,OAAO,MAAM,CAAC,SAAiB,EAAA;AAClC,QAAA,OAAO,IAAI,KAAK,CAAC,QAAQ,IAAI,QAAQ,IAAI,SAAS,EAAE,CAAA,yBAAA,EAA4B,SAAS,CAAA,QAAA,CAAU,CAAC,CAAC;KACxG;AAED;;AAEG;AACI,IAAA,OAAO,UAAU,GAAA;QACpB,OAAO,KAAK,CAAC,WAAW,CAAC;KAC5B;AAED;;;;;;AAMG;AACI,IAAA,OAAO,OAAO,CAAC,aAAqB,EAAE,WAAmB,EAAE,KAAY,EAAA;AAC1E,QAAA,IAAI,KAAK,KAAK,KAAK,CAAC,SAAS,EAAE;YAC3B,OAAO,IAAI,KAAK,CACZ,QAAQ,IAAI,QAAQ,GAAG,aAAa,IAAI,QAAQ,GAAG,WAAW,EAC9D,CAAA,qCAAA,EAAwC,aAAa,CAAQ,KAAA,EAAA,WAAW,CAAE,CAAA,CAAC,CAAC;AACnF,SAAA;QAED,OAAO,IAAI,KAAK,CACZ,QAAQ,IAAI,QAAQ,IAAI,aAAa,IAAI,QAAQ,IAAI,WAAW,EAChE,CAAA,qCAAA,EAAwC,aAAa,CAAQ,KAAA,EAAA,WAAW,CAAE,CAAA,CAAC,CAAC;KACnF;AAED;;;;AAIG;IACI,OAAO,OAAO,CAAC,SAAiB,EAAA;AACnC,QAAA,OAAO,IAAI,KAAK,CACZ,QAAQ,IAAI,QAAQ,KAAK,SAAS,EAClC,CAAA,yBAAA,EAA4B,SAAS,CAAA,QAAA,CAAU,CAAC,CAAC;KACxD;AAED;;AAEG;AACI,IAAA,OAAO,KAAK,GAAA;QACf,OAAO,KAAK,CAAC,MAAM,CAAC;KACvB;AAED;;AAEG;AACI,IAAA,OAAO,IAAI,GAAA;QACd,OAAO,KAAK,CAAC,KAAK,CAAC;KACtB;AAED;;;;AAIG;AACI,IAAA,IAAI,CAAC,SAAiB,EAAA;AACzB,QAAA,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;KACpC;;AAnGc,KAAA,CAAA,KAAK,GAAU,IAAI,KAAK,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC,EAAE,uBAAuB,CAAC,CAAC;AAC9E,KAAA,CAAA,MAAM,GAAU,IAAI,KAAK,CAAC,QAAQ,IAAI,QAAQ,KAAK,CAAC,EAAE,wBAAwB,CAAC,CAAC;AAChF,KAAA,CAAA,WAAW,GAAU,IAAI,KAAK,CAAC,QAAQ,IAAI,QAAQ,IAAI,CAAC,EAAE,+BAA+B,CAAC,CAAC;AAC3F,KAAA,CAAA,YAAY,GAAU,IAAI,KAAK,CAAC,QAAQ,IAAI,QAAQ,IAAI,CAAC,EAAE,gCAAgC,CAAC;;ACvC/G;AACA;;;;;;AAMG;AACG,SAAU,SAAS,CAAC,KAAU,EAAA;AAChC,IAAA,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAC3B,QAAA,OAAO,KAAK,CAAC;AAChB,KAAA;AAED,IAAA,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACtB,QAAA,OAAO,CAAI,CAAA,EAAA,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AACjD,KAAA;IAED,IAAI,KAAK,IAAI,IAAI,EAAE;QACf,OAAO,CAAA,EAAK,KAAK,CAAA,CAAE,CAAC;AACvB,KAAA;IAED,IAAI,KAAK,CAAC,cAAc,EAAE;AACtB,QAAA,OAAO,CAAG,EAAA,KAAK,CAAC,cAAc,EAAE,CAAC;AACpC,KAAA;IAED,IAAI,KAAK,CAAC,IAAI,EAAE;AACZ,QAAA,OAAO,CAAG,EAAA,KAAK,CAAC,IAAI,EAAE,CAAC;AAC1B,KAAA;AAED,IAAA,MAAM,GAAG,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;IAE7B,IAAI,GAAG,IAAI,IAAI,EAAE;QACb,OAAO,CAAA,EAAK,GAAG,CAAA,CAAE,CAAC;AACrB,KAAA;IAED,MAAM,YAAY,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACvC,IAAA,OAAO,YAAY,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;AACtE;;ACrCA;AACA;;;;;;AAMG;AACG,SAAU,sBAAsB,CAAI,wBAA2B,EAAA;AACnE,IAAA,KAAK,MAAM,GAAG,IAAI,wBAAwB,EAAE;AAC1C,QAAA,IAAI,wBAAwB,CAAC,GAAG,CAAC,KAAK,sBAA6B,EAAE;AACnE,YAAA,OAAO,GAAG,CAAC;AACZ,SAAA;AACF,KAAA;AACD,IAAA,MAAM,KAAK,CAAC,mDAAmD,CAAC,CAAC;AACnE;;ACfA;AA0BA,MAAM,eAAe,GAAG,sBAAsB,CAAC,EAAC,eAAe,EAAE,sBAAsB,EAAC,CAAC,CAAC;AAE1F;;;;;;;;;;;AAWG;AACG,SAAU,UAAU,CAAC,YAA0B,EAAA;AAC3C,IAAA,YAAa,CAAC,eAAe,GAAG,UAAU,CAAC;IAC3C,YAAa,CAAC,QAAQ,GAAG,YAAA;AAC3B,QAAA,OAAO,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;AAC7B,KAAC,CAAC;AACF,IAAA,OAAwB,YAAa,CAAC;AAC1C,CAAC;AAED;;;;;;;;;;;;AAYG;AACG,SAAU,iBAAiB,CAAI,IAAO,EAAA;AACxC,IAAA,OAAO,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,GAAG,IAAI,CAAC;AAC9C,CAAC;AAED;AACM,SAAU,YAAY,CAAC,EAAO,EAAA;IAChC,OAAO,OAAO,EAAE,KAAK,UAAU,IAAI,EAAE,CAAC,cAAc,CAAC,eAAe,CAAC;AACjE,QAAA,EAAE,CAAC,eAAe,KAAK,UAAU,CAAC;AAC1C;;ACrEA;AACA;;;;;;AAMG;MACU,cAAc,CAAA;AACvB,IAAA,WAAA,CAAsB,IAAY,EAAA;QAAZ,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAQ;KACjC;IAED,QAAQ,GAAA;AACJ,QAAA,OAAO,CAAkB,eAAA,EAAA,IAAI,CAAC,IAAI,EAAE,CAAC;KACxC;AACJ;;ACfD;AAeA;;;;;;;AAOG;MACU,QAAQ,GAAG,IAAI,cAAc,CACtC,UAAU,EACZ;AAEF,MAAM,mBAAmB,GAAG,EAAE,CAAC;AACxB,MAAM,kBAAkB,GAAG,oBAAoB;AAE/C,MAAM,kBAAkB,GAAG,kBAAkB;AACpD,MAAM,aAAa,GAAG,aAAa,CAAC;AACpC,MAAM,QAAQ,GAAG,MAAM,CAAC;AACjB,MAAM,WAAW,GAAG,IAAI;AACxB,MAAM,MAAM,GAAG,WAAW;aAGqC,sBAAsB,CAAA;AADrF,MAAM,SAAS,GAClB,sBAAsB,CAAgB,EAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAwBA,IAAA,EAAC,EAAE;MAElF,YAAY,CAAA;AACrB,IAAA,GAAG,CAAC,KAAU,EAAE,aAAA,GAAqB,kBAAkB,EAAA;QACnD,IAAI,aAAa,KAAK,kBAAkB,EAAE;AACtC,YAAA,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,CAAA,mCAAA,EAAsC,SAAS,CAAC,KAAK,CAAC,CAAG,CAAA,CAAA,CAAC,CAAC;AACnF,YAAA,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC;AACjC,YAAA,MAAM,KAAK,CAAC;AACf,SAAA;AACD,QAAA,OAAO,aAAa,CAAC;KACxB;AACJ,CAAA;AAGK,SAAU,kBAAkB,CAC9B,CAAM,EAAE,KAAU,EAAE,iBAAyB,EAAE,MAAqB,EAAA;AACpE,IAAA,MAAM,SAAS,GAAU,CAAC,CAAC,kBAAkB,CAAC,CAAC;AAC/C,IAAA,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;QACf,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AACpC,KAAA;AACD,IAAA,CAAC,CAAC,OAAO,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,OAAO,CAAA,CAAE,EAAE,SAAS,EAAE,iBAAiB,EAAE,MAAM,CAAC,CAAC;AAChF,IAAA,CAAC,CAAC,aAAa,CAAC,GAAG,SAAS,CAAC;AAC7B,IAAA,CAAC,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;AAC7B,IAAA,MAAM,CAAC,CAAC;AACZ,CAAC;AAEK,SAAU,WAAW,CACvB,IAAY,EAAE,GAAQ,EAAE,iBAAyB,EAAE,MAAA,GAAwB,IAAI,EAAA;AAC/E,IAAA,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACjG,IAAA,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;AAC7B,IAAA,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AACpB,QAAA,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7C,KAAA;AAAM,SAAA,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAChC,MAAM,KAAK,GAAa,EAAE,CAAC;AAC3B,QAAA,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE;AACnB,YAAA,IAAI,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AACzB,gBAAA,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AACvB,gBAAA,KAAK,CAAC,IAAI,CACN,CAAA,EAAG,GAAG,CAAA,CAAA,EAAI,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAE,CAAA,CAAC,CAAC;AACzF,aAAA;AACJ,SAAA;QACD,OAAO,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAA,CAAG,CAAC;AACrC,KAAA;IACD,OAAO,CAAA,EAAG,iBAAiB,CAAA,EAAG,MAAM,GAAG,CAAI,CAAA,EAAA,MAAM,CAAG,CAAA,CAAA,GAAG,EAAE,CAAI,CAAA,EAAA,OAAO,CAChE,GAAA,EAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA,CAAE,CAAC;AACzC;;AClFA;AACA;;;;;;AAMG;AAEH;;;;AAIG;IACS,YAgBX;AAhBD,CAAA,UAAY,WAAW,EAAA;;;AAInB,IAAA,WAAA,CAAA,WAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAgB,CAAA;AAChB;;;AAGG;AACH,IAAA,WAAA,CAAA,WAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAa,CAAA;;AAEb,IAAA,WAAA,CAAA,WAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAa,CAAA;;AAEb,IAAA,WAAA,CAAA,WAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAiB,CAAA;;AAEjB,IAAA,WAAA,CAAA,WAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAiB,CAAA;AACrB,CAAC,EAhBW,WAAW,KAAX,WAAW,GAgBtB,EAAA,CAAA,CAAA;;AC9BD;AAEA;;;;;;AAMG;AAEH;;AAEG;MACU,QAAQ,CAAA;AAEpB,CAAA;AAED;;AAEG;MACU,IAAI,CAAA;AAEhB,CAAA;AAED;;AAEG;MACU,QAAQ,CAAA;AAEpB,CAAA;AAED;;AAEG;MACU,IAAI,CAAA;AAEhB;;ACpCD;MAiCa,aAAa,GAAG,CACzB,SAA2B,EAAE,MAA4B,EAAE,IAAY,KAAK,IAAI,cAAc,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE;AAE5H;;;;;;;;;;;;;;;;;;;;;;;AAuBG;MACmB,QAAQ,CAAA;AAuB1B,IAAA,OAAO,MAAM,CACT,OAA6F,EAC7F,MAAiB,EAAA;AACjB,QAAA,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACxB,OAAO,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;AAC7C,SAAA;AAAM,aAAA;AACH,YAAA,OAAO,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;AAC/E,SAAA;KACJ;;AA9BM,QAAkB,CAAA,kBAAA,GAAG,kBAAkB,CAAC;AACxC,QAAA,CAAA,IAAI,GAAa,IAAI,YAAY,EAAE,CAAC;AAC3C;;;AAGG;AACI,QAAiB,CAAA,iBAAA,GAAG,CAAC,CAAC,CAAC;AAqClC,MAAM,KAAK,GAAG,UAAa,KAAQ,EAAA;AAC/B,IAAA,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;;AACF,MAAM,KAAK,GAAU,EAAE,CAAC;AACxB,MAAM,QAAQ,GAAG,KAAK,CAAC;AACvB,MAAM,iBAAiB,GAAG,YAAA;IACtB,OAAO,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACjD,CAAC,CAAC;;MAUW,cAAc,CAAA;IAOvB,WACI,CAAA,SAA2B,EAAE,MAAM,GAAG,IAAI,YAAY,EAAE,EAAE,MAAA,GAAwB,IAAI,EAAA;AACtF,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAe,CAAC;QACvD,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAU,EAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;QACrG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAU,EAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;QACrG,IAAI,CAAC,KAAK,GAAG,2BAA2B,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;KAChE;IAID,GAAG,CAAC,KAAU,EAAE,aAAmB,EAAE,KAAqB,GAAA,WAAW,CAAC,OAAO,EAAA;AACzE,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,MAAM,KAAK,SAAS,EAAE;AACtB,YAAA,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC5B,SAAA;QACD,IAAI;AACA,YAAA,OAAO,eAAe,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;AACrF,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;AACR,YAAA,OAAO,kBAAkB,CAAC,CAAC,EAAE,KAAK,EAAE,qBAAqB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC3E,SAAA;KACJ;IAED,QAAQ,GAAA;QACJ,MAAM,MAAM,GAAa,EAAE,CAAC;AAAC,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC3D,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7D,OAAO,CAAA,eAAA,EAAkB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;KACjD;AACJ,CAAA;AAiBD,SAAS,eAAe,CAAC,QAA2B,EAAA;AAChD,IAAA,MAAM,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;IACnC,IAAI,EAAE,GAAa,KAAK,CAAC;IACzB,IAAI,KAAK,GAAQ,KAAK,CAAC;IACvB,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,MAAM,OAAO,GAAG,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACpD,IAAI,SAAS,IAAI,QAAQ,EAAE;;AAEvB,QAAA,KAAK,GAAI,QAA0B,CAAC,QAAQ,CAAC;AAChD,KAAA;SAAM,IAAK,QAA4B,CAAC,UAAU,EAAE;AACjD,QAAA,EAAE,GAAI,QAA4B,CAAC,UAAU,CAAC;AACjD,KAAA;SAAM,IAAK,QAA6B,CAAC,WAAW,EAAE;;AAEtD,KAAA;SAAM,IAAK,QAAgC,CAAC,QAAQ,EAAE;QACnD,MAAM,GAAG,IAAI,CAAC;AACd,QAAA,EAAE,GAAG,iBAAiB,CAAE,QAAgC,CAAC,QAAQ,CAAC,CAAC;AACtE,KAAA;AAAM,SAAA,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;QACtC,MAAM,GAAG,IAAI,CAAC;QACd,EAAE,GAAG,OAAO,CAAC;AAChB,KAAA;AAAM,SAAA;AACH,QAAA,MAAM,WAAW,CACb,qGAAqG,EACrG,QAAQ,CAAC,CAAC;AACjB,KAAA;IACD,OAAO,EAAC,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC;AACrC,CAAC;AAED,SAAS,qBAAqB,CAAC,KAAU,EAAA;AACrC,IAAA,OAAO,WAAW,CAAC,kDAAkD,EAAE,KAAK,CAAC,CAAC;AAClF,CAAC;AAED,SAAS,2BAA2B,CAAC,OAAyB,EAAE,QAAwB,EAAA;IAEpF,IAAI,KAAK,GAAkB,IAAI,CAAC;AAChC,IAAA,IAAI,QAAQ,EAAE;AACV,QAAA,QAAQ,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AACvC,QAAA,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;;AAEzB,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtC,gBAAA,KAAK,GAAG,2BAA2B,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC;AACtE,aAAA;AACJ,SAAA;AAAM,aAAA,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;;;AAGvC,YAAA,MAAM,WAAW,CAAC,8BAA8B,EAAE,QAAQ,CAAC,CAAC;AAC/D,SAAA;aAAM,IAAI,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,OAAO,EAAE;;YAErE,IAAI,KAAK,GAAG,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AAChD,YAAA,MAAM,gBAAgB,GAAG,eAAe,CAAC,QAAQ,CAAC,CAAC;AACnD,YAAA,IAAI,QAAQ,CAAC,KAAK,KAAK,IAAI,EAAE;;gBAEzB,IAAI,aAAa,GAAuB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAC3D,gBAAA,IAAI,aAAa,EAAE;AACf,oBAAA,IAAI,aAAa,CAAC,EAAE,KAAK,iBAAiB,EAAE;AACxC,wBAAA,MAAM,qBAAqB,CAAC,KAAK,CAAC,CAAC;AACtC,qBAAA;AACJ,iBAAA;AAAM,qBAAA;;AAEH,oBAAA,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,GAAW;wBACvC,KAAK,EAAE,QAAQ,CAAC,OAAO;AACvB,wBAAA,IAAI,EAAE,EAAE;AACR,wBAAA,MAAM,EAAE,KAAK;AACb,wBAAA,EAAE,EAAE,iBAAiB;AACrB,wBAAA,KAAK,EAAE,KAAK;AACf,qBAAA,CAAC,CAAC;AACN,iBAAA;;gBAED,KAAK,GAAG,QAAQ,CAAC;AACjB,gBAAA,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,OAAO,EAAA,CAAA,gBAAsB,CAAC,CAAC;AAClE,aAAA;YACD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAClC,YAAA,IAAI,MAAM,IAAI,MAAM,CAAC,EAAE,KAAK,iBAAiB,EAAE;AAC3C,gBAAA,MAAM,qBAAqB,CAAC,KAAK,CAAC,CAAC;AACtC,aAAA;AACD,YAAA,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;AACxC,SAAA;AAAM,aAAA;AACH,YAAA,MAAM,WAAW,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;AACtD,SAAA;AACJ,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,SAAS,eAAe,CACpB,KAAU,EAAE,MAAiC,EAAE,OAAgC,EAAE,MAAgB,EACjG,aAAkB,EAAE,KAAkB,EAAA;IACtC,IAAI;AACA,QAAA,OAAO,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;AAC7E,KAAA;AAAC,IAAA,OAAO,CAAC,EAAE;;AAER,QAAA,IAAI,EAAE,CAAC,YAAY,KAAK,CAAC,EAAE;AACvB,YAAA,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;AACpB,SAAA;AACD,QAAA,MAAM,IAAI,GAAU,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;AACxE,QAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AACpB,QAAA,IAAI,MAAM,IAAI,MAAM,CAAC,KAAK,KAAK,QAAQ,EAAE;;AAErC,YAAA,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;AACxB,SAAA;AACD,QAAA,MAAM,CAAC,CAAC;AACX,KAAA;AACL,CAAC;AAED,SAAS,YAAY,CACjB,KAAU,EAAE,MAAiC,EAAE,OAAgC,EAAE,MAAgB,EACjG,aAAkB,EAAE,KAAkB,EAAA;AACtC,IAAA,IAAI,KAAK,CAAC;;IAEV,IAAI,MAAM,IAAI,EAAE,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,EAAE;;;AAG3C,QAAA,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QACrB,IAAI,KAAK,KAAK,QAAQ,EAAE;AACpB,YAAA,MAAM,KAAK,CAAC,CAAA,EAAG,WAAa,CAAA,mBAAA,CAAqB,CAAC,CAAC;AACtD,SAAA;aAAM,IAAI,KAAK,KAAK,KAAK,EAAE;AACxB,YAAA,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;YACxB,MAAM,EAAC,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,UAAU,EAAC,GAAG,MAAM,CAAC;YAC9C,IAAI,IAAI,GAAG,KAAK,CAAC;YACjB,IAAI,UAAU,CAAC,MAAM,EAAE;gBACnB,IAAI,GAAG,EAAE,CAAC;AACV,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,oBAAA,MAAM,SAAS,GAAqB,UAAU,CAAC,CAAC,CAAC,CAAC;AAClD,oBAAA,MAAM,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;;AAElC,oBAAA,MAAM,WAAW,GAAG,OAAO,uBAA2B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;oBAC/F,IAAI,CAAC,IAAI,CAAC,eAAe;;AAErB,oBAAA,SAAS,CAAC,KAAK;;;oBAGf,WAAW;;oBAEX,OAAO;;;;AAIP,oBAAA,CAAC,WAAW,IAAI,EAAE,OAAO,uBAA2B,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM;;AAE7E,oBAAA,OAAO,sBAA0B,IAAI,GAAG,QAAQ,CAAC,kBAAkB,EACnE,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;AAC7B,iBAAA;AACJ,aAAA;YACD,MAAM,CAAC,KAAK,GAAG,KAAK,GAAG,MAAM,GAAG,IAAK,EAAU,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACxF,SAAA;;AAEJ,KAAA;SAAM,IAAI,EAAE,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,EAAE;AACpC,QAAA,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;;AAEjE,KAAA;SAAM,IAAI,EAAE,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,EAAE;QACxC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;AACnD,KAAA;AAAM,SAAA;QACH,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,aAAa,KAAK,WAAW,GAAG,aAAa,GAAG,IAAI,CAAC,CAAC;AACjG,KAAA;AACD,IAAA,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,SAAS,WAAW,CAAC,QAAwB,EAAA;IACzC,IAAI,IAAI,GAAuB,KAAK,CAAC;AACrC,IAAA,MAAM,YAAY,GACb,QAAyE,CAAC,IAAI,CAAC;AACpF,IAAA,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,EAAE;QACrC,IAAI,GAAG,EAAE,CAAC;AACV,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC1C,IAAI,OAAO,mBAAuB;YAClC,IAAI,KAAK,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,YAAA,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACtB,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,WAAW,GAAG,KAAK,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC9D,oBAAA,MAAM,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;AAClC,oBAAA,IAAI,UAAU,YAAY,QAAQ,IAAI,UAAU,KAAK,QAAQ,EAAE;;wBAE3D,OAAO,GAAG,OAAO,GAAA,CAAA,gBAAwB;AAC5C,qBAAA;AAAM,yBAAA,IAAI,UAAU,YAAY,QAAQ,IAAI,UAAU,KAAK,QAAQ,EAAE;;AAElE,wBAAA,OAAO,GAAG,OAAO,GAAG,CAAA,CAAA,iBAAuB;AAC9C,qBAAA;AAAM,yBAAA,IAAI,UAAU,YAAY,IAAI,IAAI,UAAU,KAAK,IAAI,EAAE;;AAE1D,wBAAA,OAAO,GAAG,OAAO,GAAG,CAAA,CAAA,mBAAyB;AAChD,qBAAA;AAAM,yBAAA;AACH,wBAAA,KAAK,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;AACzC,qBAAA;AACJ,iBAAA;AACJ,aAAA;YACD,IAAI,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;AAC/B,SAAA;AACJ,KAAA;SAAM,IAAK,QAA6B,CAAC,WAAW,EAAE;QACnD,MAAM,KAAK,GAAG,iBAAiB,CAAE,QAA6B,CAAC,WAAW,CAAC,CAAC;QAC5E,IAAI,GAAG,CAAC,EAAC,KAAK,EAAE,OAAO,EAAA,CAAA,gBAAsB,CAAC,CAAC;AAClD,KAAA;SAAM,IAAI,CAAC,YAAY,IAAI,EAAE,SAAS,IAAI,QAAQ,CAAC,EAAE;;AAElD,QAAA,MAAM,WAAW,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;AAClD,KAAA;AACD,IAAA,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,SAAS,WAAW,CAAC,IAAY,EAAE,GAAQ,EAAA;AACvC,IAAA,OAAO,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,qBAAqB,CAAC,CAAC,CAAC;AACpE;;AC9WA;;AAEG;SACa,eAAe,CAAI,OAAwB,EAAE,GAAG,SAA2B,EAAA;AACvF,IAAA,MAAM,EAAC,cAAc,EAAC,GAAG,OAAO,CAAC;AACjC,IAAA,IAAI,cAAc,EAAE;QAChB,MAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QACxD,OAAO,QAAQ,CAAC,MAAM,CAAC;AACnB,YAAA,SAAS,EAAE,QAAQ;AACtB,SAAA,CAAC,CAAC;AACN,KAAA;AACD,IAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;AACrD;;ACbA;;AAEG;MACU,IAAI,GAAG,IAAI,cAAc,CAAiB,OAAO;;ACN9D;;AAEG;MACU,UAAU,CAAA;AAAvB,IAAA,WAAA,GAAA;QACY,IAAK,CAAA,KAAA,GAAG,CAAC,CAAC;KAKrB;IAHU,IAAI,GAAA;AACP,QAAA,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;KACvB;AACJ;;ACED;;AAEG;MACU,OAAO,CAAA;AAGhB,IAAA,WAAA,CAAoB,UAAsB,EAAA;QAAtB,IAAU,CAAA,UAAA,GAAV,UAAU,CAAY;QAFlC,IAAG,CAAA,GAAA,GAAoB,EAAE,CAAC;KAIjC;AAED;;AAEG;AACI,IAAA,GAAG,CAAC,MAAkB,EAAA;AACzB,QAAA,MAAM,MAAM,GAAG,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,MAAM,EAAC,CAAC;AAChE,QAAA,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACzB;AAED;;AAEG;IACI,GAAG,GAAA;AACN,QAAA,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;KACxB;IAEM,YAAY,GAAA;AACf,QAAA,OAAO,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC;KACtD;AACJ;;ACpCD;;AAEG;AACH,uBAAe;IACX,EAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAC;AACrD,IAAA,EAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,UAAU,CAAC,EAAC;CAC5D;;ACYD;;AAEG;MACU,oBAAoB,GAAG,IAAI,cAAc,CAAsB,sBAAsB,EAAE;AAEpG;;AAEG;MACU,WAAW,GAAG,IAAI,cAAc,CAAyB,uBAAuB,EAAE;AAS/F;;AAEG;MACU,gBAAgB,GAAG,IAAI,cAAc,CAAsB,uCAAuC,EAAE;AAEjH;;AAEG;MACU,kBAAkB,GAAG,IAAI,cAAc,CAAsB,yCAAyC,EAAE;AAErH;;AAEG;MACU,sBAAsB,GAAG,IAAI,cAAc,CAAsB,6CAA6C;;MChDrG,UAAU,CAAA;IAC5B,WACoB,CAAA,IAAiB,EACjB,IAAW,EAAA;QADX,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAa;QACjB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAO;KAE9B;AACJ,CAAA;AAED;;;AAGG;AACG,MAAO,gBAAiB,SAAQ,UAAU,CAAA;IAC5C,WAAY,CAAA,IAAiB,EACjB,IAAW,EAAA;AACnB,QAAA,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACrB;AACJ,CAAA;AAED;;;AAGG;AACG,MAAO,kBAAmB,SAAQ,UAAU,CAAA;AAC9C,IAAA,WAAA,CAAY,IAAW,EAAA;AACnB,QAAA,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KAC1B;AACJ,CAAA;AAED;;;AAGG;AACG,MAAO,qBAAsB,SAAQ,UAAU,CAAA;AACjD,IAAA,WAAA,CAAY,IAAiB,EAAA;AACzB,QAAA,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KAC1B;AACJ,CAAA;AAED;;;AAGG;AACG,MAAO,qBAAsB,SAAQ,UAAU,CAAA;IACjD,WAAY,CAAA,IAAiB,EACD,KAAU,EAAA;AAClC,QAAA,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;QADG,IAAK,CAAA,KAAA,GAAL,KAAK,CAAK;KAErC;AACJ,CAAA;AAED;;;AAGG;AACG,MAAO,oBAAqB,SAAQ,UAAU,CAAA;AAChD,IAAA,WAAA,CAAY,IAAiB,EAAA;AACzB,QAAA,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KAC1B;AACJ,CAAA;AAED;;;AAGG;AACG,MAAO,qBAAsB,SAAQ,UAAU,CAAA;AACjD,IAAA,WAAA,CAAY,IAAW,EAAA;AACnB,QAAA,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;KAC1B;AACJ;;MClEY,gBAAgB,CAAA;IACzB,WACqB,CAAA,kBAAuC,EACvC,WAAmC,EAAA;QADnC,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAqB;QACvC,IAAW,CAAA,WAAA,GAAX,WAAW,CAAwB;AACpD,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAM,EAAE,IAAI,KAAI;YACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;AACvD,YAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;AAC5C,SAAC,CAAC;KACL;AACJ;;MCdY,gBAAgB,CAAA;AACzB,IAAA,WAAA,CACqB,WAAmC,EAAA;QAAnC,IAAW,CAAA,WAAA,GAAX,WAAW,CAAwB;AACpD,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,KAAI;AAC3B,YAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;AAC9D,YAAA,OAAO,IAAI,CAAC;AAChB,SAAC,CAAC;KACL;AACJ;;MCXY,kBAAkB,CAAA;IAC3B,WACqB,CAAA,kBAAuC,EACvC,WAAmC,EAAA;QADnC,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAqB;QACvC,IAAW,CAAA,WAAA,GAAX,WAAW,CAAwB;AACpD,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,KAAI;YAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;YACpC,IAAI,IAAI,YAAY,qBAAqB,EAAE;AACvC,gBAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAChE,aAAA;AAAM,iBAAA;gBACH,IAAI,IAAI,KAAK,SAAS,EAAE;AACpB,oBAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/B,iBAAA;gBACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;AACvD,aAAA;AACD,YAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;AAC5C,SAAC,CAAC;KACL;AACJ;;MCtBY,gBAAgB,CAAA;AACzB,IAAA,WAAA,CACqB,WAAmC,EAAA;QAAnC,IAAW,CAAA,WAAA,GAAX,WAAW,CAAwB;AACpD,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAM,EAAE,IAAI,KAAI;YACpB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;AACtD,YAAA,OAAO,IAAI,CAAC;AAChB,SAAC,CAAC;KACL;AACJ;;MCXY,sBAAsB,CAAA;IAC/B,WACqB,CAAA,kBAAuC,EACvC,WAAmC,EAAA;QADnC,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAqB;QACvC,IAAW,CAAA,WAAA,GAAX,WAAW,CAAwB;AACpD,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAW,EAAE,IAAS,KAAI;YAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;AACvD,YAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,CAAC;AAC5C,SAAC,CAAC;KACL;AACJ;;MCTY,sBAAsB,CAAA;AAC/B,IAAA,WAAA,CAA6B,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;KAC9C;IAED,MAAM,GAAA;QACF,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAwD,CAAC;QACvG,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAwD,CAAC;QACvG,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAA0D,CAAC;QAC7G,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAwD,CAAC;QACvG,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,sBAAsB,CAA8D,CAAC;AACzH,QAAA,MAAM,OAAO,GAAG,EAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAC,CAAC;AAClD,QAAA,MAAM,SAAS,GAAG,YAAA;AACd,YAAA,OAAO,SAAS,CAAC;AACrB,SAAC,CAAC;AACF,QAAA,OAAO,IAAI,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;KACxC;AACJ;;MCfY,8BAA8B,CAAA;AACvC,IAAA,MAAM,CAAC,OAA2C,GAAA,EAAC,SAAS,EAAE,EAAE,EAAC,EAAA;AAC7D,QAAA,MAAM,SAAS,GAAG;YACd,EAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAC;AAC9C,YAAA,EAAC,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAC;AACrF,YAAA,EAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,WAAW,CAAC,EAAC;YAC9F,EAAC,OAAO,EAAE,gBAAgB,EAAE,WAAW,EAAE,sBAAsB,EAAE,IAAI,EAAE,EAAE,EAAC;AAC1E,YAAA,EAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,WAAW,CAAC,EAAC;AAC5E,YAAA,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAE,WAAW,CAAC,EAAC;YACpG,EAAC,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,sBAAsB,EAAE,IAAI,EAAE,EAAE,EAAC;AAC5E,YAAA,EAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,WAAW,CAAC,EAAC;AAC5E,YAAA;AACI,gBAAA,OAAO,EAAE,sBAAsB;AAC/B,gBAAA,QAAQ,EAAE,sBAAsB;AAChC,gBAAA,IAAI,EAAE,CAAC,sBAAsB,EAAE,WAAW,CAAC;AAC9C,aAAA;YACD,EAAC,OAAO,EAAE,sBAAsB,EAAE,WAAW,EAAE,sBAAsB,EAAE,IAAI,EAAE,EAAE,EAAC;YAChF,GAAG,OAAO,CAAC,SAAS;SACvB,CAAC;QACF,OAAO,QAAQ,CAAC,MAAM,CAAC,EAAC,SAAS,EAAC,CAAC,CAAC;KACvC;AACJ;;AC5BD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDG;MACU,EAAE,CAAA;AACX,IAAA,WAAA,CAA4B,SAAwB,EAAA;QAAxB,IAAS,CAAA,SAAA,GAAT,SAAS,CAAe;KAEnD;AAED;;;;;;;;;;;;;;;;AAgBG;IACI,OAAO,EAAE,CAAI,SAAwB,EAAA;AACxC,QAAA,OAAO,IAAI,EAAE,CAAC,SAAS,CAAC,CAAC;KAC5B;AAED;;;;;;;;;;;;;;;;AAgBG;AACI,IAAA,OAAO,KAAK,GAAA;AACf,QAAA,OAAO,IAAI,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC;KACpC;AAID;;AAEG;AACI,IAAA,IAAI,CAAC,QAAY,EAAA;QACpB,IAAI;YACA,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;AACxC,YAAA,OAAO,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC;AAClD,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;AACR,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;KACJ;;AAZuB,EAAA,CAAA,cAAc,GAAG,MAAe,IAAI;;;;;;;;;;;AC7FhE;;;;;;;AAOG;MACU,uBAAuB,CAAA;AAChC,IAAA,WAAA,CAA6B,eAA+C,EAAA;QAA/C,IAAe,CAAA,eAAA,GAAf,eAAe,CAAgC;KAC3E;AAED;;AAEG;AACI,IAAA,OAAO,CAAI,UAA0B,EAAA;QACxC,IAAI,UAAU,YAAY,EAAE,EAAE;YAC1B,OAAO,CAAC,UAAU,CAAC,CAAC;AACvB,SAAA;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;QAE/C,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AAC1D,QAAA,MAAM,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC;AAEpC,QAAA,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QAEpC,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE9C,OAAO,SAAS,YAAY,EAAE,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC;cACpD,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;KACnC;AAEY,IAAA,YAAY,CAAI,UAA0B,EAAA;;YACnD,IAAI,UAAU,YAAY,EAAE,EAAE;gBAC1B,OAAO,CAAC,UAAU,CAAC,CAAC;AACvB,aAAA;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;YAE/C,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AAC1D,YAAA,MAAM,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC;AAEpC,YAAA,MAAM,SAAS,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC,CAAC;YAE1C,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC9C,OAAO,SAAS,YAAY,EAAE,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC;kBACpD,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;SACnC,CAAA,CAAA;AAAA,KAAA;AACJ;;ACjDD;;;;;;;AAOG;MACU,4BAA4B,CAAA;AACrC,IAAA,WAAA,CACqB,uBAAgD,EAChD,uBAAgD,EAChD,wBAAkD,EAAA;QAFlD,IAAuB,CAAA,uBAAA,GAAvB,uBAAuB,CAAyB;QAChD,IAAuB,CAAA,uBAAA,GAAvB,uBAAuB,CAAyB;QAChD,IAAwB,CAAA,wBAAA,GAAxB,wBAAwB,CAA0B;KACtE;AAED;;AAEG;AACI,IAAA,OAAO,CAAI,UAA0B,EAAA;AACxC,QAAA,OAAO,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,UAAU,CAAC;cACjD,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,UAAU,CAAC;cACjD,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;KAC1D;AACJ;;MC1BY,uBAAuB,CAAA;AACzB,IAAA,OAAO,CAAI,UAA0B,EAAA;QACxC,IAAI,UAAU,YAAY,EAAE,EAAE;AAC1B,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;AAED,QAAA,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC;AACxB,QAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC;AACvB,QAAA,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC;AAC1B,QAAA,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC;AACxB,QAAA,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC;AAC9B,QAAA,MAAM,OAAO,GAAG,EAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,EAAC,CAAC;AAClD,QAAA,MAAM,SAAS,GAAG,YAAA;AACd,YAAA,OAAO,SAAS,CAAC;AACrB,SAAC,CAAC;QACF,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAC5C,QAAA,MAAM,SAAS,GAAG,UAAU,CAAC,KAAY,CAAC,CAAC;AAE3C,QAAA,OAAO,SAAS,YAAY,EAAE,GAAG,KAAK,GAAG,SAAS,YAAY,OAAO,CAAC;KACzE;AACJ;;AClBD;;;;;AAKG;MACU,wBAAwB,CAAA;AACjC,IAAA,WAAA,CAA6B,eAAoD,EAAA;QAApD,IAAe,CAAA,eAAA,GAAf,eAAe,CAAqC;KAChF;AAED;;AAEG;AACI,IAAA,OAAO,CAAI,UAA0B,EAAA;QAExC,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;QAC/C,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AAC1D,QAAA,MAAM,KAAK,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC;QACpC,UAAU,CAAC,KAAK,CAAC,CAAC;AAElB,QAAA,OAAO,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;KACpC;AACJ;;MCvBY,mBAAmB,CAAA;AAC5B,IAAA,WAAA,CACqB,WAAmC,EAAA;QAAnC,IAAW,CAAA,WAAA,GAAX,WAAW,CAAwB;AACpD,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,KAAI;YAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;YACpC,IAAI,IAAI,YAAY,qBAAqB,EAAE;AACvC,gBAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAChE,aAAA;AAAM,iBAAA;gBACH,IAAI,IAAI,KAAK,SAAS,EAAE;AACpB,oBAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/B,iBAAA;AACJ,aAAA;AACD,YAAA,OAAO,SAAS,CAAC;AACrB,SAAC,CAAC;KACL;AACJ;;MCbY,gCAAgC,CAAA;AACzC,IAAA,WAAA,CAA6B,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;KAC9C;IAED,MAAM,GAAA;QACF,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAA2D,CAAC;AAC/G,QAAA,MAAM,OAAO,GAAG,EAAC,KAAK,EAAC,CAAC;AACxB,QAAA,MAAM,SAAS,GAAG,YAAA;AACd,YAAA,OAAO,SAAS,CAAC;AACrB,SAAC,CAAC;AACF,QAAA,OAAO,IAAI,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;KACxC;AACJ;;MCTY,mCAAmC,CAAA;AAC5C,IAAA,WAAA,CAA6B,8BAA8D,EAAA;QAA9D,IAA8B,CAAA,8BAAA,GAA9B,8BAA8B,CAAgC;KAC1F;AAED,IAAA,MAAM,CAAC,OAA2C,GAAA,EAAC,SAAS,EAAE,EAAE,EAAC,EAAA;AAC7D,QAAA,MAAM,SAAS,GAAG;YACd,EAAC,OAAO,EAAE,gBAAgB,EAAE,WAAW,EAAE,gCAAgC,EAAE,IAAI,EAAE,EAAE,EAAC;AACpF,YAAA,EAAC,OAAO,EAAE,gCAAgC,EAAE,QAAQ,EAAE,gCAAgC,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAC;YACzG,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,EAAC,MAAM,EAAE,OAAO,EAAE,CAAC,EAAwB,EAAE,IAAI,EAAE,EAAE,EAAC;YAC9F,EAAC,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,EAAC,MAAM,EAAE,OAAO,EAAE,CAAC,EAAwB,EAAE,IAAI,EAAE,EAAE,EAAC;AAClG,YAAA,EAAC,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,WAAW,CAAC,EAAC;YAClF,GAAG,OAAO,CAAC,SAAS;SACvB,CAAC;QACF,OAAO,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,EAAC,SAAS,EAAC,CAAC,CAAC;KAClE;AACJ;;ACpBD;;AAEG;AACH,yBAAe;IACX,EAAC,OAAO,EAAE,oBAAoB,EAAE,WAAW,EAAE,4BAA4B,EAAE,IAAI,EAAE,EAAE,EAAC;AACpF,IAAA;AACI,QAAA,OAAO,EAAE,4BAA4B;AACrC,QAAA,QAAQ,EAAE,4BAA4B;AACtC,QAAA,IAAI,EAAE,CAAC,uBAAuB,EAAE,uBAAuB,EAAE,wBAAwB,CAAC;AACrF,KAAA;IACD,EAAC,OAAO,EAAE,uBAAuB,EAAE,QAAQ,EAAE,uBAAuB,EAAE,IAAI,EAAE,EAAE,EAAC;IAC/E,EAAC,OAAO,EAAE,8BAA8B,EAAE,QAAQ,EAAE,8BAA8B,EAAE,IAAI,EAAE,EAAE,EAAC;AAC7F,IAAA,EAAC,OAAO,EAAE,uBAAuB,EAAE,QAAQ,EAAE,uBAAuB,EAAE,IAAI,EAAE,CAAC,8BAA8B,CAAC,EAAC;AAC7G,IAAA;AACI,QAAA,OAAO,EAAE,mCAAmC;AAC5C,QAAA,QAAQ,EAAE,mCAAmC;QAC7C,IAAI,EAAE,CAAC,8BAA8B,CAAC;AACzC,KAAA;AACD,IAAA;AACI,QAAA,OAAO,EAAE,wBAAwB;AACjC,QAAA,QAAQ,EAAE,wBAAwB;QAClC,IAAI,EAAE,CAAC,mCAAmC,CAAC;AAC9C,KAAA;CACJ;;AC7BD;;AAEG;MACU,OAAO,CAAA;AAApB,IAAA,WAAA,GAAA;QACY,IAAO,CAAA,OAAA,GAAiB,EAAE,CAAC;KAStC;AAPU,IAAA,GAAG,CAAC,MAAkB,EAAA;AACzB,QAAA,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAChC;IAEM,GAAG,GAAA;AACN,QAAA,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;KAC5B;AACJ;;ACbD;;AAEG;MACU,eAAe,CAAA;AAGxB,IAAA,WAAA,CAAoB,KAAa,EAAA;QAAb,IAAK,CAAA,KAAA,GAAL,KAAK,CAAQ;QAFzB,IAAO,CAAA,OAAA,GAAG,CAAC,CAAC;AAKX,QAAA,IAAA,CAAA,MAAM,GAAG,CAAC,MAA4B,KAAI;YAC/C,IAAI,MAAM,oCAAiD;gBACvD,IAAI,CAAC,OAAO,EAAE,CAAC;AAClB,aAAA;AACL,SAAC,CAAC;QAEO,IAAU,CAAA,UAAA,GAAG,MAAM,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;KARrD;AASJ;;AChBD;;AAEG;MACU,aAAa,CAAA;AAA1B,IAAA,WAAA,GAAA;AACa,QAAA,IAAA,CAAA,MAAM,GAAG,MAAM,SAAS,CAAC;AACzB,QAAA,IAAA,CAAA,UAAU,GAAG,MAAM,KAAK,CAAC;KACrC;AAAA;;ACND;;AAEG;MACU,YAAY,CAAA;AAAzB,IAAA,WAAA,GAAA;QACY,IAAM,CAAA,MAAA,GAAG,KAAK,CAAC;AAEd,QAAA,IAAA,CAAA,MAAM,GAAG,CAAC,MAA4B,KAAI;YAC/C,IAAI,MAAM,oCAAiD;AACvD,gBAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACtB,aAAA;AACL,SAAC,CAAC;QAEO,IAAU,CAAA,UAAA,GAAG,MAAM,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC;KACrD;AAAA;;ACbD;;AAEG;MACU,cAAc,CAAA;AAA3B,IAAA,WAAA,GAAA;AACa,QAAA,IAAA,CAAA,UAAU,GAAG,MAAM,IAAI,CAAC;AACxB,QAAA,IAAA,CAAA,MAAM,GAAG,MAAM,SAAS,CAAC;KACrC;AAAA;;ACND;;;;;;;;;;;;;;;;;AAiBG;MACU,gBAAgB,CAAA;AAGzB,IAAA,WAAA,CAAoB,QAAmB,EAAA;QAAnB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QAF/B,IAAK,CAAA,KAAA,GAAG,CAAC,CAAC;QAKT,IAAM,CAAA,MAAA,GAAG,MAAK;YACnB,IAAI,CAAC,KAAK,EAAE,CAAC;AACjB,SAAC,CAAC;QAEO,IAAU,CAAA,UAAA,GAAG,MAAK;YACvB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM;AAAE,gBAAA,OAAO,KAAK,CAAC;YACrD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACrC,SAAC,CAAC;KATD;AAUJ;;AC1BD;;;;;;;;;;;;;;;;AAgBG;MACU,SAAS,CAAA;AAIlB;;AAEG;IACI,OAAO,OAAO,CAAC,KAAa,EAAA;AAC/B,QAAA,OAAO,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;KACrC;AAED;;AAEG;AACI,IAAA,OAAO,MAAM,GAAA;QAChB,OAAO,SAAS,CAAC,MAAM,CAAC;KAC3B;AAED;;AAEG;AACI,IAAA,OAAO,KAAK,GAAA;QACf,OAAO,SAAS,CAAC,KAAK,CAAC;KAC1B;AAED;;AAEG;AACI,IAAA,OAAO,IAAI,GAAA;QACd,OAAO,IAAI,YAAY,EAAE,CAAC;KAC7B;AAED;;;;;;;;;;;;;;;;;AAiBG;IACI,OAAO,QAAQ,CAAC,QAAmB,EAAA;AACtC,QAAA,OAAO,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;KACzC;;AAnDuB,SAAA,CAAA,MAAM,GAAG,IAAI,cAAc,EAAE,CAAC;AAC9B,SAAA,CAAA,KAAK,GAAG,IAAI,aAAa,EAAE;;ACfvD;;;;;AAKG;MACU,aAAa,CAAA;AAEtB,IAAA,WAAA,CACqB,oBAA6E,EAC7E,mBAA2E,EAC3E,mBAA2E,EAC3E,qBAA+E,EAC/E,yBAAuF,EACvF,wBAAqF,EACrF,MAAsB,EAC/B,WAAsB,SAAS,CAAC,MAAM,EAAE,EAAA;QAP/B,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAyD;QAC7E,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAwD;QAC3E,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAwD;QAC3E,IAAqB,CAAA,qBAAA,GAArB,qBAAqB,CAA0D;QAC/E,IAAyB,CAAA,yBAAA,GAAzB,yBAAyB,CAA8D;QACvF,IAAwB,CAAA,wBAAA,GAAxB,wBAAwB,CAA6D;QACrF,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;QAC/B,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAgC;KAEnD;AAEM,IAAA,YAAY,CAAC,KAA2B,EAAA;AAC3C,QAAA,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KAC5E;AAEM,IAAA,WAAW,CAAa,SAAqB,EAAA;AAChD,QAAA,OAAO,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;KAC/E;AAEM,IAAA,MAAM,CAAC,MAAS,EAAA;AACnB,QAAA,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;KACvE;AAEM,IAAA,OAAO,CAAC,KAAa,EAAA;AACxB,QAAA,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KACvE;AAEM,IAAA,MAAM,CAAa,SAAqB,EAAA;AAC3C,QAAA,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;KAC1E;AAEM,IAAA,QAAQ,CAAC,QAA6C,EAAA;AACzD,QAAA,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC3E;AAEM,IAAA,IAAI,CAAC,QAAmB,EAAA;AAC3B,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACzB,QAAA,OAAO,IAAI,CAAC;KACf;AACJ;;AClDD;;AAEG;MACU,oBAAoB,CAAA;IAC7B,WAA6B,CAAA,oBAAqE,EACrE,mBAAmE,EACnE,mBAAmE,EACnE,qBAAuE,EACvE,yBAA+E,EAC/E,wBAA6E,EAAA;QAL7E,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAiD;QACrE,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAgD;QACnE,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAgD;QACnE,IAAqB,CAAA,qBAAA,GAArB,qBAAqB,CAAkD;QACvE,IAAyB,CAAA,yBAAA,GAAzB,yBAAyB,CAAsD;QAC/E,IAAwB,CAAA,wBAAA,GAAxB,wBAAwB,CAAqD;AACtG,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAEM,OAAO,GAAA;AACV,QAAA,OAAO,CAAC,MAAsB,KAAK,IAAI,aAAa,CAChD,IAAI,CAAC,oBAAoB,EACzB,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,mBAAmB,EACxB,IAAI,CAAC,qBAAqB,EAC1B,IAAI,CAAC,yBAAyB,EAC9B,IAAI,CAAC,wBAAwB,EAC7B,MAAM,CAAC,CAAC;KACf;AACJ;;AC1BD;;AAEG;MACU,YAAY,CAAA;AACrB,IAAA,WAAA,CACqB,oBAAqE,EACrE,gBAAkC,EAClC,eAAuC,EAAA;QAFvC,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAiD;QACrE,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;QAClC,IAAe,CAAA,eAAA,GAAf,eAAe,CAAwB;KAE3D;AAEM,IAAA,MAAM,CAAc,CAAC,OAAO,EAAE,GAAG,IAAI,CAAmB,EAAA;AAC3D,QAAA,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QAChD,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;AAClD,QAAA,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACnB,YAAA,OAAO,MAAM,CAAC;AACjB,SAAA;QAED,MAAM,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACxD,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;AACzC,QAAA,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAyB,CAAC;KACrD;AACJ;;AC3BD;;AAEG;MACU,gBAAgB,CAAA;IACzB,WACqB,CAAA,IAAoB,EACpB,IAAoB,EAAA;QADpB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAgB;QACpB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAgB;AACrC,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAEM,OAAO,GAAA;;AACV,QAAA,OAAA,CAAA,EAAA,GAAO,IAAI,CAAC,IAAI,mCAAI,IAAI,CAAC,IAAI,CAAC;KACjC;AACJ;;ACVD;;AAEG;MACU,gBAAgB,CAAA;AACzB,IAAA,WAAA,CACqB,GAA8C,EAC9C,QAAoC,EACpC,eAAgC,EAAA;QAFhC,IAAG,CAAA,GAAA,GAAH,GAAG,CAA2C;QAC9C,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAA4B;QACpC,IAAe,CAAA,eAAA,GAAf,eAAe,CAAiB;KACpD;AAEM,IAAA,WAAW,CAAI,UAA0B,EAAA;QAC5C,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;AACjC,YAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,CAAC,KAAK,IAAI,EAAE;AAChD,gBAAA,OAAO,KAAK,CAAC;AAChB,aAAA;AACJ,SAAA;QACD,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACrD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AAC/B,QAAA,OAAO,IAAI,CAAC;KACf;AACJ;;MCrBY,eAAe,CAAA;AACxB,IAAA,WAAA,CACoB,QAAmB,EACnB,MAAsB,EACtB,QAA8C,EAAA;QAF9C,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QACnB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;QACtB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAsC;KAEjE;AACJ;;ACLD;;AAEG;MACU,qBAAqB,CAAA;IAC9B,WAA6B,CAAA,QAAkB,EAClB,OAAmB,EAAA;QADnB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAY;AAC5C,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAsB,EAAE,QAAmB,EAAE,QAA6C,KAAI;YAClG,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC/D,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC;AACzB,SAAC,CAAC;KACL;AACJ;;MCnBY,YAAY,CAAA;AACrB,IAAA,WAAA,CACoB,QAAmB,EACnB,MAAsB,EACtB,MAAe,EAAA;QAFf,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QACnB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;QACtB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAS;KAElC;AACJ;;ACLD;;AAEG;MACU,mBAAmB,CAAA;IAC5B,WAA6B,CAAA,QAAkB,EAClB,OAAmB,EAAA;QADnB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAY;AAC5C,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAsB,EAAE,QAAmB,EAAE,MAAS,KAAI;YAC9D,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AAC1D,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC;AACzB,SAAC,CAAC;KACL;AACJ;;MClBY,aAAa,CAAA;AACtB,IAAA,WAAA,CACoB,QAAmB,EACnB,MAAsB,EACtB,KAAa,EAAA;QAFb,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QACnB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;QACtB,IAAK,CAAA,KAAA,GAAL,KAAK,CAAQ;KAEhC;AACJ;;ACJD;;AAEG;MACU,yBAAyB,CAAA;AAClC,IAAA,WAAA,CAA6B,QAAkB,EAClB,OAAmB,EACnB,eAA+D,EAAA;QAF/D,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAY;QACnB,IAAe,CAAA,eAAA,GAAf,eAAe,CAAgD;AACxF,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAsB,EAAE,QAAmB,EAAE,KAA2B,KAAI;AAChF,YAAA,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;AAChF,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC;AACzB,SAAC,CAAC;KACL;AACJ;;AClBD;;AAEG;MACU,oBAAoB,CAAA;IAC7B,WAA6B,CAAA,QAAkB,EAClB,OAAmB,EAAA;QADnB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAY;AAC5C,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAsB,EAAE,QAAmB,EAAE,KAAa,KAAI;YAClE,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC1D,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC;AACzB,SAAC,CAAC;KACL;AACJ;;ACfD;;AAEG;MACU,wBAAwB,CAAA;AACjC,IAAA,WAAA,CAA6B,QAAkB,EAClB,OAAmB,EACnB,eAA+D,EAAA;QAF/D,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAY;QACnB,IAAe,CAAA,eAAA,GAAf,eAAe,CAAgD;AACxF,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAa,MAAsB,EAAE,QAAmB,EAAE,SAAqB,KAAI;AACtF,YAAA,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC;AACpF,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC;AACzB,SAAC,CAAC;KACL;AACJ;;MCpBY,YAAY,CAAA;AACrB,IAAA,WAAA,CACoB,QAAmB,EACnB,MAAsB,EACtB,SAAqB,EAAA;QAFrB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAW;QACnB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAgB;QACtB,IAAS,CAAA,SAAA,GAAT,SAAS,CAAY;KAExC;AACJ;;ACLD;;AAEG;MACU,mBAAmB,CAAA;IAC5B,WAA6B,CAAA,QAAkB,EAClB,OAAmB,EAAA;QADnB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAY;AAC5C,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAa,MAAsB,EAAE,QAAmB,EAAE,SAAqB,KAAI;YACtF,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAC7D,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC;AACzB,SAAC,CAAC;KACL;AACJ;;ACpBD;;AAEG;MACU,sBAAsB,CAAA;AAC/B,IAAA,WAAA,GAAA;AACI,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;QACH,OAAO,CAAI,KAAQ,KAAI;YACnB,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAI,KAAK,CAAC,CAAC;YAC1C,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1C,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5C,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAChD,YAAA,OAAO,OAAO,CAAC;AACnB,SAAC,CAAC;KACL;AACJ;;ACjBD;;AAEG;MACU,sBAAsB,CAAA;AAC/B,IAAA,WAAA,GAAA;AACI,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;QACH,OAAO,CAAI,KAAQ,KAAI;YACnB,MAAM,OAAO,GAAG,OAAO,CAAC,MAAM,CAAI,KAAK,CAAC,CAAC;YACzC,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC1C,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC5C,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAChD,YAAA,OAAO,OAAO,CAAC;AACnB,SAAC,CAAC;KACL;AACJ;;MCfY,sBAAsB,CAAA;IAE/B,WAA6B,CAAA,0BAAsD,EACtD,+BAAgE,EAAA;QADhE,IAA0B,CAAA,0BAAA,GAA1B,0BAA0B,CAA4B;QACtD,IAA+B,CAAA,+BAAA,GAA/B,+BAA+B,CAAiC;KAC5F;AAED,IAAA,MAAM,CAAC,WAAmC,EAAA;AACtC,QAAA,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,GAAG,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC9E,IAAI,KAAK,KAAK,KAAK,EAAE;YACjB,MAAM,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC7D,SAAA;KACJ;AACJ;;ACDD;;AAEG;AACH,uBAAe;AACX,IAAA;AACI,QAAA,OAAO,EAAE,YAAY;AACrB,QAAA,QAAQ,EAAE,YAAY;AACtB,QAAA,IAAI,EAAE,CAAC,oBAAoB,EAAE,gBAAgB,EAAE,sBAAsB,CAAC;AACzE,KAAA;IACD,EAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAC;IAC/C,EAAC,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,IAAI,EAAE,EAAE,EAAC;IAC7E,EAAC,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,IAAI,EAAE,EAAE,EAAC;AAC7E,IAAA,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAC;AAClG,IAAA,EAAC,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAC;AAChG,IAAA,EAAC,OAAO,EAAE,qBAAqB,EAAE,QAAQ,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAC;AACpG,IAAA,EAAC,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,OAAO,CAAC,EAAC;AAChG,IAAA;AACI,QAAA,OAAO,EAAE,yBAAyB;AAClC,QAAA,QAAQ,EAAE,yBAAyB;AACnC,QAAA,IAAI,EAAE,CAAC,gBAAgB,EAAE,OAAO,EAAE,sBAAsB,CAAC;AAC5D,KAAA;AACD,IAAA;AACI,QAAA,OAAO,EAAE,wBAAwB;AACjC,QAAA,QAAQ,EAAE,wBAAwB;AAClC,QAAA,IAAI,EAAE,CAAC,gBAAgB,EAAE,OAAO,EAAE,sBAAsB,CAAC;AAC5D,KAAA;AACD,IAAA;QACI,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE;YACjE,oBAAoB;YACpB,mBAAmB;YACnB,mBAAmB;YACnB,qBAAqB;YACrB,yBAAyB;YACzB,wBAAwB;AAC3B,SAAA;AACJ,KAAA;CACJ;;AC7CD;;AAEG;MACU,QAAQ,CAAA;AACjB,IAAA,WAAA,CACqB,WAAwB,EACxB,kBAAsC,EACtC,gBAAkC,EAAA;QAFlC,IAAW,CAAA,WAAA,GAAX,WAAW,CAAa;QACxB,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;QACtC,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;KAEtD;IAEM,IAAI,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAmB,EAAE,KAAY,EAAA;QAC1D,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAClD,QAAA,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACnB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;AAC3D,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;YACtE,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAC5D,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC5C,YAAA,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC9B,SAAA;KACJ;AACJ;;ACxBD;;AAEG;MACU,WAAW,CAAA;IAEpB,WACqB,CAAA,QAAoC,EACpC,OAAgB,EAAA;QADhB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAA4B;QACpC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;KAEpC;AAEM,IAAA,KAAK,CAAI,QAAwB,EAAA;QACpC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE;AAClD,YAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,KAAK,IAAI,EAAE;gBACrD,KAAK,IAAI,CAAC,CAAC;AACd,aAAA;AACJ,SAAA;AAED,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;ACpBD;;AAEG;MACU,eAAe,CAAA;AAExB,IAAA,WAAA,CACqB,oBAA0C,EAC1C,2BAAwD,EACxD,OAAgB,EAAA;QAFhB,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;QAC1C,IAA2B,CAAA,2BAAA,GAA3B,2BAA2B,CAA6B;QACxD,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;KACpC;AAEM,IAAA,MAAM,CACT,QAA0B,EAC1B,YAAoB,EACpB,mBAA2B,EAAA;QAC3B,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;AACjD,QAAA,MAAM,yBAAyB,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,QAAQ,EAAE,YAAY,EAAE,mBAAmB,CAAC,CAAC;QAChH,MAAM,yBAAyB,GAAG,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACxF,MAAM,SAAS,GAAG,uCAAuC,CAAC;QAC1D,OAAO,CAAA,EAAG,yBAAyB,CAAK,EAAA,EAAA,SAAS,qBAAqB,yBAAyB,CAAA,EAAA,EAAK,SAAS,CAAA,EAAA,CAAI,CAAC;KACrH;AACJ;;AC1BK,MAAO,WAAY,SAAQ,KAAK,CAAA;AAClC,IAAA,WAAA,CAAY,OAAe,EAAA;QACvB,KAAK,CAAC,OAAO,CAAC,CAAC;KAClB;AACJ;;ACCD;;AAEG;MACU,kBAAkB,CAAA;AAC3B,IAAA,WAAA,CAA6B,eAAgC,EAAA;QAAhC,IAAe,CAAA,eAAA,GAAf,eAAe,CAAiB;KAC5D;AAEM,IAAA,IAAI,CAAC,UAA4B,EAAE,SAAiB,EAAE,KAAY,EAAA;QACrE,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrC,IAAI,MAAM,KAAK,KAAK,EAAE;AAClB,YAAA,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAClF,YAAA,MAAM,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;AAClC,SAAA;KACJ;AACJ;;ACDD;;AAEG;MACU,0BAA0B,CAAA;AAEnC,IAAA,WAAA,CAA6B,4BAAyD,EACzD,4BAAyD,EACzD,uBAA+C,EAC/C,4BAA4D,EAC5D,2BAAuD,EACvD,4BAAyD,EACzD,kBAAsC,EAAA;QANtC,IAA4B,CAAA,4BAAA,GAA5B,4BAA4B,CAA6B;QACzD,IAA4B,CAAA,4BAAA,GAA5B,4BAA4B,CAA6B;QACzD,IAAuB,CAAA,uBAAA,GAAvB,uBAAuB,CAAwB;QAC/C,IAA4B,CAAA,4BAAA,GAA5B,4BAA4B,CAAgC;QAC5D,IAA2B,CAAA,2BAAA,GAA3B,2BAA2B,CAA4B;QACvD,IAA4B,CAAA,4BAAA,GAA5B,4BAA4B,CAA6B;QACzD,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;KAElE;IAEM,MAAM,CAAI,IAAoB,EAAE,KAAqB,EAAA;QACxD,IAAI,IAAI,KAAK,KAAK;AAAE,YAAA,OAAO,IAAI,CAAC;AAChC,QAAA,IAAI,IAAI,YAAY,EAAE,IAAI,KAAK,YAAY,EAAE,EAAE;YAC3C,OAAO,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACtD,SAAA;AACD,QAAA,IAAI,IAAI,YAAY,qBAAqB,IAAI,KAAK,YAAY,qBAAqB,EAAE;YACjF,OAAO,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAChE,SAAA;AACD,QAAA,IAAI,IAAI,YAAY,qBAAqB,IAAI,KAAK,YAAY,qBAAqB,EAAE;YACjF,OAAO,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAChE,SAAA;AACD,QAAA,IAAI,IAAI,YAAY,oBAAoB,IAAI,KAAK,YAAY,oBAAoB,EAAE;YAC/E,OAAO,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC/D,SAAA;AACD,QAAA,IAAI,IAAI,YAAY,kBAAkB,IAAI,KAAK,YAAY,kBAAkB,EAAE;YAC3E,OAAO,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC3D,SAAA;AACD,QAAA,IAAI,IAAI,YAAY,gBAAgB,IAAI,KAAK,YAAY,gBAAgB,EAAE;YACvE,OAAO,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAChE,SAAA;AACD,QAAA,IAAI,IAAI,YAAY,qBAAqB,IAAI,KAAK,YAAY,qBAAqB,EAAE;YACjF,OAAO,IAAI,CAAC,4BAA4B,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAChE,SAAA;AAED,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;ACnDD;;AAEG;AACH,4BAAe;AACX,IAAA,EAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,WAAW,EAAE,kBAAkB,EAAE,gBAAgB,CAAC,EAAC;AAClG,IAAA,EAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,0BAA0B,EAAE,OAAO,CAAC,EAAC;AAC1F,IAAA,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,eAAe,CAAC,EAAC;CACvF;;ACXD;;AAEG;MACU,SAAS,CAAA;IAClB,WACY,CAAA,OAAgB,EAChB,iBAAoC,EAAA;QADpC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;KAE/C;AAEM,IAAA,SAAS,CAAC,MAAW,EAAE,OAAY,EAAE,QAAc,EAAA;AACtD,QAAA,MAAM,UAAU,GAAG,IAAI,kBAAkB,CAAC,QAAQ,CAAC,CAAC;AAEpD,QAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAE7B,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAClD;AACJ;;AChBD;;AAEG;MACU,iBAAiB,CAAA;AAC1B,IAAA,WAAA,CACY,sBAA8C,EAC9C,sBAA8C,EAC9C,YAA0B,EAAA;QAF1B,IAAsB,CAAA,sBAAA,GAAtB,sBAAsB,CAAwB;QAC9C,IAAsB,CAAA,sBAAA,GAAtB,sBAAsB,CAAwB;QAC9C,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;KAErC;AAEM,IAAA,IAAI,CAAC,WAAuB,EAAA;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC5D,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QACxD,IAAI,MAAM,KAAK,SAAS;AAAE,YAAA,OAAO,SAAS,CAAC;QAC3C,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;KACtD;AACJ;;ACsQD;;;;;;;;;;;;;;;;;;;;AAoBG;MACU,MAAM,GAAG,MAAM,CAAC,QAAQ;;ACtSrC;;AAEG;MACU,OAAO,CAAA;AAChB,IAAA,WAAA,CACY,IAAuC,EACvC,OAAgB,EAChB,sBAA8C,EAC9C,iBAAoC,EACpC,mBAAwC,EACxC,iBAAoC,EACpC,mBAAwC,EAAA;QANxC,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAmC;QACvC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAsB,CAAA,sBAAA,GAAtB,sBAAsB,CAAwB;QAC9C,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAqB;QACxC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAqB;KAEnD;AAEM,IAAA,SAAS,CAAC,QAAqB,EAAA;AAClC,QAAA,MAAM,WAAW,GAAG,IAAI,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AAExD,QAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE9B,IAAI,QAAQ,KAAK,MAAM,EAAE;YACrB,OAAO,IAAI,CAAC,IAAI,CAAC;AACpB,SAAA;QAED,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACpD,SAAA;QAED,IAAI,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YACxC,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACnD,SAAA;QAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YACtC,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACjD,SAAA;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACnD;AACJ;;MCjDY,sBAAsB,CAAA;AAAnC,IAAA,WAAA,GAAA;AACY,QAAA,IAAA,CAAA,OAAO,GAAG,IAAI,GAAG,EAAoB,CAAC;KAajD;AAXU,IAAA,GAAG,CAAC,QAAqB,EAAA;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KACrC;AAEM,IAAA,GAAG,CAAC,QAAqB,EAAA;QAC5B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KACrC;IAEM,GAAG,CAAC,QAAqB,EAAE,KAAU,EAAA;QACxC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KACrC;AACJ;;ACVD;;AAEG;MACU,mBAAmB,CAAA;AAC5B,IAAA,WAAA,CACY,OAAyB,EACzB,eAAwC,EACxC,QAAmC,EAAA;QAFnC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QACzB,IAAe,CAAA,eAAA,GAAf,eAAe,CAAyB;QACxC,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAA2B;KAE9C;AAEM,IAAA,GAAG,CAAC,IAAiB,EAAA;QACxB,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;AACxC,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;QACD,OAAO,IAAI,CAAC,OAAO;AACd,aAAA,GAAG,EAAE;AACL,aAAA,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,KAAK,SAAS,CAAC;KACtE;AACJ;;ACnBD;;AAEG;MACU,iBAAiB,CAAA;AAC1B,IAAA,WAAA,CACY,OAAyB,EACzB,eAAsC,EACtC,QAAiC,EAAA;QAFjC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QACzB,IAAe,CAAA,eAAA,GAAf,eAAe,CAAuB;QACtC,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAyB;KAE5C;AAEM,IAAA,GAAG,CAAC,IAAiB,EAAA;QACxB,IAAI,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;AACtC,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;QAED,OAAO,IAAI,CAAC,OAAO;AACd,aAAA,GAAG,EAAE;AACL,aAAA,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,KAAK,SAAS,CAAC;KACtE;AACJ;;ACpBD;;AAEG;MACU,mBAAmB,CAAA;IAG5B,WACY,CAAA,OAAgB,EAChB,iBAAoC,EAAA;QADpC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;AAJxC,QAAA,IAAA,CAAA,GAAG,GAAG,IAAI,GAAG,EAAiC,CAAC;KAMtD;AAEM,IAAA,GAAG,CAAC,QAAqB,EAAA;QAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;YAClC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,GAAG,IAAI,KAAS;gBACpC,MAAM,WAAW,GAAG,IAAI,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AACzD,gBAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBAC9B,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACpD,aAAC,CAAC,CAAC;AACN,SAAA;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KACjC;AACJ;;ACxBD;;AAEG;MACU,kBAAkB,CAAA;AAC3B,IAAA,WAAA,CACY,gBAAkC,EAAA;QAAlC,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;KAE7C;IAEM,SAAS,GAAA;AACZ,QAAA,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;KACtC;AACJ;;ACdD;;AAEG;MAEU,gBAAgB,CAAA;AAGzB,IAAA,WAAA,CAAY,UAAe,EAAA;;QAFnB,IAAS,CAAA,SAAA,GAAQ,IAAI,CAAC;AAG1B,QAAA,IAAI,CAAC,SAAS,GAAG,CAAA,EAAA,GAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAV,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAE,SAAS,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,UAAU,CAAC;KACxD;IAEM,GAAG,GAAA;QACN,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;AAEM,IAAA,GAAG,CAAC,SAAc,EAAA;AACrB,QAAA,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;KAC9B;AACJ;;ACTD;;AAEG;MACU,OAAO,CAAA;AAChB,IAAA,WAAA,CACqB,OAAgB,EAChB,sBAA8C,EAC9C,iBAAoC,EACpC,6BAA4D,EAC5D,mBAAwC,EACxC,iBAAoC,EACpC,sBAA8C,EAAA;QAN9C,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAsB,CAAA,sBAAA,GAAtB,sBAAsB,CAAwB;QAC9C,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAA6B,CAAA,6BAAA,GAA7B,6BAA6B,CAA+B;QAC5D,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAqB;QACxC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAAsB,CAAA,sBAAA,GAAtB,sBAAsB,CAAwB;KAElE;AAEM,IAAA,SAAS,CAAC,QAAqB,EAAA;AAClC,QAAA,MAAM,WAAW,GAAG,IAAI,oBAAoB,CAAC,QAAQ,CAAC,CAAC;AACvD,QAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE9B,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AAC3C,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;QAED,IAAI,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAClD,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACnD,SAAA;QAED,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAE3D,IAAI,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AACxC,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;QAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;AACtC,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AAED,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;AC7CD;;AAEG;MACU,6BAA6B,CAAA;IACtC,WACY,CAAA,OAAyB,EACzB,QAAqC,EAAA;QADrC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QACzB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAA6B;KAEhD;AAEM,IAAA,GAAG,CAAC,IAAiB,EAAA;QACxB,OAAO,IAAI,CAAC,OAAO;AACd,aAAA,GAAG,EAAE;AACL,aAAA,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,KAAK,SAAS,CAAC;KACtE;AACJ;;ACZD;;AAEG;MACU,sBAAsB,CAAA;IAE/B,WACY,CAAA,OAAyB,EACzB,OAAmC,EAAA;QADnC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QACzB,IAAO,CAAA,OAAA,GAAP,OAAO,CAA4B;KAE9C;IAEM,MAAM,CAAC,WAAuB,EAAE,QAA0B,EAAA;QAC7D,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE;YACrC,MAAM,EAAC,MAAM,EAAE,QAAQ,EAAE,EAAC,MAAM,EAAC,EAAC,GAAG,MAAM,CAAC;YAC5C,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE;AAC1C,gBAAA,MAAM,MAAM,GAAG,MAAM,KAAK,QAAQ;;oDAEe;gBACjD,MAAM,CAAC,MAAM,CAAC,CAAC;AAClB,aAAA;AACJ,SAAA;KACJ;AACJ;;ACrBD;;AAEG;MACU,OAAO,CAAA;AAChB,IAAA,WAAA,CACY,OAAgB,EAChB,sBAA8C,EAC9C,iBAAoC,EACpC,wBAAkD,EAAA;QAHlD,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAsB,CAAA,sBAAA,GAAtB,sBAAsB,CAAwB;QAC9C,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAAwB,CAAA,wBAAA,GAAxB,wBAAwB,CAA0B;KAE7D;AAEM,IAAA,SAAS,CAAC,MAAW,EAAE,QAAqB,EAAE,KAAU,EAAA;QAC3D,MAAM,UAAU,GAAG,IAAI,qBAAqB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAE9D,QAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAE7B,IAAI,QAAQ,KAAK,MAAM,EAAE;AACrB,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;QAED,IAAI,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE;AAC7D,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACzD,QAAA,IAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,EAAE;YAC7C,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AACpD,SAAA;QAED,OAAO,QAAQ,KAAK,SAAS,GAAG,IAAI,GAAG,QAAQ,CAAC;KACnD;AACJ;;ACrCD;;AAEG;MACU,kBAAkB,CAAA;AAC3B,IAAA,WAAA,CACY,gBAAkC,EAAA;QAAlC,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;KAE7C;AAEM,IAAA,SAAS,CAAC,SAAc,EAAA;QAC3B,IAAI,SAAS,KAAK,SAAS,EAAE;AACzB,YAAA,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACrC,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AACD,QAAA,OAAO,KAAK,CAAC;KAEhB;AACJ;;ACTD;;AAEG;MACU,YAAY,CAAA;AAGrB,IAAA,WAAA,CAA6B,OAAkD,EAClD,OAAgB,EAChB,OAAgB,EAChB,OAAgB,EAChB,SAAoB,EACpB,kBAAsC,EACtC,kBAAsC,EACtC,aAA4B,EAAA;QAP5B,IAAO,CAAA,OAAA,GAAP,OAAO,CAA2C;QAClD,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAS,CAAA,SAAA,GAAT,SAAS,CAAW;QACpB,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;QACtC,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;QACtC,IAAa,CAAA,aAAA,GAAb,aAAa,CAAe;KACxD;IAEM,MAAM,GAAA;AACT,QAAA,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;AAC3B,YAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;AACrC,SAAA;QAED,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;IAEO,YAAY,GAAA;AAChB,QAAA,MAAM,OAAO,GAAG;AACZ,YAAA,GAAG,EAAE,CAAC,MAAM,EAAE,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC;YACnD,GAAG,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,KAAK,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC;AACzE,YAAA,GAAG,EAAE,CAAC,MAAM,EAAE,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC;YACnD,KAAK,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC;YACjF,cAAc,EAAE,MAAM,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE;AACzD,YAAA,cAAc,EAAE,CAAC,MAAM,EAAE,SAAS,KAAK,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,SAAS,CAAC;AACnF,YAAA,SAAS,EAAE,CAAC,MAAM,EAAE,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC;SAClE,CAAC;AAEF,QAAA,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YACnB,OAAO,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AAC3C,SAAA;QAED,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;KAClD;AACJ;;AChDD;;AAEG;MACU,YAAY,GAAG,IAAI,cAAc,CAAoB,cAAc;;ACDhF;;AAEG;MACU,wBAAwB,CAAA;AACjC,IAAA,WAAA,CACY,OAAyB,EACzB,0BAAsD,EACtD,GAA6C,EAAA;QAF7C,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QACzB,IAA0B,CAAA,0BAAA,GAA1B,0BAA0B,CAA4B;QACtD,IAAG,CAAA,GAAA,GAAH,GAAG,CAA0C;KAExD;AAEM,IAAA,UAAU,CAAC,IAAiB,EAAA;QAC/B,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QACrC,IAAI,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE;AACxC,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACxE,YAAA,OAAO,UAAU,CAAC,GAAG,YAAY,QAAQ,IAAI,UAAU,CAAC,GAAG,KAAK,SAAS,IAAI,UAAU,CAAC,QAAQ,KAAK,KAAK,CAAC;AAC9G,SAAA;AACD,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;ACpBD;;AAEG;MACU,aAAa,CAAA;IACtB,WACY,CAAA,OAAgB,EAChB,iBAAoC,EAAA;QADpC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAChB,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;KAE/C;AAEM,IAAA,SAAS,CAAC,IAAW,EAAA;AACxB,QAAA,MAAM,WAAW,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;AACpD,QAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC9B,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACnD;AACJ;;ACID;;AAEG;AACH,4BAAe;AACX,IAAA;QACI,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE;YACjD,YAAY;YACZ,OAAO;YACP,OAAO;YACP,OAAO;YACP,SAAS;YACT,kBAAkB;YAClB,kBAAkB;YAClB,aAAa;AAChB,SAAA;AACJ,KAAA;AACD,IAAA,EAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,iBAAiB,CAAC,EAAC;AAC7E,IAAA;QACI,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE;YACvC,IAAI;YACJ,OAAO;YACP,sBAAsB;YACtB,iBAAiB;YACjB,mBAAmB;YACnB,iBAAiB;YACjB,mBAAmB;AACtB,SAAA;AACJ,KAAA;AACD,IAAA,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,gBAAgB,CAAC,EAAC;AACrF,IAAA;QACI,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE;YACvC,OAAO;YACP,sBAAsB;YACtB,iBAAiB;YACjB,6BAA6B;YAC7B,mBAAmB;YACnB,iBAAiB;YACjB,sBAAsB;AACzB,SAAA;AACJ,KAAA;IACD,EAAC,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,IAAI,EAAE,EAAE,EAAC;IAC7E,EAAC,OAAO,EAAE,gBAAgB,EAAE,UAAU,EAAE,CAAC,EAAC,MAAM,EAAC,KAAK,IAAI,gBAAgB,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,YAAY,CAAC,EAAC;AACzG,IAAA;AACI,QAAA,OAAO,EAAE,OAAO;AAChB,QAAA,QAAQ,EAAE,OAAO;QACjB,IAAI,EAAE,CAAC,OAAO,EAAE,sBAAsB,EAAE,iBAAiB,EAAE,wBAAwB,CAAC;AACvF,KAAA;AACD,IAAA,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,gBAAgB,CAAC,EAAC;AACrF,IAAA,EAAC,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,iBAAiB,CAAC,EAAC;AACjG,IAAA,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,iBAAiB,CAAC,EAAC;CACxF;;ACrED;;AAEG;AACH,yBAAe;AACX,IAAA,EAAC,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,0BAA0B,CAAC,EAAC;CACnH;;ACAD;;AAEG;MACU,YAAY,CAAA;IACrB,WACY,CAAA,oBAA0C,EAC1C,kBAAsC,EAAA;QADtC,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;QAC1C,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;KAEjD;IAEM,IAAI,CAAI,MAAkB,EAAE,WAAuB,EAAA;QACtD,IAAI,MAAM,YAAY,aAAa,EAAE;YACjC,OAAO,MAAM,CAAC,KAAK,CAAC;AACvB,SAAA;QACD,IAAI,MAAM,YAAY,eAAe,EAAE;AACnC,YAAA,OAAO,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AACvE,SAAA;QACD,IAAI,MAAM,YAAY,YAAY,EAAE;AAChC,YAAA,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AACnE,SAAA;QACD,IAAI,MAAM,YAAY,YAAY,EAAE;YAChC,MAAM,MAAM,CAAC,SAAS,CAAC;AAC1B,SAAA;KACJ;AACJ;;AC/BD;;AAEG;MACU,oBAAoB,CAAA;IACtB,IAAI,CAAS,QAA6C,EAAE,WAAuB,EAAA;QACtF,OAAO,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;KACnD;AACJ;;ACGD;;AAEG;MACU,kBAAkB,CAAA;AAC3B,IAAA,WAAA,CACY,KAAiD,EAAA;QAAjD,IAAK,CAAA,KAAA,GAAL,KAAK,CAA4C;KAE5D;IAEM,IAAI,CAAC,MAAW,EAAE,WAAuB,EAAA;QAC5C,IAAI,WAAW,YAAY,qBAAqB,EAAE;AAC9C,YAAA,OAAO,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACnC,SAAA;QACD,IAAI,WAAW,YAAY,qBAAqB,EAAE;YAC9C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC;AAC7C,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;QACD,IAAI,WAAW,YAAY,gBAAgB,EAAE;YACzC,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACxC,YAAA,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;AACvD,SAAA;QACD,IAAI,WAAW,YAAY,kBAAkB,EAAE;AAC3C,YAAA,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;AAC1D,SAAA;QACD,IAAI,WAAW,YAAY,oBAAoB,EAAE;AAC7C,YAAA,OAAO,WAAW,CAAC,IAAI,IAAI,MAAM,CAAC;AACrC,SAAA;QAED,IAAI,WAAW,YAAY,qBAAqB,EAAE;YAC9C,OAAO,IAAI,MAAM,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AAC1C,SAAA;KACJ;AACJ;;ACvCD;;AAEG;MACU,sBAAsB,CAAA;IAE/B,WACY,CAAA,OAAyB,EACzB,OAAmC,EAAA;QADnC,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QACzB,IAAO,CAAA,OAAA,GAAP,OAAO,CAA4B;KAE9C;AAEM,IAAA,GAAG,CAAC,WAAuB,EAAA;QAC9B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE;YACrC,MAAM,EAAC,MAAM,EAAE,QAAQ,EAAE,EAAC,UAAU,EAAC,EAAC,GAAG,MAAM,CAAC;AAChD,YAAA,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,UAAU,EAAE,KAAK,IAAI,EAAE;AACnE,gBAAA,OAAO,MAAM,CAAC;AACjB,aAAA;AACJ,SAAA;KACJ;AACJ;;ACtBD;;AAEG;MACU,aAAa,GAAG,IAAI,cAAc,CAAuB,eAAe;;ACKrF;;AAEG;AACH,kCAAe;AACX,IAAA,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,EAAC;AAC3D,IAAA,EAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,EAAC;AACjG,IAAA,EAAC,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,0BAA0B,CAAC,EAAC;AAChH,IAAA,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,aAAa,CAAC,EAAC;AAClF,IAAA;AACI,QAAA,OAAO,EAAE,iBAAiB;AAC1B,QAAA,QAAQ,EAAE,iBAAiB;AAC3B,QAAA,IAAI,EAAE,CAAC,sBAAsB,EAAE,sBAAsB,EAAE,YAAY,CAAC;AACvE,KAAA;IACD,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,EAAE,EAAC;CAC5E;;ACnBD;;AAEG;MACU,oBAAoB,CAAA;IAE7B,WAA6B,CAAA,oBAA0C,EAC1C,OAAkD,EAAA;QADlD,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;QAC1C,IAAO,CAAA,OAAA,GAAP,OAAO,CAA2C;KAE9E;AAEM,IAAA,MAAM,CAAC,UAA4B,EAAE,YAAoB,EAAE,mBAA2B,EAAA;QACzF,MAAM,qBAAqB,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC3E,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;AACnC,QAAA,MAAM,eAAe,GAAG,QAAQ,KAAK,SAAS,GAAG,CAAA,IAAA,EAAO,QAAQ,CAAE,CAAA,GAAG,EAAE,CAAC;AACxE,QAAA,OAAO,CAAG,EAAA,qBAAqB,CAAG,EAAA,eAAe,CAAI,CAAA,EAAA,YAAY,CAAC,WAAW,EAAE,CAAA,iBAAA,EAAoB,mBAAmB,CAAA,QAAA,CAAU,CAAC;KACpI;AACJ;;ACJD;;AAEG;MACU,oBAAoB,CAAA;AAE7B,IAAA,WAAA,CAA6B,oBAA0C,EAC1C,oBAA0C,EAC1C,eAAkC,EAClC,oBAAqC,EACrC,iBAAoC,EACpC,mBAAwC,EACxC,oBAA0C,EAAA;QAN1C,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;QAC1C,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;QAC1C,IAAe,CAAA,eAAA,GAAf,eAAe,CAAmB;QAClC,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAiB;QACrC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAqB;QACxC,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;KAEtE;AAEM,IAAA,MAAM,CAAC,WAAiC,EAAA;QAC3C,IAAI,WAAW,YAAY,qBAAqB;YAAE,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACvG,IAAI,WAAW,YAAY,qBAAqB;YAAE,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACvG,IAAI,WAAW,YAAY,oBAAoB;YAAE,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACrG,IAAI,WAAW,YAAY,kBAAkB;YAAE,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC/F,IAAI,WAAW,YAAY,gBAAgB;YAAE,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAClG,IAAI,WAAW,YAAY,qBAAqB;YAAE,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACvG,IAAI,WAAW,YAAY,EAAE;YAAE,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;AAEjF,QAAA,OAAO,SAAS,CAAC;KACpB;AACJ;;ACvCD;;AAEG;MACU,oBAAoB,CAAA;IAE7B,WAAoB,CAAA,iBAAoC,EACpC,oBAA0C,EAAA;QAD1C,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;KAE7D;AAEM,IAAA,MAAM,CAAC,UAAiC,EAAA;AAC3C,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC9D,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACtE,QAAA,OAAO,CAAiB,cAAA,EAAA,KAAK,CAAkB,eAAA,EAAA,WAAW,IAAI,CAAC;KAClE;AACJ;;ACjBD;;AAEG;MACU,iBAAiB,CAAA;AACnB,IAAA,MAAM,CAAC,MAAqB,EAAA;QAC/B,IAAI,MAAM,YAAY,EAAE;AAAE,YAAA,OAAO,CAAU,MAAA,EAAA,MAAkB,CAAC,SAAS,GAAG,CAAC;AAC3E,QAAA,IAAI,MAAM,YAAY,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ;YAAE,OAAO,CAAA,EAAA,EAAK,MAAM,CAAA,EAAA,CAAI,CAAC;QACnF,IAAI,MAAM,YAAY,KAAK,EAAE;YACzB,MAAM,WAAW,GAAG,EAAE,CAAC;AACvB,YAAA,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;gBACxB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACxC,aAAA;YAED,OAAO,CAAA,CAAA,EAAI,WAAW,CAAA,CAAA,CAAG,CAAC;AAC7B,SAAA;QACD,OAAO,CAAA,EAAG,MAAM,CAAA,CAAE,CAAC;KACtB;AACJ;;ACnBD;;AAEG;MACU,oBAAoB,CAAA;AACtB,IAAA,MAAM,CAAC,QAAqB,EAAA;AAC/B,QAAA,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;KAC3B;AACJ;;ACHD;;AAEG;MACU,eAAe,CAAA;IAExB,WAA6B,CAAA,iBAAoC,EACpC,oBAA0C,EAAA;QAD1C,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;KAEtE;AAEM,IAAA,MAAM,CAAC,UAA4B,EAAA;QACtC,MAAM,SAAS,GAAa,EAAE,CAAC;AAE/B,QAAA,KAAK,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE;AAC/B,YAAA,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AACtD,SAAA;QAED,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnC,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACtE,QAAA,OAAO,CAAG,EAAA,WAAW,CAAI,CAAA,EAAA,KAAK,GAAG,CAAC;KACrC;AACJ;;ACtBD;;AAEG;MACU,iBAAiB,CAAA;AAE1B,IAAA,WAAA,CAAoB,iBAAoC,EAAA;QAApC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;KAEvD;AAEM,IAAA,MAAM,CAAC,UAA8B,EAAA;AACxC,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC7D,OAAO,CAAA,CAAA,EAAI,KAAK,CAAA,CAAA,CAAG,CAAC;KACvB;AACJ;;ACbD;;AAEG;MACU,mBAAmB,CAAA;AAC5B,IAAA,WAAA,CAAoB,oBAA0C,EAAA;QAA1C,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;KAE7D;AAEM,IAAA,MAAM,CAAC,UAAgC,EAAA;AAC1C,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtE,OAAO,CAAA,kBAAA,EAAqB,WAAW,CAAA,EAAA,CAAI,CAAC;KAC/C;AACJ;;ACZD;;AAEG;MACU,oBAAoB,CAAA;AAC7B,IAAA,WAAA,CAA6B,oBAA0C,EAAA;QAA1C,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;KAEtE;AAEM,IAAA,MAAM,CAAC,WAAkC,EAAA;AAC5C,QAAA,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvE,OAAO,CAAA,YAAA,EAAe,WAAW,CAAA,EAAA,CAAI,CAAC;KACzC;AACJ;;ACZD;;AAEG;MACU,oBAAoB,CAAA;AAE7B,IAAA,WAAA,CAAoB,iBAAoC,EAAA;QAApC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;KAEvD;AAEM,IAAA,MAAM,CAAC,UAAiC,EAAA;AAC3C,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC7D,OAAO,CAAA,gBAAA,EAAmB,KAAK,CAAA,CAAA,CAAG,CAAC;KACtC;AACJ;;ACDD;;AAEG;AACH,0BAAe;AACX,IAAA;AACI,QAAA,OAAO,EAAE,eAAe;AACxB,QAAA,QAAQ,EAAE,eAAe;AACzB,QAAA,IAAI,EAAE,CAAC,oBAAoB,EAAE,2BAA2B,EAAE,OAAO,CAAC;AACrE,KAAA;AACD,IAAA,EAAC,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,2BAA2B,EAAE,IAAI,EAAE,CAAC,oBAAoB,CAAC,EAAC;AAC3G,IAAA,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,EAAC;IAChH,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,EAAE,EAAC;AACzE,IAAA,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,EAAC;AACtG,IAAA,EAAC,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAC;AACpF,IAAA,EAAC,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,oBAAoB,CAAC,EAAC;AAC3F,IAAA,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,oBAAoB,CAAC,EAAC;AAC7F,IAAA,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,oBAAoB,EAAE,YAAY,CAAC,EAAC;IAC3G,EAAC,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAAE,EAAC;AACnE,IAAA,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,iBAAiB,CAAC,EAAC;AAC1F,IAAA;AACI,QAAA,OAAO,EAAE,oBAAoB;AAC7B,QAAA,QAAQ,EAAE,oBAAoB;AAC9B,QAAA,IAAI,EAAE;YACF,oBAAoB;YACpB,oBAAoB;YACpB,iBAAiB;YACjB,eAAe;YACf,iBAAiB;YACjB,mBAAmB;YACnB,oBAAoB;AACvB,SAAA;AACJ,KAAA;CACJ;;AC5CD;;AAEG;MACU,2BAA2B,CAAA;IAC7B,GAAG,CAAC,IAAiB,EAAE,UAAgC,EAAA;QAC1D,IAAI,UAAU,YAAY,gBAAgB,EAAE;AACxC,YAAA,OAAO,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC;AACnC,SAAA;AAED,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;ACTD;;AAEG;MACU,qBAAqB,CAAA;AAC9B,IAAA,WAAA,CACY,OAAyB,EACzB,0BAAsD,EACtD,GAA6C,EAAA;QAF7C,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QACzB,IAA0B,CAAA,0BAAA,GAA1B,0BAA0B,CAA4B;QACtD,IAAG,CAAA,GAAA,GAAH,GAAG,CAA0C;KAExD;AAEM,IAAA,SAAS,CAAC,IAAiB,EAAA;QAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QACrC,IAAI,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE;AACxC,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACxE,YAAA,OAAO,UAAU,CAAC,KAAK,YAAY,QAAQ,CAAC;AAC/C,SAAA;AACD,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;ACnBD;;AAEG;MACU,uBAAuB,CAAA;IAChC,WAAoB,CAAA,2BAAwD,EACxD,uBAAgD,EAAA;QADhD,IAA2B,CAAA,2BAAA,GAA3B,2BAA2B,CAA6B;QACxD,IAAuB,CAAA,uBAAA,GAAvB,uBAAuB,CAAyB;KAEnE;IAEM,GAAG,CAAC,IAAiB,EAAE,MAAwB,EAAA;AAClD,QAAA,IAAI,MAAM,YAAY,YAAY,IAAI,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE;AACzF,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AACD,QAAA,OAAO,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;KACpE;AACJ;;ACpBD;;AAEG;MACU,uBAAuB,CAAA;IACzB,GAAG,CAAC,IAAiB,EAAE,MAAW,EAAA;AACrC,QAAA,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,QAAQ,CAAC;KAC3C;AACJ;;ACHD;;AAEG;MACU,6BAA6B,CAAA;IAC/B,GAAG,CAAC,IAAiB,EAAE,UAAgC,EAAA;QAC1D,IAAI,UAAU,YAAY,EAAE;AACrB,eAAA,UAAU,YAAY,kBAAkB;AACxC,eAAA,UAAU,YAAY,gBAAgB;eACtC,UAAU,YAAY,oBAAoB,EAAE;AAC/C,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;AAED,QAAA,OAAO,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC;KACnC;AACJ;;ACbD;;AAEG;MACU,uBAAuB,CAAA;AAChC,IAAA,WAAA,CACY,OAAyB,EACzB,0BAAsD,EACtD,GAA6C,EAAA;QAF7C,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QACzB,IAA0B,CAAA,0BAAA,GAA1B,0BAA0B,CAA4B;QACtD,IAAG,CAAA,GAAA,GAAH,GAAG,CAA0C;KAExD;AAEM,IAAA,WAAW,CAAC,IAAiB,EAAA;QAChC,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QACrC,IAAI,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE;AACxC,YAAA,MAAM,UAAU,GAAG,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;AACxE,YAAA,OAAO,UAAU,CAAC,GAAG,KAAK,SAAS,IAAI,CAAC,UAAU,CAAC,KAAK,YAAY,QAAQ,MAAM,KAAK,CAAC;AAC3F,SAAA;AACD,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;ACnBD;;AAEG;MACU,yBAAyB,CAAA;IAClC,WAAoB,CAAA,6BAA4D,EAC5D,yBAAoD,EAAA;QADpD,IAA6B,CAAA,6BAAA,GAA7B,6BAA6B,CAA+B;QAC5D,IAAyB,CAAA,yBAAA,GAAzB,yBAAyB,CAA2B;KAEvE;IAEM,GAAG,CAAC,IAAiB,EAAE,MAAwB,EAAA;AAClD,QAAA,IAAI,MAAM,YAAY,YAAY,IAAI,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE;AAC3F,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AACD,QAAA,OAAO,IAAI,CAAC,6BAA6B,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;KACtE;AACJ;;ACpBD;;AAEG;MACU,yBAAyB,CAAA;IAC3B,GAAG,CAAC,IAAiB,EAAE,MAAW,EAAA;AACrC,QAAA,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,QAAQ,MAAM,KAAK,CAAC;KACpF;AACJ;;ACHD;;AAEG;MACU,2BAA2B,CAAA;IAC7B,GAAG,CAAC,IAAiB,EAAE,MAAwB,EAAA;QAClD,MAAM,EAAC,QAAQ,EAAE,EAAC,UAAU,EAAC,EAAC,GAAG,MAAM,CAAC;AAExC,QAAA,IAAI,UAAU,EAAE,KAAK,KAAK,EAAE;AACxB,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;AAED,QAAA,IAAI,MAAM,CAAC,MAAM,YAAY,oBAAoB,EAAE;AAC/C,YAAA,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC;AACtC,SAAA;AAED,QAAA,IAAI,MAAM,CAAC,MAAM,YAAY,EAAE,EAAE;AAC7B,YAAA,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7D,SAAA;AAED,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;ACzBD;;AAEG;MACU,0BAA0B,CAAA;IACnC,GAAG,CAAC,MAAW,EAAE,IAAiB,EAAA;QAC9B,IAAI,SAAS,GAAG,MAAM,CAAC;QACvB,OAAO,SAAS,KAAK,IAAI,EAAE;YACvB,MAAM,UAAU,GAAG,OAAO,CAAC,wBAAwB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YACrE,IAAI,UAAU,KAAK,SAAS;AAAE,gBAAA,OAAO,UAAU,CAAC;AAChD,YAAA,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;AACjD,SAAA;KACJ;AACJ;;ACVD;;AAEG;MACU,WAAW,GAAG,IAAI,cAAc,CAAqB,aAAa;;ACa/E;;AAEG;AACH,6BAAe;IACX,EAAC,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,2BAA2B,EAAE,IAAI,EAAE,EAAE,EAAC;AACvF,IAAA;AACI,QAAA,OAAO,EAAE,iBAAiB;AAC1B,QAAA,QAAQ,EAAE,iBAAiB;AAC3B,QAAA,IAAI,EAAE,CAAC,OAAO,EAAE,qBAAqB,EAAE,uBAAuB,CAAC;AAClE,KAAA;IACD,EAAC,OAAO,EAAE,uBAAuB,EAAE,QAAQ,EAAE,uBAAuB,EAAE,IAAI,EAAE,EAAE,EAAC;AAC/E,IAAA;AACI,QAAA,OAAO,EAAE,uBAAuB;AAChC,QAAA,QAAQ,EAAE,uBAAuB;AACjC,QAAA,IAAI,EAAE,CAAC,2BAA2B,EAAE,uBAAuB,CAAC;AAC/D,KAAA;IACD,EAAC,OAAO,EAAE,6BAA6B,EAAE,QAAQ,EAAE,6BAA6B,EAAE,IAAI,EAAE,EAAE,EAAC;AAC3F,IAAA;AACI,QAAA,OAAO,EAAE,mBAAmB;AAC5B,QAAA,QAAQ,EAAE,mBAAmB;AAC7B,QAAA,IAAI,EAAE,CAAC,OAAO,EAAE,uBAAuB,EAAE,yBAAyB,CAAC;AACtE,KAAA;IACD,EAAC,OAAO,EAAE,yBAAyB,EAAE,QAAQ,EAAE,yBAAyB,EAAE,IAAI,EAAE,EAAE,EAAC;AACnF,IAAA;AACI,QAAA,OAAO,EAAE,yBAAyB;AAClC,QAAA,QAAQ,EAAE,yBAAyB;AACnC,QAAA,IAAI,EAAE,CAAC,6BAA6B,EAAE,yBAAyB,CAAC;AACnE,KAAA;AACD,IAAA;AACI,QAAA,OAAO,EAAE,6BAA6B;AACtC,QAAA,QAAQ,EAAE,6BAA6B;AACvC,QAAA,IAAI,EAAE,CAAC,OAAO,EAAE,2BAA2B,CAAC;AAC/C,KAAA;IACD,EAAC,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,2BAA2B,EAAE,IAAI,EAAE,EAAE,EAAC;AACvF,IAAA;AACI,QAAA,OAAO,EAAE,qBAAqB;AAC9B,QAAA,QAAQ,EAAE,qBAAqB;AAC/B,QAAA,IAAI,EAAE,CAAC,gBAAgB,EAAE,0BAA0B,EAAE,WAAW,CAAC;AACpE,KAAA;AACD,IAAA;AACI,QAAA,OAAO,EAAE,wBAAwB;AACjC,QAAA,QAAQ,EAAE,wBAAwB;AAClC,QAAA,IAAI,EAAE,CAAC,gBAAgB,EAAE,0BAA0B,EAAE,WAAW,CAAC;AACpE,KAAA;AACD,IAAA;AACI,QAAA,OAAO,EAAE,uBAAuB;AAChC,QAAA,QAAQ,EAAE,uBAAuB;AACjC,QAAA,IAAI,EAAE,CAAC,gBAAgB,EAAE,0BAA0B,EAAE,WAAW,CAAC;AACpE,KAAA;IACD,EAAC,OAAO,EAAE,0BAA0B,EAAE,QAAQ,EAAE,0BAA0B,EAAE,IAAI,EAAE,EAAE,EAAC;AACrF,IAAA,EAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,EAAC;CAC1D;;ACnED;;AAEG;MACU,kBAAkB,CAAA;AAC3B,IAAA,KAAK,CAAI,OAAwB,EAAA;QAC7B,MAAM,MAAM,IAAI,MAAM,SAAS,CAAiB,CAAC;QACjD,OAAQ,MAAA,CAAA,MAAA,CAAA,EAAA,MAAM,EAAK,EAAA,OAAO,CAAE,CAAA;KAC/B;AACJ;;ACND;;AAEG;AACG,SAAU,oBAAoB,CAAI,OAAwB,EAAA;IAC5D,OAAO;QACH,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,EAAE,EAAC;QACrE,EAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,kBAAkB,CAAC,EAAC;KACrG,CAAC;AACN;;ACMA;;AAEG;MACU,QAAQ,CAAA;AACjB,IAAA,WAAA,CACoB,OAAkD,EAClD,OAAgB,EACf,QAAkB,EAClB,SAA4D,EAC5D,WAA4B,EAC5B,QAAqB,EACrB,gBAAkC,EAClC,IAAuC,EACvC,YAA6B,EAAA;QAR9B,IAAO,CAAA,OAAA,GAAP,OAAO,CAA2C;QAClD,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QACf,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAS,CAAA,SAAA,GAAT,SAAS,CAAmD;QAC5D,IAAW,CAAA,WAAA,GAAX,WAAW,CAAiB;QAC5B,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAa;QACrB,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;QAClC,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAmC;QACvC,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAiB;KAEjD;AAED,IAAA,IAAW,IAAI,GAAA;AACX,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;KAC5B;AAEM,IAAA,OAAO,CAAmE,KAAkC,EAAA;QAC/G,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAiB,CAAC;KACzD;AAEM,IAAA,KAAK,CAC6C,UAAa,EAAA;QAClE,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAI,WAAW,CAAC,CAAC;KACnD;IAEM,MAAM,CAAC,UAA0B,EAAE,KAAY,EAAA;QAClD,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,IAAgB,CAAC;KAChC;IAEM,MAAM,GAAA;AACT,QAAA,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;KACpC;AAEM,IAAA,WAAW,CAAC,SAAe,EAAA;AAC9B,QAAA,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC,IAAgB,CAAC;KAChC;AAED;;AAEG;IACI,UAAU,CAAC,QAA2B,EAAE,UAA0B,EAAA;AACrE,QAAA,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC,IAAgB,CAAC;KAChC;AACJ;;AC5DD;;AAEG;AACH,wBAAe;AACX,IAAA;QACI,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE;YACzC,YAAY;YACZ,OAAO;YACP,QAAQ;YACR,oBAAoB;YACpB,YAAY;YACZ,QAAQ;YACR,gBAAgB;YAChB,IAAI;YACJ,YAAY;AACf,SAAA;AACJ,KAAA;CACJ;;ACvBD;;AAEG;MACU,eAAe,CAAA;IACxB,WACqB,CAAA,IAAmD,EACnD,cAAsC,EAAA;QADtC,IAAI,CAAA,IAAA,GAAJ,IAAI,CAA+C;QACnD,IAAc,CAAA,cAAA,GAAd,cAAc,CAAwB;KAC1D;AAEM,IAAA,MAAM,CAAI,UAA0B,EAAA;QACvC,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACvD,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC7B;AACJ;;ACfD;;AAEG;MACU,SAAS,GAAG,IAAI,cAAc,CAAiB,WAAW;;ACDvE;;AAEG;MACU,iBAAiB,CAAA;AAC1B,IAAA,WAAA,GAAA;AACI,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;QACH,OAAO,IAAI,GAAG,EAAwC,CAAC;KAC1D;AACJ;;ACTD;;AAEG;MACU,sBAAsB,CAAA;AAC/B,IAAA,WAAA,CACqB,OAAkD,EAClD,qBAA4C,EAC5C,sBAA8C,EAAA;QAF9C,IAAO,CAAA,OAAA,GAAP,OAAO,CAA2C;QAClD,IAAqB,CAAA,qBAAA,GAArB,qBAAqB,CAAuB;QAC5C,IAAsB,CAAA,sBAAA,GAAtB,sBAAsB,CAAwB;KAClE;AAEM,IAAA,MAAM,CAAI,UAA0B,EAAA;QACvC,OAAO;AACH,YAAA,IAAI,EAAE,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC;AACtE,YAAA,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;YAC3B,cAAc,EAAE,IAAI,CAAC,sBAAsB;SAC9C,CAAC;KACL;AACJ;;ACXD;;AAEG;MACU,qBAAqB,CAAA;IAC9B,WACqB,CAAA,kBAAsC,EACtC,eAAkC,EAClC,oBAA0C,EAC1C,oBAAqC,EACrC,iBAAoC,EAAA;QAJpC,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;QACtC,IAAe,CAAA,eAAA,GAAf,eAAe,CAAmB;QAClC,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;QAC1C,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAiB;QACrC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;KACxD;IAEM,MAAM,CAAI,IAAwB,EAAE,UAA0B,EAAA;QACjE,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,UAAU,YAAY,kBAAkB,EAAE;AAC1C,YAAA,OAAO,CAAG,EAAA,MAAM,CAAG,EAAA,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA,CAAE,CAAC;AAChE,SAAA;QACD,IAAI,UAAU,YAAY,qBAAqB,EAAE;AAC7C,YAAA,OAAO,CAAG,EAAA,MAAM,CAAI,CAAA,EAAA,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;AAC3E,SAAA;QACD,IAAI,UAAU,YAAY,gBAAgB,EAAE;AACxC,YAAA,OAAO,CAAG,EAAA,MAAM,CAAI,CAAA,EAAA,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA,CAAE,CAAC;AACtE,SAAA;QACD,IAAI,UAAU,YAAY,qBAAqB,EAAE;AAC7C,YAAA,OAAO,CAAO,IAAA,EAAA,IAAI,CAAI,CAAA,EAAA,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;AAC3E,SAAA;AAED,QAAA,OAAO,CAAG,EAAA,IAAI,CAAI,CAAA,EAAA,UAAU,GAAG,CAAC;KACnC;AACJ;;ACpCD;;AAEG;MACU,sBAAsB,CAAA;AAC/B,IAAA,WAAA,CAA6B,OAAkD,EAClD,IAAoB,EACpB,IAAoB,EAAA;QAFpB,IAAO,CAAA,OAAA,GAAP,OAAO,CAA2C;QAClD,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAgB;QACpB,IAAI,CAAA,IAAA,GAAJ,IAAI,CAAgB;KAEhD;IAED,GAAG,CAAC,OAA8B,EAAE,SAA2B,EAAA;QAC3D,IAAI,IAAI,CAAC,IAAI,EAAE;AACX,YAAA,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AAC9D,SAAA;QACD,OAAO;YACH,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;AACtD,YAAA,EAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAC;SACtD,CAAC;KACL;AACJ;;ACzBD;;AAEG;MACU,kBAAkB,CAAA;AACpB,IAAA,GAAG,CAAC,IAAwB,EAAA;QAC/B,OAAO,IAAI,GAAG,IAAI,GAAG,UAAU,CAAC;KACnC;AACJ;;ACJD;;AAEG;MACU,gBAAgB,GAAG,IAAI,cAAc,CAAkD,mBAAmB;;MCH1G,0BAA0B,CAAA;AAEnC,IAAA,WAAA,CAA6B,SAA8B,EAAA;QAA9B,IAAS,CAAA,SAAA,GAAT,SAAS,CAAqB;KAC1D;AAED,IAAA,QAAQ,CAAC,WAAmC,EAAA;QACxC,MAAM,MAAM,GAAsC,EAAE,CAAC;AACrD,QAAA,MAAM,KAAK,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;AAC/B,QAAA,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;AACzB,QAAA,KAAK,MAAM,UAAU,IAAI,KAAK,EAAE;AAC5B,YAAA,MAAM,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAClE,SAAA;QACD,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QAC1B,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,KAAK,KAAK,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;QAC3E,OAAO;AACH,YAAA,KAAK,EAAE,OAAO;YACd,MAAM,EAAI,OAAO,GAAG,EAAE,GAAG,MAAM;SAClC,CAAC;KACL;AACJ;;MCnBY,+BAA+B,CAAA;AACxC,IAAA,WAAA,CACqB,SAA0C,EAAA;QAA1C,IAAS,CAAA,SAAA,GAAT,SAAS,CAAiC;KAC9D;AAED,IAAA,MAAM,CAAC,WAA8C,EAAA;QACjD,MAAM,OAAO,GAAG,CAAA,EAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAA8C,4CAAA,CAAA;cACjG,uEAAuE;AACvE,cAAA,kFAAkF,CAAC;AACrF,QAAA,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;KAC7B;AACJ;;MCGY,mBAAmB,CAAA;IAE5B,WAA6B,CAAA,uBAAoD,EACpD,0BAA0D,EAC1D,0BAA0D,EAC1D,yBAAwD,EACxD,6BAAgE,EAChE,0BAA0D,EAAA;QAL1D,IAAuB,CAAA,uBAAA,GAAvB,uBAAuB,CAA6B;QACpD,IAA0B,CAAA,0BAAA,GAA1B,0BAA0B,CAAgC;QAC1D,IAA0B,CAAA,0BAAA,GAA1B,0BAA0B,CAAgC;QAC1D,IAAyB,CAAA,yBAAA,GAAzB,yBAAyB,CAA+B;QACxD,IAA6B,CAAA,6BAAA,GAA7B,6BAA6B,CAAmC;QAChE,IAA0B,CAAA,0BAAA,GAA1B,0BAA0B,CAAgC;KACtF;AAED,IAAA,QAAQ,CAAC,UAAgC,EAAA;QACrC,QAAQ,UAAU,CAAC,WAAW;AAC1B,YAAA,KAAK,kBAAkB;gBACnB,OAAO,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,UAAgC,CAAC,CAAC;AACnF,YAAA,KAAK,qBAAqB;gBACtB,OAAO,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,UAAmC,CAAC,CAAC;AACzF,YAAA,KAAK,qBAAqB;gBACtB,OAAO,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,UAAmC,CAAC,CAAC;AACzF,YAAA,KAAK,oBAAoB;gBACrB,OAAO,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,UAAkC,CAAC,CAAC;AACvF,YAAA,KAAK,gBAAgB;gBACjB,OAAO,IAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC,UAA8B,CAAC,CAAC;AACvF,YAAA,KAAK,qBAAqB;gBACtB,OAAO,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,UAAmC,CAAC,CAAC;AACzF,YAAA,KAAK,EAAE;AACH,gBAAA,OAAO,KAAK,CAAC;AACjB,YAAA;gBACI,MAAM,IAAI,KAAK,CAAC,CAA4B,yBAAA,EAAA,UAAU,CAAC,WAAW,CAAC,IAAI,CAAE,CAAA,CAAC,CAAC;AAClF,SAAA;KACJ;AACJ;;MC5CY,2BAA2B,CAAA;IACpC,QAAQ,CAAC,EAAC,IAAI,EAAqB,EAAA;AAC/B,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,YAAY,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;KAC7D;AACJ;;MCJY,8BAA8B,CAAA;IACvC,QAAQ,CAAC,EAAC,IAAI,EAAwB,EAAA;AAClC,QAAA,OAAO,CAAC,IAAW,YAAY,EAAE,MAAM,KAAK,CAAC;KAChD;AACJ;;MCJY,8BAA8B,CAAA;AACvC,IAAA,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAwB,EAAA;QACzC,OAAO,CAAC,IAAW,YAAY,EAAE,IAAI,KAAK,YAAY,EAAE,MAAM,KAAK,CAAC;KACvE;AACJ;;MCJY,6BAA6B,CAAA;IAEtC,QAAQ,CAAC,EAAC,IAAI,EAAuB,EAAA;AACjC,QAAA,OAAO,CAAC,IAAW,YAAY,EAAE,MAAM,KAAK,CAAC;KAChD;AACJ;;MCLY,iCAAiC,CAAA;AAC1C,IAAA,QAAQ,CAAC,EAAC,IAAI,EAAE,IAAI,EAAmB,EAAA;QACnC,OAAO,CAAC,IAAW,YAAY,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,YAAY,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,MAAM,KAAK,CAAC;KACpG;AACJ;;MCJY,8BAA8B,CAAA;IACvC,QAAQ,CAAC,EAAC,IAAI,EAAwB,EAAA;AAClC,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,GAAG,YAAY,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;KAC7D;AACJ;;MCAY,+BAA+B,CAAA;AACxC,IAAA,WAAA,CACqB,OAAkD,EAClD,kBAAsC,EACtC,mBAAwC,EACxC,WAA8B,EAAA;QAH9B,IAAO,CAAA,OAAA,GAAP,OAAO,CAA2C;QAClD,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;QACtC,IAAmB,CAAA,mBAAA,GAAnB,mBAAmB,CAAqB;QACxC,IAAW,CAAA,WAAA,GAAX,WAAW,CAAmB;KAClD;AAEM,IAAA,MAAM,CAAC,WAA8C,EAAA;AACxD,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChE,IAAI,OAAO,GAAG,QAAQ,CAAC;QACvB,KAAK,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,WAAW,EAAE;AAC3C,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AACpE,YAAA,OAAO,IAAI,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC5D,SAAA;AAED,QAAA,OAAO,OAAO,CAAC;KAClB;AACJ;;MCbY,mBAAmB,CAAA;AAC5B,IAAA,WAAA,CACqB,iBAAoC,EACpC,oBAA0C,EAC1C,uBAAwC,EACxC,iBAAoC,EAAA;QAHpC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;QACpC,IAAoB,CAAA,oBAAA,GAApB,oBAAoB,CAAsB;QAC1C,IAAuB,CAAA,uBAAA,GAAvB,uBAAuB,CAAiB;QACxC,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;KACxD;IAEM,MAAM,CAAC,UAAgC,EAAE,IAAY,EAAA;QACxD,IAAI,UAAU,YAAY,kBAAkB,EAAE;YAC1C,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACpD,SAAA;QACD,IAAI,UAAU,YAAY,qBAAqB,EAAE;AAC7C,YAAA,OAAO,CAAI,CAAA,EAAA,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA,CAAE,CAAC;AAClE,SAAA;QACD,IAAI,UAAU,YAAY,gBAAgB,EAAE;YACxC,OAAO,CAAA,CAAA,EAAI,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA,CAAE,CAAC;AAChE,SAAA;QACD,IAAI,UAAU,YAAY,qBAAqB,EAAE;AAC7C,YAAA,OAAO,CAAO,IAAA,EAAA,IAAI,CAAI,CAAA,EAAA,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;AAC3E,SAAA;QAED,OAAO,CAAA,CAAA,EAAI,UAAU,CAAA,CAAA,CAAG,CAAC;KAC5B;AACJ;;MCpCY,iBAAiB,CAAA;AACnB,IAAA,KAAK,CAAC,KAAa,EAAA;QACtB,OAAO,CAAA,SAAA,EAAY,KAAK,CAAA,UAAA,CAAY,CAAC;KACxC;AACJ;;ACMD,2BAAe;AACX,IAAA;QACI,OAAO,EAAE,+BAA+B,EAAE,QAAQ,EAAE,+BAA+B,EAAE,IAAI,EAAE;YACvF,YAAY;YACZ,kBAAkB;YAClB,mBAAmB;YACnB,iBAAiB;AACpB,SAAA;AACJ,KAAA;AACD,IAAA;AACI,QAAA,OAAO,EAAE,mBAAmB;AAC5B,QAAA,QAAQ,EAAE,mBAAmB;QAC7B,IAAI,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,EAAE,eAAe,EAAE,iBAAiB,CAAC;AACtF,KAAA;IACD,EAAC,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAAE,EAAC;CACtE;;ACZD;;AAEG;AACH,uBAAe;AACX,IAAA;AACI,QAAA,OAAO,EAAE,sBAAsB;AAC/B,QAAA,QAAQ,EAAE,sBAAsB;AAChC,QAAA,IAAI,EAAE,CAAC,0BAA0B,EAAE,+BAA+B,CAAC;AACtE,KAAA;AACD,IAAA,EAAC,OAAO,EAAE,0BAA0B,EAAE,QAAQ,EAAE,0BAA0B,EAAE,IAAI,EAAE,CAAC,mBAAmB,CAAC,EAAC;AACxG,IAAA;AACI,QAAA,OAAO,EAAE,+BAA+B;AACxC,QAAA,QAAQ,EAAE,+BAA+B;QACzC,IAAI,EAAE,CAAC,+BAA+B,CAAC;AAC1C,KAAA;AACD,IAAA;QACI,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,mBAAmB,EAAE,IAAI,EAAE;YAC/D,2BAA2B;YAC3B,8BAA8B;YAC9B,8BAA8B;YAC9B,6BAA6B;YAC7B,iCAAiC;YACjC,8BAA8B;AACjC,SAAA;AACJ,KAAA;IACD,EAAC,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,2BAA2B,EAAE,IAAI,EAAE,EAAE,EAAC;IACvF,EAAC,OAAO,EAAE,8BAA8B,EAAE,QAAQ,EAAE,8BAA8B,EAAE,IAAI,EAAE,EAAE,EAAC;IAC7F,EAAC,OAAO,EAAE,8BAA8B,EAAE,QAAQ,EAAE,8BAA8B,EAAE,IAAI,EAAE,EAAE,EAAC;IAC7F,EAAC,OAAO,EAAE,6BAA6B,EAAE,QAAQ,EAAE,6BAA6B,EAAE,IAAI,EAAE,EAAE,EAAC;IAC3F,EAAC,OAAO,EAAE,iCAAiC,EAAE,QAAQ,EAAE,iCAAiC,EAAE,IAAI,EAAE,EAAE,EAAC;IACnG,EAAC,OAAO,EAAE,8BAA8B,EAAE,QAAQ,EAAE,8BAA8B,EAAE,IAAI,EAAE,EAAE,EAAC;AAC7F,IAAA,GAAG,oBAAoB;CAC1B;;ACxBD;;AAEG;AACH,2BAAe;IACX,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,EAAE,EAAC;IACrE,EAAC,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAAE,EAAC;AACnE,IAAA;AACI,QAAA,OAAO,EAAE,qBAAqB;AAC9B,QAAA,QAAQ,EAAE,qBAAqB;QAC/B,IAAI,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,eAAe,EAAE,iBAAiB,CAAC;AAC1G,KAAA;AACD,IAAA;AACI,QAAA,OAAO,EAAE,sBAAsB;AAC/B,QAAA,QAAQ,EAAE,sBAAsB;AAChC,QAAA,IAAI,EAAE,CAAC,YAAY,EAAE,qBAAqB,EAAE,sBAAsB,CAAC;AACtE,KAAA;AACD,IAAA;AACI,QAAA,OAAO,EAAE,sBAAsB;AAC/B,QAAA,QAAQ,EAAE,sBAAsB;AAChC,QAAA,IAAI,EAAE,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,IAAI,QAAQ,EAAE,EAAE,SAAS,CAAC,CAAC;AAC1D,KAAA;AACD,IAAA,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,gBAAgB,EAAE,sBAAsB,CAAC,EAAC;IACvG,EAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,QAAQ,EAAE,EAAE,SAAS,CAAC,CAAC,EAAC;AAClG,IAAA;AACI,QAAA,OAAO,EAAE,gBAAgB;AACzB,QAAA,QAAQ,EAAE,gBAAgB;AAC1B,QAAA,IAAI,EAAE,CAAC,iBAAiB,EAAE,0BAA0B,EAAE,eAAe,CAAC;AACzE,KAAA;IACD,EAAC,OAAO,EAAE,0BAA0B,EAAE,QAAQ,EAAE,0BAA0B,EAAE,IAAI,EAAE,EAAE,EAAC;AACrF,IAAA,GAAG,gBAAgB;CACtB;;ACjDD;;AAEG;MACU,wBAAwB,CAAA;AACjC,IAAA,WAAA,CAA6B,kBAAsC,EAAA;QAAtC,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;KAClE;IAEM,MAAM,CAAC,IAAS,EAAE,KAAU,EAAA;AAC/B,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC3D,QAAA,OAAO,MAAM,KAAK,SAAS,GAAG,IAAI,KAAK,KAAK,GAAG,MAAM,CAAC;KACzD;AACJ;;ACXD;;AAEG;MACU,yBAAyB,CAAA;AAClC,IAAA,WAAA,CAA6B,eAAyC,EAAA;QAAzC,IAAe,CAAA,eAAA,GAAf,eAAe,CAA0B;KAErE;IAEM,MAAM,CAAC,IAAW,EAAE,KAAY,EAAA;QACnC,IAAI,IAAI,KAAK,KAAK;AAAE,YAAA,OAAO,IAAI,CAAC;AAChC,QAAA,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM;AAAE,YAAA,OAAO,KAAK,CAAC;AAE/C,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClC,YAAA,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACvB,YAAA,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACxB,YAAA,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,KAAK,EAAE;AACvD,gBAAA,OAAO,KAAK,CAAC;AAChB,aAAA;AACJ,SAAA;AAED,QAAA,OAAO,IAAI,CAAC;KACf;AACJ;;ACtBD;;AAEG;MACU,2BAA2B,CAAA;IAE7B,MAAM,CAAC,IAA2B,EAAE,KAA4B,EAAA;AACnE,QAAA,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC;KACnC;AACJ;;ACRD;;AAEG;MACU,0BAA0B,CAAA;IAC5B,MAAM,CAAC,IAA0B,EAAE,KAA2B,EAAA;AACjE,QAAA,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC;KACnC;AACJ;;ACND;;AAEG;MACU,8BAA8B,CAAA;AAEvC,IAAA,WAAA,CACqB,gBAA2C,EAAA;QAA3C,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAA2B;KAE/D;IAEM,MAAM,CAAC,IAAsB,EAAE,KAAuB,EAAA;QACzD,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;KAC1F;AACJ;;ACdD;;AAEG;MACU,kBAAkB,CAAA;IAEpB,MAAM,CAAI,IAAiB,EAAE,KAAkB,EAAA;AAClD,QAAA,IAAI,IAAI,YAAY,EAAE,IAAI,KAAK,YAAY,EAAE,EAAE;YAC3C,OAAO,IAAI,KAAK,KAAK,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,SAAS,CAAC;AAC/D,SAAA;QACD,IAAI,IAAI,YAAY,EAAE,EAAE;AACpB,YAAA,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC3B,SAAA;QAED,IAAI,KAAK,YAAY,EAAE,EAAE;AACrB,YAAA,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3B,SAAA;AAED,QAAA,OAAO,SAAS,CAAC;KACpB;AACJ;;AClBD;;AAEG;MACU,sBAAsB,CAAA;AAE/B,IAAA,WAAA,CAA6B,gBAA2C,EAAA;QAA3C,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAA2B;KAEvE;IAEM,MAAM,CAAC,IAAwB,EAAE,KAAyB,EAAA;AAC7D,QAAA,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;KAC9D;AACJ;;ACZD;;AAEG;MACU,2BAA2B,CAAA;AAEpC,IAAA,WAAA,CAA6B,gBAA2C,EAAA;QAA3C,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAA2B;KAEvE;IAEM,MAAM,CAAC,IAA2B,EAAE,KAA4B,EAAA;AACnE,QAAA,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;KAC9D;AACJ;;ACZD;;AAEG;MACU,2BAA2B,CAAA;AAEpC,IAAA,WAAA,CAA6B,eAAyC,EAAA;QAAzC,IAAe,CAAA,eAAA,GAAf,eAAe,CAA0B;KAErE;IAEM,MAAM,CAAC,IAA2B,EAAE,KAA4B,EAAA;QACnE,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;KAC3F;AACJ;;ACJD;;AAEG;AACH,2CAAe;AACX,IAAA,EAAC,OAAO,EAAE,wBAAwB,EAAE,QAAQ,EAAE,wBAAwB,EAAE,IAAI,EAAE,CAAC,kBAAkB,CAAC,EAAC;AACnG,IAAA,EAAC,OAAO,EAAE,yBAAyB,EAAE,QAAQ,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAC,wBAAwB,CAAC,EAAC;IAC3G,EAAC,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,2BAA2B,EAAE,IAAI,EAAE,EAAE,EAAC;IACvF,EAAC,OAAO,EAAE,0BAA0B,EAAE,QAAQ,EAAE,0BAA0B,EAAE,IAAI,EAAE,EAAE,EAAC;AACrF,IAAA;AACI,QAAA,OAAO,EAAE,8BAA8B;AACvC,QAAA,QAAQ,EAAE,8BAA8B;QACxC,IAAI,EAAE,CAAC,yBAAyB,CAAC;AACpC,KAAA;IACD,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,EAAE,EAAC;AACrE,IAAA,EAAC,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC,yBAAyB,CAAC,EAAC;AACtG,IAAA,EAAC,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,2BAA2B,EAAE,IAAI,EAAE,CAAC,yBAAyB,CAAC,EAAC;AAChH,IAAA,EAAC,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAE,2BAA2B,EAAE,IAAI,EAAE,CAAC,wBAAwB,CAAC,EAAC;AAC/G,IAAA;AACI,QAAA,OAAO,EAAE,0BAA0B;AACnC,QAAA,QAAQ,EAAE,0BAA0B;AACpC,QAAA,IAAI,EAAE;YACF,2BAA2B;YAC3B,2BAA2B;YAC3B,sBAAsB;YACtB,8BAA8B;YAC9B,0BAA0B;YAC1B,2BAA2B;YAC3B,kBAAkB;AACrB,SAAA;AACJ,KAAA;CACJ;;ACzBD;;AAEG;MACU,qBAAqB,CAAA;AAC9B,IAAA,WAAA,CAA6B,YAA8B,EAAE,EAAA;QAAhC,IAAS,CAAA,SAAA,GAAT,SAAS,CAAuB;KAC5D;IAED,GAAG,CAAC,OAA8B,EAAE,SAA2B,EAAA;QAC3D,OAAO;AACH,YAAA,GAAG,SAAS;YACZ,GAAG,oBAAoB,CAAC,OAAO,CAAC;AAChC,YAAA,GAAG,gBAAgB;AACnB,YAAA,GAAG,kBAAkB;AACrB,YAAA,GAAG,gBAAgB;AACnB,YAAA,GAAG,oBAAoB;AACvB,YAAA,GAAG,qBAAqB;AACxB,YAAA,GAAG,qBAAqB;AACxB,YAAA,GAAG,kBAAkB;AACrB,YAAA,GAAG,2BAA2B;AAC9B,YAAA,GAAG,mBAAmB;AACtB,YAAA,GAAG,oCAAoC;AACvC,YAAA,GAAG,sBAAsB;AACzB,YAAA,GAAG,iBAAiB;YACpB,GAAG,IAAI,CAAC,SAAS;SACpB,CAAC;KACL;AACJ;;AC9BD;;AAEG;MACU,IAAI,CAAA;AAIb,IAAA,WAAA,CAAY,UAA2B,EAAE,EAAA;QACrC,MAAM,UAAU,GAAG,MAAI,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,OAAO,CAAA,EAAK,OAAO,CAAoB,CAAC;AACpE,QAAA,MAAM,SAAS,GAAG;YACd,EAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAC;YACzC,EAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,CAAC,IAA2B,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,EAAE,EAAC;SACnG,CAAC;QACF,MAAM,QAAQ,GAAG,eAAe,CAAC,UAAU,EAAE,GAAG,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KACtC;AAED;;;;;AAKG;AACH,IAAA,WAAW,OAAO,GAAA;AACd,QAAA,IAAI,IAAI,CAAC,OAAO,KAAK,SAAS,EAAE;YAC5B,IAAI,CAAC,OAAO,GAAG;AACX,gBAAA,MAAM,EAAE,MAAM,SAAS;gBACvB,cAAc,EAAE,IAAI,qBAAqB,EAAE;aAC9C,CAAC;AACL,SAAA;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;AAED;;;AAGG;IACH,WAAW,OAAO,CAAC,OAA8B,EAAA;AAC7C,QAAA,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;KAC1B;AAED,IAAA,IAAW,OAAO,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;KAC5B;AAED,IAAA,IAAW,OAAO,GAAA;AACd,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;KAC5B;AAED,IAAA,IAAW,IAAI,GAAA;AACX,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;KACzB;AAEM,IAAA,KAAK,CAC6C,UAAa,EAAA;QAClE,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;KACtC;IAEM,MAAM,CAAC,UAA0B,EAAE,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,EAAA;QAC1D,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;KAC9C;IAEM,MAAM,GAAA;AACT,QAAA,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;KAC7B;AAEM,IAAA,WAAW,CAAC,SAAe,EAAA;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;KAC3C;AAED;;AAEG;IACI,UAAU,CAAC,QAA2B,EAAE,UAA0B,EAAA;QACrE,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;KACrD;AAEM,IAAA,OAAO,CAAoE,KAAkC,EAAA;QAChH,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KACnC;;AA3Ec,IAAO,CAAA,OAAA,GAA0B,SAAS;;AChB7D;;AAEG;MACU,kBAAkB,CAAA;IACpB,MAAM,CAAC,IAAa,EAAE,KAAc,EAAA;AACvC,QAAA,OAAO,OAAO,IAAI,IAAI,OAAO,KAAK,CAAC;KACtC;AACJ;;ACLD;;AAEG;MACU,WAAW,CAAA;IACb,OAAO,CAAW,IAAO,EAAE,KAAQ,EAAA;AACtC,QAAA,IAAI,IAAI,YAAY,IAAI,IAAI,KAAK,YAAY,IAAI,EAAE;YAC/C,OAAO,IAAI,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC;AAC7C,SAAA;AACD,QAAA,OAAO,SAAS,CAAC;KACpB;AACJ;;ACRD;;AAEG;MACU,oBAAoB,CAAA;IAC7B,WACqB,CAAA,kBAAsC,EACtC,YAA0B,EAAA;QAD1B,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;QACtC,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;KAC9C;IAED,MAAM,CAAC,IAAS,EAAE,KAAU,EAAA;AACxB,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC3D,OAAO,MAAM,KAAK,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC;KACjF;AACJ;;ACXD;;AAEG;MACU,YAAY,CAAA;IAErB,WACqB,CAAA,YAA0B,EAC1B,kBAAsC,EACtC,gBAAkC,EAClC,aAA4B,EAC5B,eAAgC,EAAA;QAJhC,IAAY,CAAA,YAAA,GAAZ,YAAY,CAAc;QAC1B,IAAkB,CAAA,kBAAA,GAAlB,kBAAkB,CAAoB;QACtC,IAAgB,CAAA,gBAAA,GAAhB,gBAAgB,CAAkB;QAClC,IAAa,CAAA,aAAA,GAAb,aAAa,CAAe;QAC5B,IAAe,CAAA,eAAA,GAAf,eAAe,CAAiB;KACpD;IAEM,OAAO,CAAC,IAAS,EAAE,KAAU,EAAA;AAChC,QAAA,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,KAAK,EAAE;AAClD,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;QAED,QAAQ,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC;AAC/C,YAAA,KAAK,WAAW;gBACZ,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACtD,YAAA,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACnD,YAAA,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACtD,YAAA,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACtD,YAAA,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACtD,YAAA,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACrD,YAAA,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACtD,YAAA,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACzD,SAAA;KACJ;AACJ;;AC3CD;;AAEG;MACU,eAAe,CAAA;IAEjB,OAAO,CAAiC,IAAO,EAAE,KAAQ,EAAA;QAC5D,OAAO,IAAI,KAAK,KAAK,CAAC;KACzB;AACJ;;ACRD;;AAEG;MACU,YAAY,CAAA;IAEd,OAAO,CAAC,IAAa,EAAE,KAAc,EAAA;AACxC,QAAA,OAAO,OAAO,IAAI,KAAK,OAAO,KAAK,CAAC;KACvC;AACJ;;ACRD;;AAEG;MACU,gBAAgB,CAAA;IAElB,OAAO,CAA0D,IAAO,EAAE,KAAQ,EAAA;QACrF,OAAO,IAAI,KAAK,KAAK,CAAC;KACzB;AACJ;;ACLD;;AAEG;MACU,aAAa,CAAA;AAEtB,IAAA,WAAA,CACqB,QAAsD,EAAA;QAAtD,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAA8C;KAC1E;IAEM,OAAO,CAAoC,IAAO,EAAE,KAAQ,EAAA;AAC/D,QAAA,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI;AAAE,YAAA,OAAO,IAAI,CAAC;QACjD,IAAI,IAAI,KAAK,KAAK;AAAE,YAAA,OAAO,IAAI,CAAC;AAChC,QAAA,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjC,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC7C,IAAI,OAAO,KAAK,SAAS,EAAE;gBACvB,SAAS;AACZ,aAAA;AACD,YAAA,OAAO,OAAO,CAAC;AAClB,SAAA;AAED,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;ACzBD;;AAEG;MACU,cAAc,CAAA;IAEhB,MAAM,CAAC,IAAa,EAAE,KAAc,EAAA;AACvC,QAAA,OAAO,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,UAAU,IAAI,OAAO,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,UAAU,CAAC;KACtG;AACJ;;ACHD;;AAEG;MACU,eAAe,CAAA;IAExB,WACqB,CAAA,QAAkB,EAClB,cAA8B,EAAA;QAD9B,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAc,CAAA,cAAA,GAAd,cAAc,CAAgB;KAClD;;IAGM,OAAO,CAAmB,IAAO,EAAE,KAAQ,EAAA;AAC9C,QAAA,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,IAAI,EAAE;AAClD,YAAA,MAAM,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAClD,YAAA,MAAM,aAAa,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACpD,YAAA,IAAI,YAAY,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM;AAAE,gBAAA,OAAO,KAAK,CAAC;YAE/D,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AACpE,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,gBAAA,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AAClC,gBAAA,MAAM,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,KAAK,KAAK,EAAE;AACzD,oBAAA,OAAO,KAAK,CAAC;AAChB,iBAAA;AACJ,aAAA;AAED,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AAED,QAAA,OAAO,SAAS,CAAC;KACpB;AACJ;;MCjCY,eAAe,GAAG,IAAI,cAAc,CAAmB,iBAAiB;;ACCrF;;AAEG;MACU,WAAW,CAAA;IACpB,WACqB,CAAA,UAAsB,EACtB,iBAAoC,EAAA;QADpC,IAAU,CAAA,UAAA,GAAV,UAAU,CAAY;QACtB,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAmB;KACxD;;IAGM,OAAO,CAAmB,IAAO,EAAE,KAAQ,EAAA;QAC9C,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACrD,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;KACzD;AACJ;;ACnBD;;AAEG;MACU,iBAAiB,CAAA;;AAE1B,IAAA,GAAG,CAAC,MAAc,EAAA;QACd,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QACxC,MAAM,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAc,KAAK,CAAC,CAAC,CAAC;AAC9C,QAAA,MAAM,GAAG,GAAG,IAAI,GAAG,EAAoB,CAAC;AACxC,QAAA,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACpB,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;AAC7B,SAAA;AAED,QAAA,OAAO,GAAG,CAAC;KACd;IAEO,QAAQ,CAAC,MAAM,EAAE,KAAoB,EAAA;QACzC,IAAI,MAAM,KAAK,IAAI;AAAE,YAAA,OAAO,KAAK,CAAC;AAClC,QAAA,IAAI,MAAM,KAAK,MAAM,CAAC,SAAS;AAAE,YAAA,OAAO,KAAK,CAAC;QAC9C,KAAK,GAAG,CAAC,GAAG,KAAK,EAAE,GAAG,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC;AACnG,QAAA,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;KAC9D;AACJ;;AClBD;;AAEG;MACU,UAAU,CAAA;AACnB,IAAA,WAAA,CAA6B,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;KAC9C;IAEM,OAAO,CAA4B,IAAO,EAAE,KAAQ,EAAA;AACvD,QAAA,IAAI,IAAI,YAAY,GAAG,IAAI,KAAK,YAAY,GAAG,EAAE;AAC7C,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;AAAE,gBAAA,OAAO,KAAK,CAAC;YAC3C,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACpE,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,EAAE;AAC7B,gBAAA,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,KAAK;AAAE,oBAAA,OAAO,KAAK,CAAC;AAC3C,gBAAA,IAAI,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK;AAAE,oBAAA,OAAO,KAAK,CAAC;AAC7E,aAAA;AACD,YAAA,OAAO,IAAI,CAAC;AACf,SAAA;AACD,QAAA,OAAO,SAAS,CAAC;KACpB;AACJ;;ACND;;AAEG;AACH,6BAAe;AACX,IAAA,EAAC,OAAO,EAAE,wBAAwB,EAAE,WAAW,EAAE,oBAAoB,EAAC;AACtE,IAAA,EAAC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,kBAAkB,EAAE,YAAY,CAAC,EAAC;IACzG,EAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE,IAAI,EAAE,EAAE,EAAC;AACrE,IAAA;AACI,QAAA,OAAO,EAAE,YAAY;AACrB,QAAA,QAAQ,EAAE,YAAY;AACtB,QAAA,IAAI,EAAE;YACF,YAAY;YACZ,kBAAkB;YAClB,gBAAgB;YAChB,aAAa;YACb,eAAe;AAClB,SAAA;AACJ,KAAA;IACD,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,eAAe,EAAE,IAAI,EAAE,EAAE,EAAC;IAC/D,EAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,IAAI,EAAE,EAAE,EAAC;AAC7D,IAAA;AACI,QAAA,OAAO,EAAE,eAAe;AACxB,QAAA,QAAQ,EAAE,eAAe;AACzB,QAAA,IAAI,EAAE;YACF,QAAQ;YACR,cAAc;AACjB,SAAA;AACJ,KAAA;AACD,IAAA,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,eAAe,CAAC,EAAC;AAC1E,IAAA,EAAC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,UAAU,EAAE,iBAAiB,CAAC,EAAC;IACpF,EAAC,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAE,EAAC;IACjE,EAAC,OAAO,EAAE,iBAAiB,EAAE,QAAQ,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAAE,EAAC;IACnE,EAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,EAAC;AACzD,IAAA,EAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,QAAQ,CAAC,EAAC;CAChE;;ACzCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGG;AACG,MAAO,2BAA4B,SAAQ,qBAAqB,CAAA;AAClE,IAAA,WAAA,CAAoB,QAA6B,GAAA,EAAE,EACvC,SAAA,GAA8B,EAAE,EAAA;QACxC,KAAK,CAAC,SAAS,CAAC,CAAC;QAFD,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAuB;KAGlD;IAED,GAAG,CAAC,OAA8B,EAAE,SAA2B,EAAA;QAC3D,OAAO;AACH,YAAA,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC;AAChC,YAAA,GAAG,sBAAsB;YACzB,GAAG,IAAI,CAAC,QAAQ;AAChB,YAAA,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAC;AACxE,YAAA,EAAC,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAC;AAC1E,YAAA,EAAC,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAC;AAC/E,YAAA,EAAC,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAC;SAC9E,CAAC;KACL;AACJ;;ACxHD;;AAEG;MACU,gCAAgC,CAAA;AACzC,IAAA,WAAA,CAA6B,QAAkB,EAClB,OAAmB,EACnB,eAA+D,EAAA;QAF/D,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAY;QACnB,IAAe,CAAA,eAAA,GAAf,eAAe,CAAgD;AACxF,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAsB,EAAE,QAAmB,EAAE,KAA2B,KAAI;AAChF,YAAA,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/E,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC;AACzB,SAAC,CAAC;KACL;AACJ;;AChBD;;AAEG;MACU,gCAAgC,CAAA;AACzC,IAAA,WAAA,CAA6B,QAAkB,EAClB,OAAmB,EACnB,eAA+D,EAAA;QAF/D,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;QAClB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAY;QACnB,IAAe,CAAA,eAAA,GAAf,eAAe,CAAgD;AACxF,QAAA,OAAO,IAAI,CAAC,OAAO,EAAS,CAAC;KAChC;IAED,OAAO,GAAA;AACH,QAAA,OAAO,CAAC,MAAsB,EAAE,QAAmB,EAAE,KAA2B,KAAI;AAChF,YAAA,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/E,YAAA,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACzB,OAAO,IAAI,CAAC,QAAQ,CAAC;AACzB,SAAC,CAAC;KACL;AACJ;;MCrBY,4BAA4B,CAAA;AACrC,IAAA,WAAA,CAA6B,QAAkB,EAAA;QAAlB,IAAQ,CAAA,QAAA,GAAR,QAAQ,CAAU;KAC9C;IAED,MAAM,GAAA;QACF,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAA2D,CAAC;AAC/G,QAAA,MAAM,OAAO,GAAG,EAAC,KAAK,EAAC,CAAC;AACxB,QAAA,MAAM,SAAS,GAAG,YAAA;AACd,YAAA,OAAO,SAAS,CAAC;AACrB,SAAC,CAAC;AACF,QAAA,OAAO,IAAI,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;KACxC;AACJ;;AChBD;AACA;;;;;;AAMG;AAEH;;;;;;;;;AASG;AACI,MAAM,IAAI,GAAG;;ACnBpB;;ACAA;;AAEE;;ACFF;;AAEG;;;;"}