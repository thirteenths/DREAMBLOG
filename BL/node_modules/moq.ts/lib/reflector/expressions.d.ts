import { It } from "./expression-predicates";
export declare abstract class Expression {
    readonly name: PropertyKey;
    readonly args: any[];
    protected constructor(name: PropertyKey, args: any[]);
}
/**
 * This class represents an invocation of an instance method.
 * It provides access to the name of it and the parameters.
 */
export declare class MethodExpression extends Expression {
    constructor(name: PropertyKey, args: any[]);
}
/**
 * This class represents an invocation of a function.
 * It provides access to the parameters.
 */
export declare class FunctionExpression extends Expression {
    constructor(args: any[]);
}
/**
 * This class represents a property accessing.
 * It provides access to the name of property.
 */
export declare class GetPropertyExpression extends Expression {
    constructor(name: PropertyKey);
}
/**
 * This class represents a property write interaction.
 * It provides access to the name of property and the value.
 */
export declare class SetPropertyExpression extends Expression {
    readonly value: any;
    constructor(name: PropertyKey, value: any);
}
/**
 * This class represents applying of [in operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in).
 * It provides access to the name of property.
 */
export declare class InOperatorExpression extends Expression {
    constructor(name: PropertyKey);
}
/**
 * This class represents applying of [new operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new).
 * It provides access to the arguments of the constructor.
 */
export declare class NewOperatorExpression extends Expression {
    constructor(args: any[]);
}
/**
 * Union of the expressions and It type.
 */
export declare type Expressions<T> = FunctionExpression | GetPropertyExpression | SetPropertyExpression | InOperatorExpression | MethodExpression | NewOperatorExpression | It<T>;
