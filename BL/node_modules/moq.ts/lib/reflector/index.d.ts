import { ReflectingProxyInjectorFactory } from "./reflecting-proxy.injector-factory";
import { SyncExpressionReflector } from "./sync-expression.reflector";
import { CompositeExpressionReflector } from "./composite-expression.reflector";
import { AsyncExpressionDetector } from "./async-expression.detector";
import { AsyncExpressionReflector } from "./async-expression.reflector";
import { AsyncReflectingProxyInjectorFactory } from "./async-reflecting-proxy.injector-factory";
declare const _default: ({
    provide: import("../static.injector/injection_token").InjectionToken<import("./expression-reflector").ExpressionReflector>;
    useExisting: typeof CompositeExpressionReflector;
    deps: any[];
    useClass?: undefined;
} | {
    provide: typeof CompositeExpressionReflector;
    useClass: typeof CompositeExpressionReflector;
    deps: (typeof SyncExpressionReflector | typeof AsyncExpressionDetector | typeof AsyncExpressionReflector)[];
    useExisting?: undefined;
} | {
    provide: typeof AsyncExpressionDetector;
    useClass: typeof AsyncExpressionDetector;
    deps: any[];
    useExisting?: undefined;
} | {
    provide: typeof ReflectingProxyInjectorFactory;
    useClass: typeof ReflectingProxyInjectorFactory;
    deps: any[];
    useExisting?: undefined;
} | {
    provide: typeof SyncExpressionReflector;
    useClass: typeof SyncExpressionReflector;
    deps: (typeof ReflectingProxyInjectorFactory)[];
    useExisting?: undefined;
} | {
    provide: typeof AsyncReflectingProxyInjectorFactory;
    useClass: typeof AsyncReflectingProxyInjectorFactory;
    deps: (typeof ReflectingProxyInjectorFactory)[];
    useExisting?: undefined;
} | {
    provide: typeof AsyncExpressionReflector;
    useClass: typeof AsyncExpressionReflector;
    deps: (typeof AsyncReflectingProxyInjectorFactory)[];
    useExisting?: undefined;
})[];
/**
 * @hidden
 */
export default _default;
