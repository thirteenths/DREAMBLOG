import { ProxyFactory } from "../interceptors/proxy.factory";
import { IMock, IPresetBuilder, ISequenceVerifier } from "../moq";
import { Times } from "../times";
import { Tracker } from "../tracker/tracker";
import { Verifier } from "../verification/verifier";
import { PrototypeStorage } from "../interceptors/prototype.storage";
import { MOCK_OPTIONS } from "../mock-options/mock-options.injection-token";
import { TypeofInjectionToken } from "../injector/typeof-injection-token";
import { MOCK } from "../injector/mock.injection-token";
import { SetupFactory } from "../presets/setup.factory";
import { InjectionFactory } from "../injector/injection-factory";
import { InjectionToken } from "../static.injector/injection_token";
import { Type } from "../static.injector/type";
import { Injector } from "../static.injector/injector";
import { EXPRESSION_REFLECTOR, IExpression } from "../reflector/expression-reflector";
/**
 * The internal core of {@link Mock} class.
 */
export declare class MockCore<T> implements IMock<T> {
    readonly options: TypeofInjectionToken<typeof MOCK_OPTIONS>;
    readonly tracker: Tracker;
    private readonly injector;
    private readonly reflector;
    private readonly interceptor;
    private readonly verifier;
    private readonly prototypeStorage;
    private readonly mock;
    private readonly setupFactory;
    constructor(options: TypeofInjectionToken<typeof MOCK_OPTIONS>, tracker: Tracker, injector: Injector, reflector: TypeofInjectionToken<typeof EXPRESSION_REFLECTOR>, interceptor: ProxyFactory<T>, verifier: Verifier<T>, prototypeStorage: PrototypeStorage, mock: TypeofInjectionToken<typeof MOCK>, setupFactory: SetupFactory<T>);
    get name(): string;
    resolve<S, R = S extends InjectionFactory ? ReturnType<S["factory"]> : S>(token: Type<S> | InjectionToken<S>): R;
    setup<E extends IExpression<T>, R = E extends (...args: any[]) => infer M ? M : any>(expression: E): IPresetBuilder<T, R>;
    verify(expression: IExpression<T>, times: Times): IMock<T>;
    object(): T;
    prototypeof(prototype?: any): IMock<T>;
    /**
     * @experimental
     */
    insequence(sequence: ISequenceVerifier, expression: IExpression<T>): IMock<T>;
}
