import { Expression } from "../reflector/expressions";
import { It } from "../reflector/expression-predicates";
import { GetPropertyFormatter } from "./get-property.formatter";
import { SetPropertyFormatter } from "./set-property.formatter";
import { FunctionFormatter } from "./function.formatter";
import { MethodFormatter } from "./method.formatter";
import { ConstantFormatter } from "./constant.formatter";
import { InOperatorFormatter } from "./in-operator.formatter";
import { NewOperatorFormatter } from "./new-operator.formatter";
/**
 * @hidden
 */
export declare class InteractionFormatter {
    private readonly getPropertyFormatter;
    private readonly setPropertyFormatter;
    private readonly methodFormatter;
    private readonly namedMethodFormatter;
    private readonly constantFormatter;
    private readonly inOperatorFormatter;
    private readonly newOperatorFormatter;
    constructor(getPropertyFormatter: GetPropertyFormatter, setPropertyFormatter: SetPropertyFormatter, methodFormatter: FunctionFormatter, namedMethodFormatter: MethodFormatter, constantFormatter: ConstantFormatter, inOperatorFormatter: InOperatorFormatter, newOperatorFormatter: NewOperatorFormatter);
    format(interaction: Expression | It<any>): string;
}
