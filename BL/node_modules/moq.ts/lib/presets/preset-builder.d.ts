import { IMock, IPlayable, IPresetBuilder, PromisedType } from "../moq";
import { Expressions } from "../reflector/expressions";
import { Expression } from "../reflector/expressions";
import { TypeOfInjectionFactory } from "../injector/injection-factory";
import { ReturnsPresetFactory } from "./factories/returns-preset.factory";
import { MimicsPresetFactory } from "./factories/mimics-preset.factory";
import { CallbackPresetFactory } from "./factories/callback-preset.factory";
import { ThrowsPresetFactory } from "./factories/throws-preset.factory";
import { ReturnsAsyncPresetFactory } from "./factories/returns-async-preset.factory";
import { ThrowsAsyncPresetFactory } from "./factories/throws-async-preset.factory";
/**
 * The default implementation of {@link IPresetBuilder} interface.
 * Is it not intended to be used outside of the moq library.
 *
 * @hidden
 */
export declare class PresetBuilder<T, TValue = any> implements IPresetBuilder<T> {
    private readonly returnsPresetFactory;
    private readonly throwsPresetFactory;
    private readonly mimicsPresetFactory;
    private readonly callbackPresetFactory;
    private readonly returnsAsyncPresetFactory;
    private readonly throwsAsyncPresetFactory;
    private readonly target;
    private playable;
    constructor(returnsPresetFactory: TypeOfInjectionFactory<ReturnsPresetFactory<T, TValue>>, throwsPresetFactory: TypeOfInjectionFactory<ThrowsPresetFactory<T, TValue>>, mimicsPresetFactory: TypeOfInjectionFactory<MimicsPresetFactory<T, TValue>>, callbackPresetFactory: TypeOfInjectionFactory<CallbackPresetFactory<T, TValue>>, returnsAsyncPresetFactory: TypeOfInjectionFactory<ReturnsAsyncPresetFactory<T, TValue>>, throwsAsyncPresetFactory: TypeOfInjectionFactory<ThrowsAsyncPresetFactory<T, TValue>>, target: Expressions<T>, playable?: IPlayable);
    returnsAsync(value: PromisedType<TValue>): IMock<T>;
    throwsAsync<TException>(exception: TException): IMock<T>;
    mimics(origin: T): IMock<T>;
    returns(value: TValue): IMock<T>;
    throws<TException>(exception: TException): IMock<T>;
    callback(callback: (interaction: Expression) => TValue): IMock<T>;
    play(playable: IPlayable): IPresetBuilder<T>;
}
