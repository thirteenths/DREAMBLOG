import { EqualMatcher } from "./equal.matcher";
import { EqualConstantMatcher } from "./equal-constant.matcher";
import { CommonTypeProvider } from "./common-type.provider";
import { TypesMatcher } from "./types.matcher";
import { PrimitiveMatcher } from "./primitive.matcher";
import { ObjectMatcher } from "./object.matcher";
import { FunctionMatcher } from "./function.matcher";
import { IterableTester } from "./iterable.tester";
import { IteratorMatcher } from "./iterator.matcher";
import { OBJECT_MATCHERS } from "./object-matchers.injection-token";
import { POJOMatcher } from "./pojo.matcher";
import { ObjectMapProvider } from "./object-map.provider";
import { MapMatcher } from "./map.matcher";
import { Injector } from "../static.injector/injector";
import { ConstantEqualityComparer } from "../expression.equality-comparers/constant.equality-comparer";
import { ItEqualityComparer } from "../expression.equality-comparers/it.equality-comparer";
/**
 * @hidden
 */
export default [
    { provide: ConstantEqualityComparer, useExisting: EqualConstantMatcher },
    { provide: EqualConstantMatcher, useClass: EqualConstantMatcher, deps: [ItEqualityComparer, EqualMatcher] },
    { provide: CommonTypeProvider, useClass: CommonTypeProvider, deps: [] },
    {
        provide: EqualMatcher,
        useClass: EqualMatcher,
        deps: [
            TypesMatcher,
            CommonTypeProvider,
            PrimitiveMatcher,
            ObjectMatcher,
            FunctionMatcher
        ]
    },
    { provide: FunctionMatcher, useClass: FunctionMatcher, deps: [] },
    { provide: IterableTester, useClass: IterableTester, deps: [] },
    {
        provide: IteratorMatcher,
        useClass: IteratorMatcher,
        deps: [
            Injector,
            IterableTester
        ]
    },
    { provide: ObjectMatcher, useClass: ObjectMatcher, deps: [OBJECT_MATCHERS] },
    { provide: POJOMatcher, useClass: POJOMatcher, deps: [MapMatcher, ObjectMapProvider] },
    { provide: PrimitiveMatcher, useClass: PrimitiveMatcher, deps: [] },
    { provide: ObjectMapProvider, useClass: ObjectMapProvider, deps: [] },
    { provide: TypesMatcher, useClass: TypesMatcher, deps: [] },
    { provide: MapMatcher, useClass: MapMatcher, deps: [Injector] },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9lcXVhbC1tYXRjaGVycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDcEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDZEQUE2RCxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBRTNGOztHQUVHO0FBQ0gsZUFBZTtJQUNYLEVBQUMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBQztJQUN0RSxFQUFDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLEVBQUM7SUFDekcsRUFBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDckU7UUFDSSxPQUFPLEVBQUUsWUFBWTtRQUNyQixRQUFRLEVBQUUsWUFBWTtRQUN0QixJQUFJLEVBQUU7WUFDRixZQUFZO1lBQ1osa0JBQWtCO1lBQ2xCLGdCQUFnQjtZQUNoQixhQUFhO1lBQ2IsZUFBZTtTQUNsQjtLQUNKO0lBQ0QsRUFBQyxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUMvRCxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQzdEO1FBQ0ksT0FBTyxFQUFFLGVBQWU7UUFDeEIsUUFBUSxFQUFFLGVBQWU7UUFDekIsSUFBSSxFQUFFO1lBQ0YsUUFBUTtZQUNSLGNBQWM7U0FDakI7S0FDSjtJQUNELEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFDO0lBQzFFLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxFQUFDO0lBQ3BGLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ2pFLEVBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ25FLEVBQUMsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDekQsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUM7Q0FDaEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVxdWFsTWF0Y2hlciB9IGZyb20gXCIuL2VxdWFsLm1hdGNoZXJcIjtcbmltcG9ydCB7IEVxdWFsQ29uc3RhbnRNYXRjaGVyIH0gZnJvbSBcIi4vZXF1YWwtY29uc3RhbnQubWF0Y2hlclwiO1xuaW1wb3J0IHsgQ29tbW9uVHlwZVByb3ZpZGVyIH0gZnJvbSBcIi4vY29tbW9uLXR5cGUucHJvdmlkZXJcIjtcbmltcG9ydCB7IFR5cGVzTWF0Y2hlciB9IGZyb20gXCIuL3R5cGVzLm1hdGNoZXJcIjtcbmltcG9ydCB7IFByaW1pdGl2ZU1hdGNoZXIgfSBmcm9tIFwiLi9wcmltaXRpdmUubWF0Y2hlclwiO1xuaW1wb3J0IHsgT2JqZWN0TWF0Y2hlciB9IGZyb20gXCIuL29iamVjdC5tYXRjaGVyXCI7XG5pbXBvcnQgeyBGdW5jdGlvbk1hdGNoZXIgfSBmcm9tIFwiLi9mdW5jdGlvbi5tYXRjaGVyXCI7XG5pbXBvcnQgeyBJdGVyYWJsZVRlc3RlciB9IGZyb20gXCIuL2l0ZXJhYmxlLnRlc3RlclwiO1xuaW1wb3J0IHsgSXRlcmF0b3JNYXRjaGVyIH0gZnJvbSBcIi4vaXRlcmF0b3IubWF0Y2hlclwiO1xuaW1wb3J0IHsgT0JKRUNUX01BVENIRVJTIH0gZnJvbSBcIi4vb2JqZWN0LW1hdGNoZXJzLmluamVjdGlvbi10b2tlblwiO1xuaW1wb3J0IHsgUE9KT01hdGNoZXIgfSBmcm9tIFwiLi9wb2pvLm1hdGNoZXJcIjtcbmltcG9ydCB7IE9iamVjdE1hcFByb3ZpZGVyIH0gZnJvbSBcIi4vb2JqZWN0LW1hcC5wcm92aWRlclwiO1xuaW1wb3J0IHsgTWFwTWF0Y2hlciB9IGZyb20gXCIuL21hcC5tYXRjaGVyXCI7XG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gXCIuLi9zdGF0aWMuaW5qZWN0b3IvaW5qZWN0b3JcIjtcbmltcG9ydCB7IENvbnN0YW50RXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuLi9leHByZXNzaW9uLmVxdWFsaXR5LWNvbXBhcmVycy9jb25zdGFudC5lcXVhbGl0eS1jb21wYXJlclwiO1xuaW1wb3J0IHsgSXRFcXVhbGl0eUNvbXBhcmVyIH0gZnJvbSBcIi4uL2V4cHJlc3Npb24uZXF1YWxpdHktY29tcGFyZXJzL2l0LmVxdWFsaXR5LWNvbXBhcmVyXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBbXG4gICAge3Byb3ZpZGU6IENvbnN0YW50RXF1YWxpdHlDb21wYXJlciwgdXNlRXhpc3Rpbmc6IEVxdWFsQ29uc3RhbnRNYXRjaGVyfSxcbiAgICB7cHJvdmlkZTogRXF1YWxDb25zdGFudE1hdGNoZXIsIHVzZUNsYXNzOiBFcXVhbENvbnN0YW50TWF0Y2hlciwgZGVwczogW0l0RXF1YWxpdHlDb21wYXJlciwgRXF1YWxNYXRjaGVyXX0sXG4gICAge3Byb3ZpZGU6IENvbW1vblR5cGVQcm92aWRlciwgdXNlQ2xhc3M6IENvbW1vblR5cGVQcm92aWRlciwgZGVwczogW119LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogRXF1YWxNYXRjaGVyLFxuICAgICAgICB1c2VDbGFzczogRXF1YWxNYXRjaGVyLFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBUeXBlc01hdGNoZXIsXG4gICAgICAgICAgICBDb21tb25UeXBlUHJvdmlkZXIsXG4gICAgICAgICAgICBQcmltaXRpdmVNYXRjaGVyLFxuICAgICAgICAgICAgT2JqZWN0TWF0Y2hlcixcbiAgICAgICAgICAgIEZ1bmN0aW9uTWF0Y2hlclxuICAgICAgICBdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogRnVuY3Rpb25NYXRjaGVyLCB1c2VDbGFzczogRnVuY3Rpb25NYXRjaGVyLCBkZXBzOiBbXX0sXG4gICAge3Byb3ZpZGU6IEl0ZXJhYmxlVGVzdGVyLCB1c2VDbGFzczogSXRlcmFibGVUZXN0ZXIsIGRlcHM6IFtdfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IEl0ZXJhdG9yTWF0Y2hlcixcbiAgICAgICAgdXNlQ2xhc3M6IEl0ZXJhdG9yTWF0Y2hlcixcbiAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgSW5qZWN0b3IsXG4gICAgICAgICAgICBJdGVyYWJsZVRlc3RlclxuICAgICAgICBdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogT2JqZWN0TWF0Y2hlciwgdXNlQ2xhc3M6IE9iamVjdE1hdGNoZXIsIGRlcHM6IFtPQkpFQ1RfTUFUQ0hFUlNdfSxcbiAgICB7cHJvdmlkZTogUE9KT01hdGNoZXIsIHVzZUNsYXNzOiBQT0pPTWF0Y2hlciwgZGVwczogW01hcE1hdGNoZXIsIE9iamVjdE1hcFByb3ZpZGVyXX0sXG4gICAge3Byb3ZpZGU6IFByaW1pdGl2ZU1hdGNoZXIsIHVzZUNsYXNzOiBQcmltaXRpdmVNYXRjaGVyLCBkZXBzOiBbXX0sXG4gICAge3Byb3ZpZGU6IE9iamVjdE1hcFByb3ZpZGVyLCB1c2VDbGFzczogT2JqZWN0TWFwUHJvdmlkZXIsIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogVHlwZXNNYXRjaGVyLCB1c2VDbGFzczogVHlwZXNNYXRjaGVyLCBkZXBzOiBbXX0sXG4gICAge3Byb3ZpZGU6IE1hcE1hdGNoZXIsIHVzZUNsYXNzOiBNYXBNYXRjaGVyLCBkZXBzOiBbSW5qZWN0b3JdfSxcbl07XG4iXX0=