import { ConstantEqualityComparer } from "../expression.equality-comparers/constant.equality-comparer";
/**
 * Matches Map objects
 */
export class MapMatcher {
    constructor(injector) {
        this.injector = injector;
    }
    matched(left, right) {
        if (left instanceof Map && right instanceof Map) {
            if (left.size !== right.size)
                return false;
            const constantMatcher = this.injector.get(ConstantEqualityComparer);
            for (const [key, value] of left) {
                if (right.has(key) === false)
                    return false;
                if (constantMatcher.equals(value, right.get(key)) === false)
                    return false;
            }
            return true;
        }
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLm1hdGNoZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9lcXVhbC1tYXRjaGVycy9tYXAubWF0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw2REFBNkQsQ0FBQztBQUV2Rzs7R0FFRztBQUNILE1BQU0sT0FBTyxVQUFVO0lBQ25CLFlBQTZCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDL0MsQ0FBQztJQUVNLE9BQU8sQ0FBNEIsSUFBTyxFQUFFLEtBQVE7UUFDdkQsSUFBSSxJQUFJLFlBQVksR0FBRyxJQUFJLEtBQUssWUFBWSxHQUFHLEVBQUU7WUFDN0MsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJO2dCQUFFLE9BQU8sS0FBSyxDQUFDO1lBQzNDLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDcEUsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRTtnQkFDN0IsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUs7b0JBQUUsT0FBTyxLQUFLLENBQUM7Z0JBQzNDLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEtBQUs7b0JBQUUsT0FBTyxLQUFLLENBQUM7YUFDN0U7WUFDRCxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSU9iamVjdE1hdGNoZXIgfSBmcm9tIFwiLi9vYmplY3QtbWF0Y2hlci50eXBlXCI7XG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gXCIuLi9zdGF0aWMuaW5qZWN0b3IvaW5qZWN0b3JcIjtcbmltcG9ydCB7IENvbnN0YW50RXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuLi9leHByZXNzaW9uLmVxdWFsaXR5LWNvbXBhcmVycy9jb25zdGFudC5lcXVhbGl0eS1jb21wYXJlclwiO1xuXG4vKipcbiAqIE1hdGNoZXMgTWFwIG9iamVjdHNcbiAqL1xuZXhwb3J0IGNsYXNzIE1hcE1hdGNoZXIgaW1wbGVtZW50cyBJT2JqZWN0TWF0Y2hlciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgbWF0Y2hlZDxUID0gTWFwPHVua25vd24sIHVua25vd24+PihsZWZ0OiBULCByaWdodDogVCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAobGVmdCBpbnN0YW5jZW9mIE1hcCAmJiByaWdodCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgaWYgKGxlZnQuc2l6ZSAhPT0gcmlnaHQuc2l6ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgY29uc3RhbnRNYXRjaGVyID0gdGhpcy5pbmplY3Rvci5nZXQoQ29uc3RhbnRFcXVhbGl0eUNvbXBhcmVyKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGxlZnQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmlnaHQuaGFzKGtleSkgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnN0YW50TWF0Y2hlci5lcXVhbHModmFsdWUsIHJpZ2h0LmdldChrZXkpKSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuXG4iXX0=