import { Times } from "../times";
/**
 * @hidden
 */
export class Verifier {
    constructor(callCounter, verificationTester, autoMockProvider) {
        this.callCounter = callCounter;
        this.verificationTester = verificationTester;
        this.autoMockProvider = autoMockProvider;
    }
    test([shallow, ...rest], times) {
        const callCount = this.callCounter.count(shallow);
        if (rest.length === 0) {
            this.verificationTester.test(shallow, callCount, times);
        }
        else {
            this.verificationTester.test(shallow, callCount, Times.AtLeastOnce());
            const autoMock = this.autoMockProvider.getOrCreate(shallow);
            const verifier = autoMock.resolve(Verifier);
            verifier.test(rest, times);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyaWZpZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi92ZXJpZmljYXRpb24vdmVyaWZpZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQU1qQzs7R0FFRztBQUNILE1BQU0sT0FBTyxRQUFRO0lBQ2pCLFlBQ3FCLFdBQXdCLEVBQ3hCLGtCQUFzQyxFQUN0QyxnQkFBa0M7UUFGbEMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBRXZELENBQUM7SUFFTSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQW1CLEVBQUUsS0FBWTtRQUMxRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzRDthQUFNO1lBQ0gsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1lBQ3RFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDNUQsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5QjtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRpbWVzIH0gZnJvbSBcIi4uL3RpbWVzXCI7XG5pbXBvcnQgeyBDYWxsQ291bnRlciB9IGZyb20gXCIuL2NhbGwtY291bnRlclwiO1xuaW1wb3J0IHsgRXhwcmVzc2lvbnMgfSBmcm9tIFwiLi4vcmVmbGVjdG9yL2V4cHJlc3Npb25zXCI7XG5pbXBvcnQgeyBBdXRvTW9ja1Byb3ZpZGVyIH0gZnJvbSBcIi4uL2F1dG8tbW9ja2luZy9hdXRvLW1vY2sucHJvdmlkZXJcIjtcbmltcG9ydCB7IFZlcmlmaWNhdGlvblRlc3RlciB9IGZyb20gXCIuL3ZlcmlmaWNhdGlvbi10ZXN0ZXJcIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBWZXJpZmllcjxUPiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY2FsbENvdW50ZXI6IENhbGxDb3VudGVyLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHZlcmlmaWNhdGlvblRlc3RlcjogVmVyaWZpY2F0aW9uVGVzdGVyLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGF1dG9Nb2NrUHJvdmlkZXI6IEF1dG9Nb2NrUHJvdmlkZXIpIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyB0ZXN0KFtzaGFsbG93LCAuLi5yZXN0XTogRXhwcmVzc2lvbnM8VD5bXSwgdGltZXM6IFRpbWVzKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNhbGxDb3VudCA9IHRoaXMuY2FsbENvdW50ZXIuY291bnQoc2hhbGxvdyk7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy52ZXJpZmljYXRpb25UZXN0ZXIudGVzdChzaGFsbG93LCBjYWxsQ291bnQsIHRpbWVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmVyaWZpY2F0aW9uVGVzdGVyLnRlc3Qoc2hhbGxvdywgY2FsbENvdW50LCBUaW1lcy5BdExlYXN0T25jZSgpKTtcbiAgICAgICAgICAgIGNvbnN0IGF1dG9Nb2NrID0gdGhpcy5hdXRvTW9ja1Byb3ZpZGVyLmdldE9yQ3JlYXRlKHNoYWxsb3cpO1xuICAgICAgICAgICAgY29uc3QgdmVyaWZpZXIgPSBhdXRvTW9jay5yZXNvbHZlKFZlcmlmaWVyKTtcbiAgICAgICAgICAgIHZlcmlmaWVyLnRlc3QocmVzdCwgdGltZXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19