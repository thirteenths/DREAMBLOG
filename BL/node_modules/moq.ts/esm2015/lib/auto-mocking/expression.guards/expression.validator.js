import { FunctionExpression, GetPropertyExpression, InOperatorExpression, MethodExpression, NewOperatorExpression, SetPropertyExpression } from "../../reflector/expressions";
import { It } from "../../reflector/expression-predicates";
export class ExpressionValidator {
    constructor(functionExpressionGuard, getPropertyExpressionGuard, setPropertyExpressionGuard, inOperatorExpressionGuard, instanceMethodExpressionGuard, newOperatorExpressionGuard) {
        this.functionExpressionGuard = functionExpressionGuard;
        this.getPropertyExpressionGuard = getPropertyExpressionGuard;
        this.setPropertyExpressionGuard = setPropertyExpressionGuard;
        this.inOperatorExpressionGuard = inOperatorExpressionGuard;
        this.instanceMethodExpressionGuard = instanceMethodExpressionGuard;
        this.newOperatorExpressionGuard = newOperatorExpressionGuard;
    }
    validate(expression) {
        switch (expression.constructor) {
            case FunctionExpression:
                return this.functionExpressionGuard.validate(expression);
            case GetPropertyExpression:
                return this.getPropertyExpressionGuard.validate(expression);
            case SetPropertyExpression:
                return this.setPropertyExpressionGuard.validate(expression);
            case InOperatorExpression:
                return this.inOperatorExpressionGuard.validate(expression);
            case MethodExpression:
                return this.instanceMethodExpressionGuard.validate(expression);
            case NewOperatorExpression:
                return this.newOperatorExpressionGuard.validate(expression);
            case It:
                return false;
            default:
                throw new Error(`Unknown expression type: ${expression.constructor.name}`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi52YWxpZGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9hdXRvLW1vY2tpbmcvZXhwcmVzc2lvbi5ndWFyZHMvZXhwcmVzc2lvbi52YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVILGtCQUFrQixFQUNsQixxQkFBcUIsRUFDckIsb0JBQW9CLEVBQ3BCLGdCQUFnQixFQUNoQixxQkFBcUIsRUFDckIscUJBQXFCLEVBQ3hCLE1BQU0sNkJBQTZCLENBQUM7QUFNckMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBRzNELE1BQU0sT0FBTyxtQkFBbUI7SUFFNUIsWUFBNkIsdUJBQW9ELEVBQ3BELDBCQUEwRCxFQUMxRCwwQkFBMEQsRUFDMUQseUJBQXdELEVBQ3hELDZCQUFnRSxFQUNoRSwwQkFBMEQ7UUFMMUQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUE2QjtRQUNwRCwrQkFBMEIsR0FBMUIsMEJBQTBCLENBQWdDO1FBQzFELCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBZ0M7UUFDMUQsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUErQjtRQUN4RCxrQ0FBNkIsR0FBN0IsNkJBQTZCLENBQW1DO1FBQ2hFLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBZ0M7SUFDdkYsQ0FBQztJQUVELFFBQVEsQ0FBQyxVQUFnQztRQUNyQyxRQUFRLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDNUIsS0FBSyxrQkFBa0I7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxVQUFnQyxDQUFDLENBQUM7WUFDbkYsS0FBSyxxQkFBcUI7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxVQUFtQyxDQUFDLENBQUM7WUFDekYsS0FBSyxxQkFBcUI7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxVQUFtQyxDQUFDLENBQUM7WUFDekYsS0FBSyxvQkFBb0I7Z0JBQ3JCLE9BQU8sSUFBSSxDQUFDLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxVQUFrQyxDQUFDLENBQUM7WUFDdkYsS0FBSyxnQkFBZ0I7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsQ0FBQyxVQUE4QixDQUFDLENBQUM7WUFDdkYsS0FBSyxxQkFBcUI7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxVQUFtQyxDQUFDLENBQUM7WUFDekYsS0FBSyxFQUFFO2dCQUNILE9BQU8sS0FBSyxDQUFDO1lBQ2pCO2dCQUNJLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUNsRjtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRXhwcmVzc2lvbnMsXG4gICAgRnVuY3Rpb25FeHByZXNzaW9uLFxuICAgIEdldFByb3BlcnR5RXhwcmVzc2lvbixcbiAgICBJbk9wZXJhdG9yRXhwcmVzc2lvbixcbiAgICBNZXRob2RFeHByZXNzaW9uLFxuICAgIE5ld09wZXJhdG9yRXhwcmVzc2lvbixcbiAgICBTZXRQcm9wZXJ0eUV4cHJlc3Npb25cbn0gZnJvbSBcIi4uLy4uL3JlZmxlY3Rvci9leHByZXNzaW9uc1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25FeHByZXNzaW9uVmFsaWRhdG9yIH0gZnJvbSBcIi4vZnVuY3Rpb24tZXhwcmVzc2lvbi52YWxpZGF0b3JcIjtcbmltcG9ydCB7IEdldFByb3BlcnR5RXhwcmVzc2lvblZhbGlkYXRvciB9IGZyb20gXCIuL2dldC1wcm9wZXJ0eS1leHByZXNzaW9uLnZhbGlkYXRvclwiO1xuaW1wb3J0IHsgU2V0UHJvcGVydHlFeHByZXNzaW9uVmFsaWRhdG9yIH0gZnJvbSBcIi4vc2V0LXByb3BlcnR5LWV4cHJlc3Npb24udmFsaWRhdG9yXCI7XG5pbXBvcnQgeyBJbnN0YW5jZU1ldGhvZEV4cHJlc3Npb25WYWxpZGF0b3IgfSBmcm9tIFwiLi9pbnN0YW5jZS1tZXRob2QtZXhwcmVzc2lvbi52YWxpZGF0b3JcIjtcbmltcG9ydCB7IE5ld09wZXJhdG9yRXhwcmVzc2lvblZhbGlkYXRvciB9IGZyb20gXCIuL25ldy1vcGVyYXRvci1leHByZXNzaW9uLnZhbGlkYXRvclwiO1xuaW1wb3J0IHsgSXQgfSBmcm9tIFwiLi4vLi4vcmVmbGVjdG9yL2V4cHJlc3Npb24tcHJlZGljYXRlc1wiO1xuaW1wb3J0IHsgSW5PcGVyYXRvckV4cHJlc3Npb25WYWxpZGF0b3IgfSBmcm9tIFwiLi9pbi1vcGVyYXRvci1leHByZXNzaW9uLnZhbGlkYXRvclwiO1xuXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblZhbGlkYXRvciB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZ1bmN0aW9uRXhwcmVzc2lvbkd1YXJkOiBGdW5jdGlvbkV4cHJlc3Npb25WYWxpZGF0b3IsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBnZXRQcm9wZXJ0eUV4cHJlc3Npb25HdWFyZDogR2V0UHJvcGVydHlFeHByZXNzaW9uVmFsaWRhdG9yLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2V0UHJvcGVydHlFeHByZXNzaW9uR3VhcmQ6IFNldFByb3BlcnR5RXhwcmVzc2lvblZhbGlkYXRvcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGluT3BlcmF0b3JFeHByZXNzaW9uR3VhcmQ6IEluT3BlcmF0b3JFeHByZXNzaW9uVmFsaWRhdG9yLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaW5zdGFuY2VNZXRob2RFeHByZXNzaW9uR3VhcmQ6IEluc3RhbmNlTWV0aG9kRXhwcmVzc2lvblZhbGlkYXRvcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG5ld09wZXJhdG9yRXhwcmVzc2lvbkd1YXJkOiBOZXdPcGVyYXRvckV4cHJlc3Npb25WYWxpZGF0b3IpIHtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZShleHByZXNzaW9uOiBFeHByZXNzaW9uczx1bmtub3duPikge1xuICAgICAgICBzd2l0Y2ggKGV4cHJlc3Npb24uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgRnVuY3Rpb25FeHByZXNzaW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uRXhwcmVzc2lvbkd1YXJkLnZhbGlkYXRlKGV4cHJlc3Npb24gYXMgRnVuY3Rpb25FeHByZXNzaW9uKTtcbiAgICAgICAgICAgIGNhc2UgR2V0UHJvcGVydHlFeHByZXNzaW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFByb3BlcnR5RXhwcmVzc2lvbkd1YXJkLnZhbGlkYXRlKGV4cHJlc3Npb24gYXMgR2V0UHJvcGVydHlFeHByZXNzaW9uKTtcbiAgICAgICAgICAgIGNhc2UgU2V0UHJvcGVydHlFeHByZXNzaW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFByb3BlcnR5RXhwcmVzc2lvbkd1YXJkLnZhbGlkYXRlKGV4cHJlc3Npb24gYXMgU2V0UHJvcGVydHlFeHByZXNzaW9uKTtcbiAgICAgICAgICAgIGNhc2UgSW5PcGVyYXRvckV4cHJlc3Npb246XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5PcGVyYXRvckV4cHJlc3Npb25HdWFyZC52YWxpZGF0ZShleHByZXNzaW9uIGFzIEluT3BlcmF0b3JFeHByZXNzaW9uKTtcbiAgICAgICAgICAgIGNhc2UgTWV0aG9kRXhwcmVzc2lvbjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZU1ldGhvZEV4cHJlc3Npb25HdWFyZC52YWxpZGF0ZShleHByZXNzaW9uIGFzIE1ldGhvZEV4cHJlc3Npb24pO1xuICAgICAgICAgICAgY2FzZSBOZXdPcGVyYXRvckV4cHJlc3Npb246XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV3T3BlcmF0b3JFeHByZXNzaW9uR3VhcmQudmFsaWRhdGUoZXhwcmVzc2lvbiBhcyBOZXdPcGVyYXRvckV4cHJlc3Npb24pO1xuICAgICAgICAgICAgY2FzZSBJdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBleHByZXNzaW9uIHR5cGU6ICR7ZXhwcmVzc2lvbi5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19