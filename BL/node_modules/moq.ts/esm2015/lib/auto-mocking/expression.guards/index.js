import { ComplexExpressionGuard } from "./complex-expression.guard";
import { ComplexExpressionValidator } from "./complex-expression.validator";
import { ExpressionGuardExceptionFactory } from "./expression-guard-exception.factory";
import { ExpressionValidator } from "./expression.validator";
import { FunctionExpressionValidator } from "./function-expression.validator";
import { GetPropertyExpressionValidator } from "./get-property-expression.validator";
import { SetPropertyExpressionValidator } from "./set-property-expression.validator";
import { InOperatorExpressionValidator } from "./in-operator-expression.validator";
import { InstanceMethodExpressionValidator } from "./instance-method-expression.validator";
import { NewOperatorExpressionValidator } from "./new-operator-expression.validator";
import { ComplexExpressionErrorFormatter } from "./expression.formatters/complex-expression.error-formatter";
import expressionFormatters from "./expression.formatters";
/**
 * @hidden
 */
export default [
    {
        provide: ComplexExpressionGuard,
        useClass: ComplexExpressionGuard,
        deps: [ComplexExpressionValidator, ExpressionGuardExceptionFactory]
    },
    { provide: ComplexExpressionValidator, useClass: ComplexExpressionValidator, deps: [ExpressionValidator] },
    {
        provide: ExpressionGuardExceptionFactory,
        useClass: ExpressionGuardExceptionFactory,
        deps: [ComplexExpressionErrorFormatter]
    },
    {
        provide: ExpressionValidator, useClass: ExpressionValidator, deps: [
            FunctionExpressionValidator,
            GetPropertyExpressionValidator,
            SetPropertyExpressionValidator,
            InOperatorExpressionValidator,
            InstanceMethodExpressionValidator,
            NewOperatorExpressionValidator
        ]
    },
    { provide: FunctionExpressionValidator, useClass: FunctionExpressionValidator, deps: [] },
    { provide: GetPropertyExpressionValidator, useClass: GetPropertyExpressionValidator, deps: [] },
    { provide: SetPropertyExpressionValidator, useClass: SetPropertyExpressionValidator, deps: [] },
    { provide: InOperatorExpressionValidator, useClass: InOperatorExpressionValidator, deps: [] },
    { provide: InstanceMethodExpressionValidator, useClass: InstanceMethodExpressionValidator, deps: [] },
    { provide: NewOperatorExpressionValidator, useClass: NewOperatorExpressionValidator, deps: [] },
    ...expressionFormatters
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9hdXRvLW1vY2tpbmcvZXhwcmVzc2lvbi5ndWFyZHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDNUUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDOUUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckYsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDbkYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDM0YsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDN0csT0FBTyxvQkFBb0IsTUFBTSx5QkFBeUIsQ0FBQztBQUUzRDs7R0FFRztBQUNILGVBQWU7SUFDWDtRQUNJLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsUUFBUSxFQUFFLHNCQUFzQjtRQUNoQyxJQUFJLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSwrQkFBK0IsQ0FBQztLQUN0RTtJQUNELEVBQUMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFDO0lBQ3hHO1FBQ0ksT0FBTyxFQUFFLCtCQUErQjtRQUN4QyxRQUFRLEVBQUUsK0JBQStCO1FBQ3pDLElBQUksRUFBRSxDQUFDLCtCQUErQixDQUFDO0tBQzFDO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRTtZQUMvRCwyQkFBMkI7WUFDM0IsOEJBQThCO1lBQzlCLDhCQUE4QjtZQUM5Qiw2QkFBNkI7WUFDN0IsaUNBQWlDO1lBQ2pDLDhCQUE4QjtTQUNqQztLQUNKO0lBQ0QsRUFBQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLDJCQUEyQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDdkYsRUFBQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsUUFBUSxFQUFFLDhCQUE4QixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDN0YsRUFBQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsUUFBUSxFQUFFLDhCQUE4QixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDN0YsRUFBQyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsUUFBUSxFQUFFLDZCQUE2QixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDM0YsRUFBQyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsUUFBUSxFQUFFLGlDQUFpQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDbkcsRUFBQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsUUFBUSxFQUFFLDhCQUE4QixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDN0YsR0FBRyxvQkFBb0I7Q0FDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBsZXhFeHByZXNzaW9uR3VhcmQgfSBmcm9tIFwiLi9jb21wbGV4LWV4cHJlc3Npb24uZ3VhcmRcIjtcbmltcG9ydCB7IENvbXBsZXhFeHByZXNzaW9uVmFsaWRhdG9yIH0gZnJvbSBcIi4vY29tcGxleC1leHByZXNzaW9uLnZhbGlkYXRvclwiO1xuaW1wb3J0IHsgRXhwcmVzc2lvbkd1YXJkRXhjZXB0aW9uRmFjdG9yeSB9IGZyb20gXCIuL2V4cHJlc3Npb24tZ3VhcmQtZXhjZXB0aW9uLmZhY3RvcnlcIjtcbmltcG9ydCB7IEV4cHJlc3Npb25WYWxpZGF0b3IgfSBmcm9tIFwiLi9leHByZXNzaW9uLnZhbGlkYXRvclwiO1xuaW1wb3J0IHsgRnVuY3Rpb25FeHByZXNzaW9uVmFsaWRhdG9yIH0gZnJvbSBcIi4vZnVuY3Rpb24tZXhwcmVzc2lvbi52YWxpZGF0b3JcIjtcbmltcG9ydCB7IEdldFByb3BlcnR5RXhwcmVzc2lvblZhbGlkYXRvciB9IGZyb20gXCIuL2dldC1wcm9wZXJ0eS1leHByZXNzaW9uLnZhbGlkYXRvclwiO1xuaW1wb3J0IHsgU2V0UHJvcGVydHlFeHByZXNzaW9uVmFsaWRhdG9yIH0gZnJvbSBcIi4vc2V0LXByb3BlcnR5LWV4cHJlc3Npb24udmFsaWRhdG9yXCI7XG5pbXBvcnQgeyBJbk9wZXJhdG9yRXhwcmVzc2lvblZhbGlkYXRvciB9IGZyb20gXCIuL2luLW9wZXJhdG9yLWV4cHJlc3Npb24udmFsaWRhdG9yXCI7XG5pbXBvcnQgeyBJbnN0YW5jZU1ldGhvZEV4cHJlc3Npb25WYWxpZGF0b3IgfSBmcm9tIFwiLi9pbnN0YW5jZS1tZXRob2QtZXhwcmVzc2lvbi52YWxpZGF0b3JcIjtcbmltcG9ydCB7IE5ld09wZXJhdG9yRXhwcmVzc2lvblZhbGlkYXRvciB9IGZyb20gXCIuL25ldy1vcGVyYXRvci1leHByZXNzaW9uLnZhbGlkYXRvclwiO1xuaW1wb3J0IHsgQ29tcGxleEV4cHJlc3Npb25FcnJvckZvcm1hdHRlciB9IGZyb20gXCIuL2V4cHJlc3Npb24uZm9ybWF0dGVycy9jb21wbGV4LWV4cHJlc3Npb24uZXJyb3ItZm9ybWF0dGVyXCI7XG5pbXBvcnQgZXhwcmVzc2lvbkZvcm1hdHRlcnMgZnJvbSBcIi4vZXhwcmVzc2lvbi5mb3JtYXR0ZXJzXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBbXG4gICAge1xuICAgICAgICBwcm92aWRlOiBDb21wbGV4RXhwcmVzc2lvbkd1YXJkLFxuICAgICAgICB1c2VDbGFzczogQ29tcGxleEV4cHJlc3Npb25HdWFyZCxcbiAgICAgICAgZGVwczogW0NvbXBsZXhFeHByZXNzaW9uVmFsaWRhdG9yLCBFeHByZXNzaW9uR3VhcmRFeGNlcHRpb25GYWN0b3J5XVxuICAgIH0sXG4gICAge3Byb3ZpZGU6IENvbXBsZXhFeHByZXNzaW9uVmFsaWRhdG9yLCB1c2VDbGFzczogQ29tcGxleEV4cHJlc3Npb25WYWxpZGF0b3IsIGRlcHM6IFtFeHByZXNzaW9uVmFsaWRhdG9yXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBFeHByZXNzaW9uR3VhcmRFeGNlcHRpb25GYWN0b3J5LFxuICAgICAgICB1c2VDbGFzczogRXhwcmVzc2lvbkd1YXJkRXhjZXB0aW9uRmFjdG9yeSxcbiAgICAgICAgZGVwczogW0NvbXBsZXhFeHByZXNzaW9uRXJyb3JGb3JtYXR0ZXJdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IEV4cHJlc3Npb25WYWxpZGF0b3IsIHVzZUNsYXNzOiBFeHByZXNzaW9uVmFsaWRhdG9yLCBkZXBzOiBbXG4gICAgICAgICAgICBGdW5jdGlvbkV4cHJlc3Npb25WYWxpZGF0b3IsXG4gICAgICAgICAgICBHZXRQcm9wZXJ0eUV4cHJlc3Npb25WYWxpZGF0b3IsXG4gICAgICAgICAgICBTZXRQcm9wZXJ0eUV4cHJlc3Npb25WYWxpZGF0b3IsXG4gICAgICAgICAgICBJbk9wZXJhdG9yRXhwcmVzc2lvblZhbGlkYXRvcixcbiAgICAgICAgICAgIEluc3RhbmNlTWV0aG9kRXhwcmVzc2lvblZhbGlkYXRvcixcbiAgICAgICAgICAgIE5ld09wZXJhdG9yRXhwcmVzc2lvblZhbGlkYXRvclxuICAgICAgICBdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogRnVuY3Rpb25FeHByZXNzaW9uVmFsaWRhdG9yLCB1c2VDbGFzczogRnVuY3Rpb25FeHByZXNzaW9uVmFsaWRhdG9yLCBkZXBzOiBbXX0sXG4gICAge3Byb3ZpZGU6IEdldFByb3BlcnR5RXhwcmVzc2lvblZhbGlkYXRvciwgdXNlQ2xhc3M6IEdldFByb3BlcnR5RXhwcmVzc2lvblZhbGlkYXRvciwgZGVwczogW119LFxuICAgIHtwcm92aWRlOiBTZXRQcm9wZXJ0eUV4cHJlc3Npb25WYWxpZGF0b3IsIHVzZUNsYXNzOiBTZXRQcm9wZXJ0eUV4cHJlc3Npb25WYWxpZGF0b3IsIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogSW5PcGVyYXRvckV4cHJlc3Npb25WYWxpZGF0b3IsIHVzZUNsYXNzOiBJbk9wZXJhdG9yRXhwcmVzc2lvblZhbGlkYXRvciwgZGVwczogW119LFxuICAgIHtwcm92aWRlOiBJbnN0YW5jZU1ldGhvZEV4cHJlc3Npb25WYWxpZGF0b3IsIHVzZUNsYXNzOiBJbnN0YW5jZU1ldGhvZEV4cHJlc3Npb25WYWxpZGF0b3IsIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogTmV3T3BlcmF0b3JFeHByZXNzaW9uVmFsaWRhdG9yLCB1c2VDbGFzczogTmV3T3BlcmF0b3JFeHByZXNzaW9uVmFsaWRhdG9yLCBkZXBzOiBbXX0sXG4gICAgLi4uZXhwcmVzc2lvbkZvcm1hdHRlcnNcbl07XG4iXX0=