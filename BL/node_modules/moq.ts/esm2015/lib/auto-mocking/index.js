import { MOCK } from "../injector/mock.injection-token";
import { AutoMockFactory } from "./auto-mock.factory";
import { MOCK_OPTIONS } from "../mock-options/mock-options.injection-token";
import { RootMockProvider } from "./root-mock.provider";
import { Optional } from "../static.injector/metadata";
import { ROOT_MOCK } from "../injector/root-mock.injection-token";
import { AutoMockedStorage } from "./auto-mock.storage";
import { AutoMockProvider } from "./auto-mock.provider";
import { AutoMockOptionsBuilder } from "./auto-mock-options.builder";
import { AutoMockNameFormatter } from "./name-formatters/auto-mock-name.formatter";
import { AutoMockInjectorConfig } from "./auto-mock-injector.config";
import { NamePrefixProvider } from "./name-formatters/name-prefix.provider";
import { FunctionFormatter } from "../formatters/function.formatter";
import { PropertyKeyFormatter } from "../formatters/property-key.formatter";
import { MethodFormatter } from "../formatters/method.formatter";
import { ConstantFormatter } from "../formatters/constant.formatter";
import { MOCK_CONSTRUCTOR } from "../injector/mock-constructor.injection-token";
import { ExpressionEqualityComparer } from "../expression.equality-comparers/expression.equality-comparer";
import { ComplexExpressionValidator } from "./expression.guards/complex-expression.validator";
import expressionGuards from "./expression.guards";
/**
 * @hidden
 */
export default [
    { provide: NamePrefixProvider, useClass: NamePrefixProvider, deps: [] },
    { provide: AutoMockedStorage, useClass: AutoMockedStorage, deps: [] },
    {
        provide: AutoMockNameFormatter,
        useClass: AutoMockNameFormatter,
        deps: [NamePrefixProvider, FunctionFormatter, PropertyKeyFormatter, MethodFormatter, ConstantFormatter]
    },
    {
        provide: AutoMockOptionsBuilder,
        useClass: AutoMockOptionsBuilder,
        deps: [MOCK_OPTIONS, AutoMockNameFormatter, AutoMockInjectorConfig]
    },
    {
        provide: AutoMockInjectorConfig,
        useClass: AutoMockInjectorConfig,
        deps: [MOCK_OPTIONS, MOCK, [new Optional(), ROOT_MOCK]]
    },
    { provide: AutoMockFactory, useClass: AutoMockFactory, deps: [MOCK_CONSTRUCTOR, AutoMockOptionsBuilder] },
    { provide: RootMockProvider, useClass: RootMockProvider, deps: [MOCK, [new Optional(), ROOT_MOCK]] },
    {
        provide: AutoMockProvider,
        useClass: AutoMockProvider,
        deps: [AutoMockedStorage, ExpressionEqualityComparer, AutoMockFactory]
    },
    { provide: ComplexExpressionValidator, useClass: ComplexExpressionValidator, deps: [] },
    ...expressionGuards
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9hdXRvLW1vY2tpbmcvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDNUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNuRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNyRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDakUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDckUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDaEYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sK0RBQStELENBQUM7QUFDM0csT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDOUYsT0FBTyxnQkFBZ0IsTUFBTSxxQkFBcUIsQ0FBQztBQUVuRDs7R0FFRztBQUNILGVBQWU7SUFDWCxFQUFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUNyRSxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUNuRTtRQUNJLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsUUFBUSxFQUFFLHFCQUFxQjtRQUMvQixJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLENBQUM7S0FDMUc7SUFDRDtRQUNJLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsUUFBUSxFQUFFLHNCQUFzQjtRQUNoQyxJQUFJLEVBQUUsQ0FBQyxZQUFZLEVBQUUscUJBQXFCLEVBQUUsc0JBQXNCLENBQUM7S0FDdEU7SUFDRDtRQUNJLE9BQU8sRUFBRSxzQkFBc0I7UUFDL0IsUUFBUSxFQUFFLHNCQUFzQjtRQUNoQyxJQUFJLEVBQUUsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztLQUMxRDtJQUNELEVBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLGdCQUFnQixFQUFFLHNCQUFzQixDQUFDLEVBQUM7SUFDdkcsRUFBQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBQztJQUNsRztRQUNJLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQixJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSwwQkFBMEIsRUFBRSxlQUFlLENBQUM7S0FDekU7SUFDRCxFQUFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUNyRixHQUFHLGdCQUFnQjtDQUN0QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTU9DSyB9IGZyb20gXCIuLi9pbmplY3Rvci9tb2NrLmluamVjdGlvbi10b2tlblwiO1xuaW1wb3J0IHsgQXV0b01vY2tGYWN0b3J5IH0gZnJvbSBcIi4vYXV0by1tb2NrLmZhY3RvcnlcIjtcbmltcG9ydCB7IE1PQ0tfT1BUSU9OUyB9IGZyb20gXCIuLi9tb2NrLW9wdGlvbnMvbW9jay1vcHRpb25zLmluamVjdGlvbi10b2tlblwiO1xuaW1wb3J0IHsgUm9vdE1vY2tQcm92aWRlciB9IGZyb20gXCIuL3Jvb3QtbW9jay5wcm92aWRlclwiO1xuaW1wb3J0IHsgT3B0aW9uYWwgfSBmcm9tIFwiLi4vc3RhdGljLmluamVjdG9yL21ldGFkYXRhXCI7XG5pbXBvcnQgeyBST09UX01PQ0sgfSBmcm9tIFwiLi4vaW5qZWN0b3Ivcm9vdC1tb2NrLmluamVjdGlvbi10b2tlblwiO1xuaW1wb3J0IHsgQXV0b01vY2tlZFN0b3JhZ2UgfSBmcm9tIFwiLi9hdXRvLW1vY2suc3RvcmFnZVwiO1xuaW1wb3J0IHsgQXV0b01vY2tQcm92aWRlciB9IGZyb20gXCIuL2F1dG8tbW9jay5wcm92aWRlclwiO1xuaW1wb3J0IHsgQXV0b01vY2tPcHRpb25zQnVpbGRlciB9IGZyb20gXCIuL2F1dG8tbW9jay1vcHRpb25zLmJ1aWxkZXJcIjtcbmltcG9ydCB7IEF1dG9Nb2NrTmFtZUZvcm1hdHRlciB9IGZyb20gXCIuL25hbWUtZm9ybWF0dGVycy9hdXRvLW1vY2stbmFtZS5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IEF1dG9Nb2NrSW5qZWN0b3JDb25maWcgfSBmcm9tIFwiLi9hdXRvLW1vY2staW5qZWN0b3IuY29uZmlnXCI7XG5pbXBvcnQgeyBOYW1lUHJlZml4UHJvdmlkZXIgfSBmcm9tIFwiLi9uYW1lLWZvcm1hdHRlcnMvbmFtZS1wcmVmaXgucHJvdmlkZXJcIjtcbmltcG9ydCB7IEZ1bmN0aW9uRm9ybWF0dGVyIH0gZnJvbSBcIi4uL2Zvcm1hdHRlcnMvZnVuY3Rpb24uZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBQcm9wZXJ0eUtleUZvcm1hdHRlciB9IGZyb20gXCIuLi9mb3JtYXR0ZXJzL3Byb3BlcnR5LWtleS5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IE1ldGhvZEZvcm1hdHRlciB9IGZyb20gXCIuLi9mb3JtYXR0ZXJzL21ldGhvZC5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IENvbnN0YW50Rm9ybWF0dGVyIH0gZnJvbSBcIi4uL2Zvcm1hdHRlcnMvY29uc3RhbnQuZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBNT0NLX0NPTlNUUlVDVE9SIH0gZnJvbSBcIi4uL2luamVjdG9yL21vY2stY29uc3RydWN0b3IuaW5qZWN0aW9uLXRva2VuXCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uRXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuLi9leHByZXNzaW9uLmVxdWFsaXR5LWNvbXBhcmVycy9leHByZXNzaW9uLmVxdWFsaXR5LWNvbXBhcmVyXCI7XG5pbXBvcnQgeyBDb21wbGV4RXhwcmVzc2lvblZhbGlkYXRvciB9IGZyb20gXCIuL2V4cHJlc3Npb24uZ3VhcmRzL2NvbXBsZXgtZXhwcmVzc2lvbi52YWxpZGF0b3JcIjtcbmltcG9ydCBleHByZXNzaW9uR3VhcmRzIGZyb20gXCIuL2V4cHJlc3Npb24uZ3VhcmRzXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBbXG4gICAge3Byb3ZpZGU6IE5hbWVQcmVmaXhQcm92aWRlciwgdXNlQ2xhc3M6IE5hbWVQcmVmaXhQcm92aWRlciwgZGVwczogW119LFxuICAgIHtwcm92aWRlOiBBdXRvTW9ja2VkU3RvcmFnZSwgdXNlQ2xhc3M6IEF1dG9Nb2NrZWRTdG9yYWdlLCBkZXBzOiBbXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBBdXRvTW9ja05hbWVGb3JtYXR0ZXIsXG4gICAgICAgIHVzZUNsYXNzOiBBdXRvTW9ja05hbWVGb3JtYXR0ZXIsXG4gICAgICAgIGRlcHM6IFtOYW1lUHJlZml4UHJvdmlkZXIsIEZ1bmN0aW9uRm9ybWF0dGVyLCBQcm9wZXJ0eUtleUZvcm1hdHRlciwgTWV0aG9kRm9ybWF0dGVyLCBDb25zdGFudEZvcm1hdHRlcl1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogQXV0b01vY2tPcHRpb25zQnVpbGRlcixcbiAgICAgICAgdXNlQ2xhc3M6IEF1dG9Nb2NrT3B0aW9uc0J1aWxkZXIsXG4gICAgICAgIGRlcHM6IFtNT0NLX09QVElPTlMsIEF1dG9Nb2NrTmFtZUZvcm1hdHRlciwgQXV0b01vY2tJbmplY3RvckNvbmZpZ11cbiAgICB9LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogQXV0b01vY2tJbmplY3RvckNvbmZpZyxcbiAgICAgICAgdXNlQ2xhc3M6IEF1dG9Nb2NrSW5qZWN0b3JDb25maWcsXG4gICAgICAgIGRlcHM6IFtNT0NLX09QVElPTlMsIE1PQ0ssIFtuZXcgT3B0aW9uYWwoKSwgUk9PVF9NT0NLXV1cbiAgICB9LFxuICAgIHtwcm92aWRlOiBBdXRvTW9ja0ZhY3RvcnksIHVzZUNsYXNzOiBBdXRvTW9ja0ZhY3RvcnksIGRlcHM6IFtNT0NLX0NPTlNUUlVDVE9SLCBBdXRvTW9ja09wdGlvbnNCdWlsZGVyXX0sXG4gICAge3Byb3ZpZGU6IFJvb3RNb2NrUHJvdmlkZXIsIHVzZUNsYXNzOiBSb290TW9ja1Byb3ZpZGVyLCBkZXBzOiBbTU9DSywgW25ldyBPcHRpb25hbCgpLCBST09UX01PQ0tdXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBBdXRvTW9ja1Byb3ZpZGVyLFxuICAgICAgICB1c2VDbGFzczogQXV0b01vY2tQcm92aWRlcixcbiAgICAgICAgZGVwczogW0F1dG9Nb2NrZWRTdG9yYWdlLCBFeHByZXNzaW9uRXF1YWxpdHlDb21wYXJlciwgQXV0b01vY2tGYWN0b3J5XVxuICAgIH0sXG4gICAge3Byb3ZpZGU6IENvbXBsZXhFeHByZXNzaW9uVmFsaWRhdG9yLCB1c2VDbGFzczogQ29tcGxleEV4cHJlc3Npb25WYWxpZGF0b3IsIGRlcHM6IFtdfSxcbiAgICAuLi5leHByZXNzaW9uR3VhcmRzXG5dO1xuIl19