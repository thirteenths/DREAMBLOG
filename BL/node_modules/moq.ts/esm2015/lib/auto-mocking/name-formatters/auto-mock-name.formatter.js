import { GetPropertyExpression, FunctionExpression, MethodExpression, NewOperatorExpression } from "../../reflector/expressions";
/**
 * @hidden
 */
export class AutoMockNameFormatter {
    constructor(namePrefixProvider, methodFormatter, propertyKeyFormatter, namedMethodFormatter, constantFormatter) {
        this.namePrefixProvider = namePrefixProvider;
        this.methodFormatter = methodFormatter;
        this.propertyKeyFormatter = propertyKeyFormatter;
        this.namedMethodFormatter = namedMethodFormatter;
        this.constantFormatter = constantFormatter;
    }
    format(name, expression) {
        const prefix = this.namePrefixProvider.get(name);
        if (expression instanceof FunctionExpression) {
            return `${prefix}${this.methodFormatter.format(expression)}`;
        }
        if (expression instanceof GetPropertyExpression) {
            return `${prefix}.${this.propertyKeyFormatter.format(expression.name)}`;
        }
        if (expression instanceof MethodExpression) {
            return `${prefix}.${this.namedMethodFormatter.format(expression)}`;
        }
        if (expression instanceof NewOperatorExpression) {
            return `new ${name}(${this.constantFormatter.format(expression.args)})`;
        }
        return `${name}[${expression}]`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1tb2NrLW5hbWUuZm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy9saWIvYXV0by1tb2NraW5nL25hbWUtZm9ybWF0dGVycy9hdXRvLW1vY2stbmFtZS5mb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUNILHFCQUFxQixFQUNyQixrQkFBa0IsRUFDbEIsZ0JBQWdCLEVBQ2hCLHFCQUFxQixFQUN4QixNQUFNLDZCQUE2QixDQUFDO0FBRXJDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUM5QixZQUNxQixrQkFBc0MsRUFDdEMsZUFBa0MsRUFDbEMsb0JBQTBDLEVBQzFDLG9CQUFxQyxFQUNyQyxpQkFBb0M7UUFKcEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFDbEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQWlCO1FBQ3JDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7SUFDekQsQ0FBQztJQUVNLE1BQU0sQ0FBSSxJQUF3QixFQUFFLFVBQTBCO1FBQ2pFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsSUFBSSxVQUFVLFlBQVksa0JBQWtCLEVBQUU7WUFDMUMsT0FBTyxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1NBQ2hFO1FBQ0QsSUFBSSxVQUFVLFlBQVkscUJBQXFCLEVBQUU7WUFDN0MsT0FBTyxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1NBQzNFO1FBQ0QsSUFBSSxVQUFVLFlBQVksZ0JBQWdCLEVBQUU7WUFDeEMsT0FBTyxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7U0FDdEU7UUFDRCxJQUFJLFVBQVUsWUFBWSxxQkFBcUIsRUFBRTtZQUM3QyxPQUFPLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDM0U7UUFFRCxPQUFPLEdBQUcsSUFBSSxJQUFJLFVBQVUsR0FBRyxDQUFDO0lBQ3BDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3Npb25zIH0gZnJvbSBcIi4uLy4uL3JlZmxlY3Rvci9leHByZXNzaW9uc1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25Gb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vZm9ybWF0dGVycy9mdW5jdGlvbi5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IFByb3BlcnR5S2V5Rm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL2Zvcm1hdHRlcnMvcHJvcGVydHkta2V5LmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgTWV0aG9kRm9ybWF0dGVyIH0gZnJvbSBcIi4uLy4uL2Zvcm1hdHRlcnMvbWV0aG9kLmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgQ29uc3RhbnRGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vLi4vZm9ybWF0dGVycy9jb25zdGFudC5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IE5hbWVQcmVmaXhQcm92aWRlciB9IGZyb20gXCIuL25hbWUtcHJlZml4LnByb3ZpZGVyXCI7XG5pbXBvcnQge1xuICAgIEdldFByb3BlcnR5RXhwcmVzc2lvbixcbiAgICBGdW5jdGlvbkV4cHJlc3Npb24sXG4gICAgTWV0aG9kRXhwcmVzc2lvbixcbiAgICBOZXdPcGVyYXRvckV4cHJlc3Npb25cbn0gZnJvbSBcIi4uLy4uL3JlZmxlY3Rvci9leHByZXNzaW9uc1wiO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIEF1dG9Nb2NrTmFtZUZvcm1hdHRlciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbmFtZVByZWZpeFByb3ZpZGVyOiBOYW1lUHJlZml4UHJvdmlkZXIsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbWV0aG9kRm9ybWF0dGVyOiBGdW5jdGlvbkZvcm1hdHRlcixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBwcm9wZXJ0eUtleUZvcm1hdHRlcjogUHJvcGVydHlLZXlGb3JtYXR0ZXIsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbmFtZWRNZXRob2RGb3JtYXR0ZXI6IE1ldGhvZEZvcm1hdHRlcixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjb25zdGFudEZvcm1hdHRlcjogQ29uc3RhbnRGb3JtYXR0ZXIpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgZm9ybWF0PFQ+KG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCwgZXhwcmVzc2lvbjogRXhwcmVzc2lvbnM8VD4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBwcmVmaXggPSB0aGlzLm5hbWVQcmVmaXhQcm92aWRlci5nZXQobmFtZSk7XG4gICAgICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgRnVuY3Rpb25FeHByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7cHJlZml4fSR7dGhpcy5tZXRob2RGb3JtYXR0ZXIuZm9ybWF0KGV4cHJlc3Npb24pfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBHZXRQcm9wZXJ0eUV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiBgJHtwcmVmaXh9LiR7dGhpcy5wcm9wZXJ0eUtleUZvcm1hdHRlci5mb3JtYXQoZXhwcmVzc2lvbi5uYW1lKX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgTWV0aG9kRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0uJHt0aGlzLm5hbWVkTWV0aG9kRm9ybWF0dGVyLmZvcm1hdChleHByZXNzaW9uKX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgTmV3T3BlcmF0b3JFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gYG5ldyAke25hbWV9KCR7dGhpcy5jb25zdGFudEZvcm1hdHRlci5mb3JtYXQoZXhwcmVzc2lvbi5hcmdzKX0pYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgJHtuYW1lfVske2V4cHJlc3Npb259XWA7XG4gICAgfVxufVxuIl19