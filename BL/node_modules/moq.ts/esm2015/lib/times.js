/**
 * Sets the rules where bounds of a range are included or excluded from the range.
 * See {@link Times.Between}
 */
export var Range;
(function (Range) {
    Range[Range["Exclusive"] = 0] = "Exclusive";
    Range[Range["Inclusive"] = 1] = "Inclusive";
})(Range || (Range = {}));
/**
 * This class expresses the expectation about amount of invocations.
 *
 * @example
 * ```typescript
 *
 * const times = new Times(expected => expected === 1, `Should be called once`);
 * const actual = times.test(2);
 *
 * expect(actual).toBe(false);
 * expect(times.message).toBe(`Should be called once`);
 * ```
 *
 * ```typescript
 *
 * const mockName = 'mock name';
 *const mock = new Mock<ITestObject>(mockName);
 *const object = mock.object();
 *
 *object.property;
 *
 *const action = () => mock.verify(instance => instance.property, Times.AtLeast(2));
 *
 *expect(action).toThrow();
 * ```
 */
export class Times {
    /**
     *
     * @param evaluator It takes actual value and decides if it is expected or not.
     * Returns true or false accordingly.
     * @param message A message that describes the expectation.
     */
    constructor(evaluator, message) {
        this.evaluator = evaluator;
        this.message = message;
    }
    /**
     * It expects that the actual would be equal or bigger then the expected value.
     *
     * @param callCount The expected value.
     */
    static AtLeast(callCount) {
        return new Times(expected => expected >= callCount, `Should be called at least ${callCount} time(s)`);
    }
    /**
     * It expects that the actual would be equal or bigger then 1.
     */
    static AtLeastOnce() {
        return Times._atLeastOnce;
    }
    /**
     * It expects that the actual would be equal or smaller then the expected value.
     *
     * @param callCount The expected value.
     */
    static AtMost(callCount) {
        return new Times(expected => expected <= callCount, `Should be called at most ${callCount} time(s)`);
    }
    /**
     * It expects that the actual would be equal or less then 1.
     */
    static AtMostOnce() {
        return Times._atMostOnce;
    }
    /**
     * It expects that the actual would be in the expected range of values.
     *
     * @param callCountFrom The lowest bound of the range.
     * @param callCountTo The highest bound of the range.
     * @param range  Sets the rules where bounds of a range are included or excluded from the range.
     */
    static Between(callCountFrom, callCountTo, range) {
        if (range === Range.Exclusive) {
            return new Times(expected => expected > callCountFrom && expected < callCountTo, `Should be called exclusively between ${callCountFrom} and ${callCountTo}`);
        }
        return new Times(expected => expected >= callCountFrom && expected <= callCountTo, `Should be called inclusively between ${callCountFrom} and ${callCountTo}`);
    }
    /**
     * It expects that the actual is equal to the expected value.
     *
     * @param callCount The expected value.
     */
    static Exactly(callCount) {
        return new Times(expected => expected === callCount, `Should be called exactly ${callCount} time(s)`);
    }
    /**
     * It expects that the actual is equal 0.
     */
    static Never() {
        return Times._never;
    }
    /**
     * It expects that the actual is equal 1.
     */
    static Once() {
        return Times._once;
    }
    /**
     * Evaluates the expectation against the actual value.
     *
     * @param callCount The actual value.
     */
    test(callCount) {
        return this.evaluator(callCount);
    }
}
Times._once = new Times(expected => expected === 1, "Should be called once");
Times._never = new Times(expected => expected === 0, "Should be called never");
Times._atMostOnce = new Times(expected => expected <= 1, "Should be called at most once");
Times._atLeastOnce = new Times(expected => expected >= 1, "Should be called at least once");
//# sourceMappingURL=data:application/json;base64,