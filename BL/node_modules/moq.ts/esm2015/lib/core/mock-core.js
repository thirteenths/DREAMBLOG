/**
 * The internal core of {@link Mock} class.
 */
export class MockCore {
    constructor(options, tracker, injector, reflector, interceptor, verifier, prototypeStorage, mock, setupFactory) {
        this.options = options;
        this.tracker = tracker;
        this.injector = injector;
        this.reflector = reflector;
        this.interceptor = interceptor;
        this.verifier = verifier;
        this.prototypeStorage = prototypeStorage;
        this.mock = mock;
        this.setupFactory = setupFactory;
    }
    get name() {
        return this.options.name;
    }
    resolve(token) {
        return this.injector.get(token, null);
    }
    setup(expression) {
        const expressions = this.reflector.reflect(expression);
        return this.setupFactory.create(expressions);
    }
    verify(expression, times) {
        const expressions = this.reflector.reflect(expression);
        this.verifier.test(expressions, times);
        return this.mock;
    }
    object() {
        return this.interceptor.object();
    }
    prototypeof(prototype) {
        this.prototypeStorage.set(prototype);
        return this.mock;
    }
    /**
     * @experimental
     */
    insequence(sequence, expression) {
        sequence.add(this, expression);
        return this.mock;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1jb3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy9saWIvY29yZS9tb2NrLWNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JBOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFFBQVE7SUFDakIsWUFDb0IsT0FBa0QsRUFDbEQsT0FBZ0IsRUFDZixRQUFrQixFQUNsQixTQUE0RCxFQUM1RCxXQUE0QixFQUM1QixRQUFxQixFQUNyQixnQkFBa0MsRUFDbEMsSUFBdUMsRUFDdkMsWUFBNkI7UUFSOUIsWUFBTyxHQUFQLE9BQU8sQ0FBMkM7UUFDbEQsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNmLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsY0FBUyxHQUFULFNBQVMsQ0FBbUQ7UUFDNUQsZ0JBQVcsR0FBWCxXQUFXLENBQWlCO1FBQzVCLGFBQVEsR0FBUixRQUFRLENBQWE7UUFDckIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxTQUFJLEdBQUosSUFBSSxDQUFtQztRQUN2QyxpQkFBWSxHQUFaLFlBQVksQ0FBaUI7SUFFbEQsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUVNLE9BQU8sQ0FBbUUsS0FBa0M7UUFDL0csT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFpQixDQUFDO0lBQzFELENBQUM7SUFFTSxLQUFLLENBQzZDLFVBQWE7UUFDbEUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBSSxXQUFXLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRU0sTUFBTSxDQUFDLFVBQTBCLEVBQUUsS0FBWTtRQUNsRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsSUFBZ0IsQ0FBQztJQUNqQyxDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRU0sV0FBVyxDQUFDLFNBQWU7UUFDOUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQyxJQUFnQixDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNJLFVBQVUsQ0FBQyxRQUEyQixFQUFFLFVBQTBCO1FBQ3JFLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQy9CLE9BQU8sSUFBSSxDQUFDLElBQWdCLENBQUM7SUFDakMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJveHlGYWN0b3J5IH0gZnJvbSBcIi4uL2ludGVyY2VwdG9ycy9wcm94eS5mYWN0b3J5XCI7XG5pbXBvcnQgeyBJTW9jaywgSVByZXNldEJ1aWxkZXIsIElTZXF1ZW5jZVZlcmlmaWVyIH0gZnJvbSBcIi4uL21vcVwiO1xuaW1wb3J0IHsgVGltZXMgfSBmcm9tIFwiLi4vdGltZXNcIjtcbmltcG9ydCB7IFRyYWNrZXIgfSBmcm9tIFwiLi4vdHJhY2tlci90cmFja2VyXCI7XG5pbXBvcnQgeyBWZXJpZmllciB9IGZyb20gXCIuLi92ZXJpZmljYXRpb24vdmVyaWZpZXJcIjtcbmltcG9ydCB7IFByb3RvdHlwZVN0b3JhZ2UgfSBmcm9tIFwiLi4vaW50ZXJjZXB0b3JzL3Byb3RvdHlwZS5zdG9yYWdlXCI7XG5pbXBvcnQgeyBNT0NLX09QVElPTlMgfSBmcm9tIFwiLi4vbW9jay1vcHRpb25zL21vY2stb3B0aW9ucy5pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCB7IFR5cGVvZkluamVjdGlvblRva2VuIH0gZnJvbSBcIi4uL2luamVjdG9yL3R5cGVvZi1pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCB7IE1vY2sgfSBmcm9tIFwiLi4vbW9ja1wiO1xuaW1wb3J0IHsgTU9DSyB9IGZyb20gXCIuLi9pbmplY3Rvci9tb2NrLmluamVjdGlvbi10b2tlblwiO1xuaW1wb3J0IHsgU2V0dXBGYWN0b3J5IH0gZnJvbSBcIi4uL3ByZXNldHMvc2V0dXAuZmFjdG9yeVwiO1xuaW1wb3J0IHsgSW5qZWN0aW9uRmFjdG9yeSB9IGZyb20gXCIuLi9pbmplY3Rvci9pbmplY3Rpb24tZmFjdG9yeVwiO1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tIFwiLi4vc3RhdGljLmluamVjdG9yL2luamVjdGlvbl90b2tlblwiO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gXCIuLi9zdGF0aWMuaW5qZWN0b3IvdHlwZVwiO1xuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tIFwiLi4vc3RhdGljLmluamVjdG9yL2luamVjdG9yXCI7XG5pbXBvcnQgeyBFWFBSRVNTSU9OX1JFRkxFQ1RPUiwgSUV4cHJlc3Npb24gfSBmcm9tIFwiLi4vcmVmbGVjdG9yL2V4cHJlc3Npb24tcmVmbGVjdG9yXCI7XG5cblxuLyoqXG4gKiBUaGUgaW50ZXJuYWwgY29yZSBvZiB7QGxpbmsgTW9ja30gY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2NrQ29yZTxUPiBpbXBsZW1lbnRzIElNb2NrPFQ+IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IG9wdGlvbnM6IFR5cGVvZkluamVjdGlvblRva2VuPHR5cGVvZiBNT0NLX09QVElPTlM+LFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgdHJhY2tlcjogVHJhY2tlcixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcmVmbGVjdG9yOiBUeXBlb2ZJbmplY3Rpb25Ub2tlbjx0eXBlb2YgRVhQUkVTU0lPTl9SRUZMRUNUT1I+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGludGVyY2VwdG9yOiBQcm94eUZhY3Rvcnk8VD4sXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdmVyaWZpZXI6IFZlcmlmaWVyPFQ+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHByb3RvdHlwZVN0b3JhZ2U6IFByb3RvdHlwZVN0b3JhZ2UsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbW9jazogVHlwZW9mSW5qZWN0aW9uVG9rZW48dHlwZW9mIE1PQ0s+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHNldHVwRmFjdG9yeTogU2V0dXBGYWN0b3J5PFQ+KSB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubmFtZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzb2x2ZTxTLCBSID0gUyBleHRlbmRzIEluamVjdGlvbkZhY3RvcnkgPyBSZXR1cm5UeXBlPFNbXCJmYWN0b3J5XCJdPiA6IFM+KHRva2VuOiBUeXBlPFM+IHwgSW5qZWN0aW9uVG9rZW48Uz4pOiBSIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5qZWN0b3IuZ2V0KHRva2VuLCBudWxsKSBhcyB1bmtub3duIGFzIFI7XG4gICAgfVxuXG4gICAgcHVibGljIHNldHVwPEUgZXh0ZW5kcyBJRXhwcmVzc2lvbjxUPixcbiAgICAgICAgUiA9IEUgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGluZmVyIE0gPyBNIDogYW55PihleHByZXNzaW9uOiBFKTogSVByZXNldEJ1aWxkZXI8VCwgUj4ge1xuICAgICAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMucmVmbGVjdG9yLnJlZmxlY3QoZXhwcmVzc2lvbik7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHVwRmFjdG9yeS5jcmVhdGU8Uj4oZXhwcmVzc2lvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyB2ZXJpZnkoZXhwcmVzc2lvbjogSUV4cHJlc3Npb248VD4sIHRpbWVzOiBUaW1lcyk6IElNb2NrPFQ+IHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbnMgPSB0aGlzLnJlZmxlY3Rvci5yZWZsZWN0KGV4cHJlc3Npb24pO1xuICAgICAgICB0aGlzLnZlcmlmaWVyLnRlc3QoZXhwcmVzc2lvbnMsIHRpbWVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9jayBhcyBJTW9jazxUPjtcbiAgICB9XG5cbiAgICBwdWJsaWMgb2JqZWN0KCk6IFQge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcmNlcHRvci5vYmplY3QoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcHJvdG90eXBlb2YocHJvdG90eXBlPzogYW55KTogSU1vY2s8VD4ge1xuICAgICAgICB0aGlzLnByb3RvdHlwZVN0b3JhZ2Uuc2V0KHByb3RvdHlwZSk7XG4gICAgICAgIHJldHVybiB0aGlzLm1vY2sgYXMgSU1vY2s8VD47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGV4cGVyaW1lbnRhbFxuICAgICAqL1xuICAgIHB1YmxpYyBpbnNlcXVlbmNlKHNlcXVlbmNlOiBJU2VxdWVuY2VWZXJpZmllciwgZXhwcmVzc2lvbjogSUV4cHJlc3Npb248VD4pOiBJTW9jazxUPiB7XG4gICAgICAgIHNlcXVlbmNlLmFkZCh0aGlzLCBleHByZXNzaW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9jayBhcyBJTW9jazxUPjtcbiAgICB9XG59XG4iXX0=