import { PlayableExactly } from "./playable-exactly";
import { PlayableNever } from "./playable-never";
import { PlayableOnce } from "./playable-once";
import { PlayableAlways } from "./playable-always";
import { PlayableSequence } from "./playable-sequence";
/**
 * This class sets rules when a configured setup should be applied to the target invocation or not.
 *
 * @example
 * ```typescript
 *
 * const value = 'value';
 * const object = new Mock<Function>()
 * .setup(instance => instance(1))
 * .play(PlayTimes.Once())
 * .returns(value)
 * .object();
 *
 * expect(object(1).toBe(value);
 * expect(object(1).toBe(undefined);
 * ```
 */
export class PlayTimes {
    /**
     * The configured setup will be applied to invocations exactly n-times. After that it will be ignored.
     */
    static Exactly(count) {
        return new PlayableExactly(count);
    }
    /**
     * The configured setup will be always applied to invocations.
     */
    static Always() {
        return PlayTimes.always;
    }
    /**
     * The configured setup will be never applied to invocations.
     */
    static Never() {
        return PlayTimes.never;
    }
    /**
     * The configured setup will be applied only to the first invocation.
     */
    static Once() {
        return new PlayableOnce();
    }
    /**
     * The configured setup will be applied or not accordingly to the value in the sequence.
     *
     * @example
     * ```typescript
     *
     * const value = 'value';
     * const object = new Mock<Function>()
     * .setup(instance => instance(1))
     * .play(PlayTimes.Sequence([false, true]))
     * .returns(value)
     * .object();
     *
     * expect(object(1).toBe(undefined);
     * expect(object(1).toBe(value);
     * expect(object(1).toBe(undefined);
     * ```
     */
    static Sequence(sequence) {
        return new PlayableSequence(sequence);
    }
}
PlayTimes.always = new PlayableAlways();
PlayTimes.never = new PlayableNever();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheS10aW1lcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21vcS9zcmMvbGliL3BsYXlhYmxlcy9wbGF5LXRpbWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd2RDs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNILE1BQU0sT0FBTyxTQUFTO0lBSWxCOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFhO1FBQy9CLE9BQU8sSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU07UUFDaEIsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxLQUFLO1FBQ2YsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQzNCLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxJQUFJO1FBQ2QsT0FBTyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkc7SUFDSSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQW1CO1FBQ3RDLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxQyxDQUFDOztBQW5EdUIsZ0JBQU0sR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0FBQzlCLGVBQUssR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVBsYXlhYmxlIH0gZnJvbSBcIi4uL21vcVwiO1xuaW1wb3J0IHsgUGxheWFibGVFeGFjdGx5IH0gZnJvbSBcIi4vcGxheWFibGUtZXhhY3RseVwiO1xuaW1wb3J0IHsgUGxheWFibGVOZXZlciB9IGZyb20gXCIuL3BsYXlhYmxlLW5ldmVyXCI7XG5pbXBvcnQgeyBQbGF5YWJsZU9uY2UgfSBmcm9tIFwiLi9wbGF5YWJsZS1vbmNlXCI7XG5pbXBvcnQgeyBQbGF5YWJsZUFsd2F5cyB9IGZyb20gXCIuL3BsYXlhYmxlLWFsd2F5c1wiO1xuaW1wb3J0IHsgUGxheWFibGVTZXF1ZW5jZSB9IGZyb20gXCIuL3BsYXlhYmxlLXNlcXVlbmNlXCI7XG5cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHNldHMgcnVsZXMgd2hlbiBhIGNvbmZpZ3VyZWQgc2V0dXAgc2hvdWxkIGJlIGFwcGxpZWQgdG8gdGhlIHRhcmdldCBpbnZvY2F0aW9uIG9yIG5vdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICpcbiAqIGNvbnN0IHZhbHVlID0gJ3ZhbHVlJztcbiAqIGNvbnN0IG9iamVjdCA9IG5ldyBNb2NrPEZ1bmN0aW9uPigpXG4gKiAuc2V0dXAoaW5zdGFuY2UgPT4gaW5zdGFuY2UoMSkpXG4gKiAucGxheShQbGF5VGltZXMuT25jZSgpKVxuICogLnJldHVybnModmFsdWUpXG4gKiAub2JqZWN0KCk7XG4gKlxuICogZXhwZWN0KG9iamVjdCgxKS50b0JlKHZhbHVlKTtcbiAqIGV4cGVjdChvYmplY3QoMSkudG9CZSh1bmRlZmluZWQpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF5VGltZXMge1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGFsd2F5cyA9IG5ldyBQbGF5YWJsZUFsd2F5cygpO1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IG5ldmVyID0gbmV3IFBsYXlhYmxlTmV2ZXIoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb25maWd1cmVkIHNldHVwIHdpbGwgYmUgYXBwbGllZCB0byBpbnZvY2F0aW9ucyBleGFjdGx5IG4tdGltZXMuIEFmdGVyIHRoYXQgaXQgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgRXhhY3RseShjb3VudDogbnVtYmVyKTogSVBsYXlhYmxlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQbGF5YWJsZUV4YWN0bHkoY291bnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBjb25maWd1cmVkIHNldHVwIHdpbGwgYmUgYWx3YXlzIGFwcGxpZWQgdG8gaW52b2NhdGlvbnMuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBBbHdheXMoKTogSVBsYXlhYmxlIHtcbiAgICAgICAgcmV0dXJuIFBsYXlUaW1lcy5hbHdheXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbmZpZ3VyZWQgc2V0dXAgd2lsbCBiZSBuZXZlciBhcHBsaWVkIHRvIGludm9jYXRpb25zLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgTmV2ZXIoKTogSVBsYXlhYmxlIHtcbiAgICAgICAgcmV0dXJuIFBsYXlUaW1lcy5uZXZlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJlZCBzZXR1cCB3aWxsIGJlIGFwcGxpZWQgb25seSB0byB0aGUgZmlyc3QgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIE9uY2UoKTogSVBsYXlhYmxlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQbGF5YWJsZU9uY2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJlZCBzZXR1cCB3aWxsIGJlIGFwcGxpZWQgb3Igbm90IGFjY29yZGluZ2x5IHRvIHRoZSB2YWx1ZSBpbiB0aGUgc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKlxuICAgICAqIGNvbnN0IHZhbHVlID0gJ3ZhbHVlJztcbiAgICAgKiBjb25zdCBvYmplY3QgPSBuZXcgTW9jazxGdW5jdGlvbj4oKVxuICAgICAqIC5zZXR1cChpbnN0YW5jZSA9PiBpbnN0YW5jZSgxKSlcbiAgICAgKiAucGxheShQbGF5VGltZXMuU2VxdWVuY2UoW2ZhbHNlLCB0cnVlXSkpXG4gICAgICogLnJldHVybnModmFsdWUpXG4gICAgICogLm9iamVjdCgpO1xuICAgICAqXG4gICAgICogZXhwZWN0KG9iamVjdCgxKS50b0JlKHVuZGVmaW5lZCk7XG4gICAgICogZXhwZWN0KG9iamVjdCgxKS50b0JlKHZhbHVlKTtcbiAgICAgKiBleHBlY3Qob2JqZWN0KDEpLnRvQmUodW5kZWZpbmVkKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIFNlcXVlbmNlKHNlcXVlbmNlOiBib29sZWFuW10pOiBJUGxheWFibGUge1xuICAgICAgICByZXR1cm4gbmV3IFBsYXlhYmxlU2VxdWVuY2Uoc2VxdWVuY2UpO1xuICAgIH1cbn1cbiJdfQ==