import { Presets } from "./presets";
import { PresetBuilderFactory } from "./preset-builder.factory";
import { SetupFactory } from "./setup.factory";
import { RootMockProvider } from "../auto-mocking/root-mock.provider";
import { AutoMockProvider } from "../auto-mocking/auto-mock.provider";
import { CallbackPresetFactory } from "./factories/callback-preset.factory";
import { MimicsPresetFactory } from "./factories/mimics-preset.factory";
import { ReturnsAsyncPresetFactory } from "./factories/returns-async-preset.factory";
import { ReturnsPresetFactory } from "./factories/returns-preset.factory";
import { ThrowsAsyncPresetFactory } from "./factories/throws-async-preset.factory";
import { ThrowsPresetFactory } from "./factories/throws-preset.factory";
import { ResolvedPromiseFactory } from "./resolved-promise.factory";
import { RejectedPromiseFactory } from "./rejected-promise.factory";
import { ComplexExpressionGuard } from "../auto-mocking/expression.guards/complex-expression.guard";
/**
 * @hidden
 */
export default [
    {
        provide: SetupFactory,
        useClass: SetupFactory,
        deps: [PresetBuilderFactory, AutoMockProvider, ComplexExpressionGuard]
    },
    { provide: Presets, useClass: Presets, deps: [] },
    { provide: ResolvedPromiseFactory, useClass: ResolvedPromiseFactory, deps: [] },
    { provide: RejectedPromiseFactory, useClass: RejectedPromiseFactory, deps: [] },
    { provide: ReturnsPresetFactory, useClass: ReturnsPresetFactory, deps: [RootMockProvider, Presets] },
    { provide: ThrowsPresetFactory, useClass: ThrowsPresetFactory, deps: [RootMockProvider, Presets] },
    { provide: CallbackPresetFactory, useClass: CallbackPresetFactory, deps: [RootMockProvider, Presets] },
    { provide: MimicsPresetFactory, useClass: MimicsPresetFactory, deps: [RootMockProvider, Presets] },
    {
        provide: ReturnsAsyncPresetFactory,
        useClass: ReturnsAsyncPresetFactory,
        deps: [RootMockProvider, Presets, ResolvedPromiseFactory]
    },
    {
        provide: ThrowsAsyncPresetFactory,
        useClass: ThrowsAsyncPresetFactory,
        deps: [RootMockProvider, Presets, RejectedPromiseFactory]
    },
    {
        provide: PresetBuilderFactory, useClass: PresetBuilderFactory, deps: [
            ReturnsPresetFactory,
            ThrowsPresetFactory,
            MimicsPresetFactory,
            CallbackPresetFactory,
            ReturnsAsyncPresetFactory,
            ThrowsAsyncPresetFactory
        ]
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9wcmVzZXRzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBRXBHOztHQUVHO0FBQ0gsZUFBZTtJQUNYO1FBQ0ksT0FBTyxFQUFFLFlBQVk7UUFDckIsUUFBUSxFQUFFLFlBQVk7UUFDdEIsSUFBSSxFQUFFLENBQUMsb0JBQW9CLEVBQUUsZ0JBQWdCLEVBQUUsc0JBQXNCLENBQUM7S0FDekU7SUFDRCxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQy9DLEVBQUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQzdFLEVBQUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQzdFLEVBQUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsRUFBQztJQUNsRyxFQUFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLEVBQUM7SUFDaEcsRUFBQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxFQUFDO0lBQ3BHLEVBQUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsRUFBQztJQUNoRztRQUNJLE9BQU8sRUFBRSx5QkFBeUI7UUFDbEMsUUFBUSxFQUFFLHlCQUF5QjtRQUNuQyxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLENBQUM7S0FDNUQ7SUFDRDtRQUNJLE9BQU8sRUFBRSx3QkFBd0I7UUFDakMsUUFBUSxFQUFFLHdCQUF3QjtRQUNsQyxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLENBQUM7S0FDNUQ7SUFDRDtRQUNJLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxFQUFFO1lBQ2pFLG9CQUFvQjtZQUNwQixtQkFBbUI7WUFDbkIsbUJBQW1CO1lBQ25CLHFCQUFxQjtZQUNyQix5QkFBeUI7WUFDekIsd0JBQXdCO1NBQzNCO0tBQ0o7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJlc2V0cyB9IGZyb20gXCIuL3ByZXNldHNcIjtcbmltcG9ydCB7IFByZXNldEJ1aWxkZXJGYWN0b3J5IH0gZnJvbSBcIi4vcHJlc2V0LWJ1aWxkZXIuZmFjdG9yeVwiO1xuaW1wb3J0IHsgU2V0dXBGYWN0b3J5IH0gZnJvbSBcIi4vc2V0dXAuZmFjdG9yeVwiO1xuaW1wb3J0IHsgUm9vdE1vY2tQcm92aWRlciB9IGZyb20gXCIuLi9hdXRvLW1vY2tpbmcvcm9vdC1tb2NrLnByb3ZpZGVyXCI7XG5pbXBvcnQgeyBBdXRvTW9ja1Byb3ZpZGVyIH0gZnJvbSBcIi4uL2F1dG8tbW9ja2luZy9hdXRvLW1vY2sucHJvdmlkZXJcIjtcbmltcG9ydCB7IENhbGxiYWNrUHJlc2V0RmFjdG9yeSB9IGZyb20gXCIuL2ZhY3Rvcmllcy9jYWxsYmFjay1wcmVzZXQuZmFjdG9yeVwiO1xuaW1wb3J0IHsgTWltaWNzUHJlc2V0RmFjdG9yeSB9IGZyb20gXCIuL2ZhY3Rvcmllcy9taW1pY3MtcHJlc2V0LmZhY3RvcnlcIjtcbmltcG9ydCB7IFJldHVybnNBc3luY1ByZXNldEZhY3RvcnkgfSBmcm9tIFwiLi9mYWN0b3JpZXMvcmV0dXJucy1hc3luYy1wcmVzZXQuZmFjdG9yeVwiO1xuaW1wb3J0IHsgUmV0dXJuc1ByZXNldEZhY3RvcnkgfSBmcm9tIFwiLi9mYWN0b3JpZXMvcmV0dXJucy1wcmVzZXQuZmFjdG9yeVwiO1xuaW1wb3J0IHsgVGhyb3dzQXN5bmNQcmVzZXRGYWN0b3J5IH0gZnJvbSBcIi4vZmFjdG9yaWVzL3Rocm93cy1hc3luYy1wcmVzZXQuZmFjdG9yeVwiO1xuaW1wb3J0IHsgVGhyb3dzUHJlc2V0RmFjdG9yeSB9IGZyb20gXCIuL2ZhY3Rvcmllcy90aHJvd3MtcHJlc2V0LmZhY3RvcnlcIjtcbmltcG9ydCB7IFJlc29sdmVkUHJvbWlzZUZhY3RvcnkgfSBmcm9tIFwiLi9yZXNvbHZlZC1wcm9taXNlLmZhY3RvcnlcIjtcbmltcG9ydCB7IFJlamVjdGVkUHJvbWlzZUZhY3RvcnkgfSBmcm9tIFwiLi9yZWplY3RlZC1wcm9taXNlLmZhY3RvcnlcIjtcbmltcG9ydCB7IENvbXBsZXhFeHByZXNzaW9uR3VhcmQgfSBmcm9tIFwiLi4vYXV0by1tb2NraW5nL2V4cHJlc3Npb24uZ3VhcmRzL2NvbXBsZXgtZXhwcmVzc2lvbi5ndWFyZFwiO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgW1xuICAgIHtcbiAgICAgICAgcHJvdmlkZTogU2V0dXBGYWN0b3J5LFxuICAgICAgICB1c2VDbGFzczogU2V0dXBGYWN0b3J5LFxuICAgICAgICBkZXBzOiBbUHJlc2V0QnVpbGRlckZhY3RvcnksIEF1dG9Nb2NrUHJvdmlkZXIsIENvbXBsZXhFeHByZXNzaW9uR3VhcmRdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogUHJlc2V0cywgdXNlQ2xhc3M6IFByZXNldHMsIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogUmVzb2x2ZWRQcm9taXNlRmFjdG9yeSwgdXNlQ2xhc3M6IFJlc29sdmVkUHJvbWlzZUZhY3RvcnksIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogUmVqZWN0ZWRQcm9taXNlRmFjdG9yeSwgdXNlQ2xhc3M6IFJlamVjdGVkUHJvbWlzZUZhY3RvcnksIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogUmV0dXJuc1ByZXNldEZhY3RvcnksIHVzZUNsYXNzOiBSZXR1cm5zUHJlc2V0RmFjdG9yeSwgZGVwczogW1Jvb3RNb2NrUHJvdmlkZXIsIFByZXNldHNdfSxcbiAgICB7cHJvdmlkZTogVGhyb3dzUHJlc2V0RmFjdG9yeSwgdXNlQ2xhc3M6IFRocm93c1ByZXNldEZhY3RvcnksIGRlcHM6IFtSb290TW9ja1Byb3ZpZGVyLCBQcmVzZXRzXX0sXG4gICAge3Byb3ZpZGU6IENhbGxiYWNrUHJlc2V0RmFjdG9yeSwgdXNlQ2xhc3M6IENhbGxiYWNrUHJlc2V0RmFjdG9yeSwgZGVwczogW1Jvb3RNb2NrUHJvdmlkZXIsIFByZXNldHNdfSxcbiAgICB7cHJvdmlkZTogTWltaWNzUHJlc2V0RmFjdG9yeSwgdXNlQ2xhc3M6IE1pbWljc1ByZXNldEZhY3RvcnksIGRlcHM6IFtSb290TW9ja1Byb3ZpZGVyLCBQcmVzZXRzXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBSZXR1cm5zQXN5bmNQcmVzZXRGYWN0b3J5LFxuICAgICAgICB1c2VDbGFzczogUmV0dXJuc0FzeW5jUHJlc2V0RmFjdG9yeSxcbiAgICAgICAgZGVwczogW1Jvb3RNb2NrUHJvdmlkZXIsIFByZXNldHMsIFJlc29sdmVkUHJvbWlzZUZhY3RvcnldXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRocm93c0FzeW5jUHJlc2V0RmFjdG9yeSxcbiAgICAgICAgdXNlQ2xhc3M6IFRocm93c0FzeW5jUHJlc2V0RmFjdG9yeSxcbiAgICAgICAgZGVwczogW1Jvb3RNb2NrUHJvdmlkZXIsIFByZXNldHMsIFJlamVjdGVkUHJvbWlzZUZhY3RvcnldXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFByZXNldEJ1aWxkZXJGYWN0b3J5LCB1c2VDbGFzczogUHJlc2V0QnVpbGRlckZhY3RvcnksIGRlcHM6IFtcbiAgICAgICAgICAgIFJldHVybnNQcmVzZXRGYWN0b3J5LFxuICAgICAgICAgICAgVGhyb3dzUHJlc2V0RmFjdG9yeSxcbiAgICAgICAgICAgIE1pbWljc1ByZXNldEZhY3RvcnksXG4gICAgICAgICAgICBDYWxsYmFja1ByZXNldEZhY3RvcnksXG4gICAgICAgICAgICBSZXR1cm5zQXN5bmNQcmVzZXRGYWN0b3J5LFxuICAgICAgICAgICAgVGhyb3dzQXN5bmNQcmVzZXRGYWN0b3J5XG4gICAgICAgIF1cbiAgICB9LFxuXTtcbiJdfQ==