import { PlayTimes } from "../playables/play-times";
/**
 * The default implementation of {@link IPresetBuilder} interface.
 * Is it not intended to be used outside of the moq library.
 *
 * @hidden
 */
export class PresetBuilder {
    constructor(returnsPresetFactory, throwsPresetFactory, mimicsPresetFactory, callbackPresetFactory, returnsAsyncPresetFactory, throwsAsyncPresetFactory, target, playable = PlayTimes.Always()) {
        this.returnsPresetFactory = returnsPresetFactory;
        this.throwsPresetFactory = throwsPresetFactory;
        this.mimicsPresetFactory = mimicsPresetFactory;
        this.callbackPresetFactory = callbackPresetFactory;
        this.returnsAsyncPresetFactory = returnsAsyncPresetFactory;
        this.throwsAsyncPresetFactory = throwsAsyncPresetFactory;
        this.target = target;
        this.playable = playable;
    }
    returnsAsync(value) {
        return this.returnsAsyncPresetFactory(this.target, this.playable, value);
    }
    throwsAsync(exception) {
        return this.throwsAsyncPresetFactory(this.target, this.playable, exception);
    }
    mimics(origin) {
        return this.mimicsPresetFactory(this.target, this.playable, origin);
    }
    returns(value) {
        return this.returnsPresetFactory(this.target, this.playable, value);
    }
    throws(exception) {
        return this.throwsPresetFactory(this.target, this.playable, exception);
    }
    callback(callback) {
        return this.callbackPresetFactory(this.target, this.playable, callback);
    }
    play(playable) {
        this.playable = playable;
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9wcmVzZXRzL3ByZXNldC1idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQVNwRDs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyxhQUFhO0lBRXRCLFlBQ3FCLG9CQUE2RSxFQUM3RSxtQkFBMkUsRUFDM0UsbUJBQTJFLEVBQzNFLHFCQUErRSxFQUMvRSx5QkFBdUYsRUFDdkYsd0JBQXFGLEVBQ3JGLE1BQXNCLEVBQy9CLFdBQXNCLFNBQVMsQ0FBQyxNQUFNLEVBQUU7UUFQL0IseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF5RDtRQUM3RSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXdEO1FBQzNFLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBd0Q7UUFDM0UsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUEwRDtRQUMvRSw4QkFBeUIsR0FBekIseUJBQXlCLENBQThEO1FBQ3ZGLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBNkQ7UUFDckYsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFDL0IsYUFBUSxHQUFSLFFBQVEsQ0FBZ0M7SUFFcEQsQ0FBQztJQUVNLFlBQVksQ0FBQyxLQUEyQjtRQUMzQyxPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVNLFdBQVcsQ0FBYSxTQUFxQjtRQUNoRCxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEYsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFTO1FBQ25CLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRU0sT0FBTyxDQUFDLEtBQWE7UUFDeEIsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFTSxNQUFNLENBQWEsU0FBcUI7UUFDM0MsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFTSxRQUFRLENBQUMsUUFBNkM7UUFDekQsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFTSxJQUFJLENBQUMsUUFBbUI7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSU1vY2ssIElQbGF5YWJsZSwgSVByZXNldEJ1aWxkZXIsIFByb21pc2VkVHlwZSB9IGZyb20gXCIuLi9tb3FcIjtcbmltcG9ydCB7IEV4cHJlc3Npb25zIH0gZnJvbSBcIi4uL3JlZmxlY3Rvci9leHByZXNzaW9uc1wiO1xuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gXCIuLi9yZWZsZWN0b3IvZXhwcmVzc2lvbnNcIjtcbmltcG9ydCB7IFBsYXlUaW1lcyB9IGZyb20gXCIuLi9wbGF5YWJsZXMvcGxheS10aW1lc1wiO1xuaW1wb3J0IHsgVHlwZU9mSW5qZWN0aW9uRmFjdG9yeSB9IGZyb20gXCIuLi9pbmplY3Rvci9pbmplY3Rpb24tZmFjdG9yeVwiO1xuaW1wb3J0IHsgUmV0dXJuc1ByZXNldEZhY3RvcnkgfSBmcm9tIFwiLi9mYWN0b3JpZXMvcmV0dXJucy1wcmVzZXQuZmFjdG9yeVwiO1xuaW1wb3J0IHsgTWltaWNzUHJlc2V0RmFjdG9yeSB9IGZyb20gXCIuL2ZhY3Rvcmllcy9taW1pY3MtcHJlc2V0LmZhY3RvcnlcIjtcbmltcG9ydCB7IENhbGxiYWNrUHJlc2V0RmFjdG9yeSB9IGZyb20gXCIuL2ZhY3Rvcmllcy9jYWxsYmFjay1wcmVzZXQuZmFjdG9yeVwiO1xuaW1wb3J0IHsgVGhyb3dzUHJlc2V0RmFjdG9yeSB9IGZyb20gXCIuL2ZhY3Rvcmllcy90aHJvd3MtcHJlc2V0LmZhY3RvcnlcIjtcbmltcG9ydCB7IFJldHVybnNBc3luY1ByZXNldEZhY3RvcnkgfSBmcm9tIFwiLi9mYWN0b3JpZXMvcmV0dXJucy1hc3luYy1wcmVzZXQuZmFjdG9yeVwiO1xuaW1wb3J0IHsgVGhyb3dzQXN5bmNQcmVzZXRGYWN0b3J5IH0gZnJvbSBcIi4vZmFjdG9yaWVzL3Rocm93cy1hc3luYy1wcmVzZXQuZmFjdG9yeVwiO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBJUHJlc2V0QnVpbGRlcn0gaW50ZXJmYWNlLlxuICogSXMgaXQgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgb3V0c2lkZSBvZiB0aGUgbW9xIGxpYnJhcnkuXG4gKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgUHJlc2V0QnVpbGRlcjxULCBUVmFsdWUgPSBhbnk+IGltcGxlbWVudHMgSVByZXNldEJ1aWxkZXI8VD4ge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcmV0dXJuc1ByZXNldEZhY3Rvcnk6IFR5cGVPZkluamVjdGlvbkZhY3Rvcnk8UmV0dXJuc1ByZXNldEZhY3Rvcnk8VCwgVFZhbHVlPj4sXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdGhyb3dzUHJlc2V0RmFjdG9yeTogVHlwZU9mSW5qZWN0aW9uRmFjdG9yeTxUaHJvd3NQcmVzZXRGYWN0b3J5PFQsIFRWYWx1ZT4+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG1pbWljc1ByZXNldEZhY3Rvcnk6IFR5cGVPZkluamVjdGlvbkZhY3Rvcnk8TWltaWNzUHJlc2V0RmFjdG9yeTxULCBUVmFsdWU+PixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjYWxsYmFja1ByZXNldEZhY3Rvcnk6IFR5cGVPZkluamVjdGlvbkZhY3Rvcnk8Q2FsbGJhY2tQcmVzZXRGYWN0b3J5PFQsIFRWYWx1ZT4+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHJldHVybnNBc3luY1ByZXNldEZhY3Rvcnk6IFR5cGVPZkluamVjdGlvbkZhY3Rvcnk8UmV0dXJuc0FzeW5jUHJlc2V0RmFjdG9yeTxULCBUVmFsdWU+PixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSB0aHJvd3NBc3luY1ByZXNldEZhY3Rvcnk6IFR5cGVPZkluamVjdGlvbkZhY3Rvcnk8VGhyb3dzQXN5bmNQcmVzZXRGYWN0b3J5PFQsIFRWYWx1ZT4+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHRhcmdldDogRXhwcmVzc2lvbnM8VD4sXG4gICAgICAgIHByaXZhdGUgcGxheWFibGU6IElQbGF5YWJsZSA9IFBsYXlUaW1lcy5BbHdheXMoKSkge1xuXG4gICAgfVxuXG4gICAgcHVibGljIHJldHVybnNBc3luYyh2YWx1ZTogUHJvbWlzZWRUeXBlPFRWYWx1ZT4pOiBJTW9jazxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldHVybnNBc3luY1ByZXNldEZhY3RvcnkodGhpcy50YXJnZXQsIHRoaXMucGxheWFibGUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdGhyb3dzQXN5bmM8VEV4Y2VwdGlvbj4oZXhjZXB0aW9uOiBURXhjZXB0aW9uKTogSU1vY2s8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJvd3NBc3luY1ByZXNldEZhY3RvcnkodGhpcy50YXJnZXQsIHRoaXMucGxheWFibGUsIGV4Y2VwdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIG1pbWljcyhvcmlnaW46IFQpOiBJTW9jazxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbWljc1ByZXNldEZhY3RvcnkodGhpcy50YXJnZXQsIHRoaXMucGxheWFibGUsIG9yaWdpbik7XG4gICAgfVxuXG4gICAgcHVibGljIHJldHVybnModmFsdWU6IFRWYWx1ZSk6IElNb2NrPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV0dXJuc1ByZXNldEZhY3RvcnkodGhpcy50YXJnZXQsIHRoaXMucGxheWFibGUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdGhyb3dzPFRFeGNlcHRpb24+KGV4Y2VwdGlvbjogVEV4Y2VwdGlvbik6IElNb2NrPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhyb3dzUHJlc2V0RmFjdG9yeSh0aGlzLnRhcmdldCwgdGhpcy5wbGF5YWJsZSwgZXhjZXB0aW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2FsbGJhY2soY2FsbGJhY2s6IChpbnRlcmFjdGlvbjogRXhwcmVzc2lvbikgPT4gVFZhbHVlKTogSU1vY2s8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWxsYmFja1ByZXNldEZhY3RvcnkodGhpcy50YXJnZXQsIHRoaXMucGxheWFibGUsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGxheShwbGF5YWJsZTogSVBsYXlhYmxlKTogSVByZXNldEJ1aWxkZXI8VD4ge1xuICAgICAgICB0aGlzLnBsYXlhYmxlID0gcGxheWFibGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbiJdfQ==