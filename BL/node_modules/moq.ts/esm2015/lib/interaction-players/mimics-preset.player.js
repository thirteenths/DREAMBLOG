import { GetPropertyExpression, InOperatorExpression, FunctionExpression, MethodExpression, NewOperatorExpression, SetPropertyExpression } from "../reflector/expressions";
/**
 * @hidden
 */
export class MimicsPresetPlayer {
    constructor(apply) {
        this.apply = apply;
    }
    play(origin, interaction) {
        if (interaction instanceof GetPropertyExpression) {
            return origin[interaction.name];
        }
        if (interaction instanceof SetPropertyExpression) {
            origin[interaction.name] = interaction.value;
            return true;
        }
        if (interaction instanceof MethodExpression) {
            const method = origin[interaction.name];
            return this.apply(method, origin, interaction.args);
        }
        if (interaction instanceof FunctionExpression) {
            return this.apply(origin, undefined, interaction.args);
        }
        if (interaction instanceof InOperatorExpression) {
            return interaction.name in origin;
        }
        if (interaction instanceof NewOperatorExpression) {
            return new origin(...interaction.args);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWltaWNzLXByZXNldC5wbGF5ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9pbnRlcmFjdGlvbi1wbGF5ZXJzL21pbWljcy1wcmVzZXQucGxheWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxxQkFBcUIsRUFDckIsb0JBQW9CLEVBRXBCLGtCQUFrQixFQUNsQixnQkFBZ0IsRUFDaEIscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUN4QixNQUFNLDBCQUEwQixDQUFDO0FBSWxDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQUMzQixZQUNZLEtBQWlEO1FBQWpELFVBQUssR0FBTCxLQUFLLENBQTRDO0lBRTdELENBQUM7SUFFTSxJQUFJLENBQUMsTUFBVyxFQUFFLFdBQXVCO1FBQzVDLElBQUksV0FBVyxZQUFZLHFCQUFxQixFQUFFO1lBQzlDLE9BQU8sTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQztRQUNELElBQUksV0FBVyxZQUFZLHFCQUFxQixFQUFFO1lBQzlDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUM3QyxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBSSxXQUFXLFlBQVksZ0JBQWdCLEVBQUU7WUFDekMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkQ7UUFDRCxJQUFJLFdBQVcsWUFBWSxrQkFBa0IsRUFBRTtZQUMzQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUQ7UUFDRCxJQUFJLFdBQVcsWUFBWSxvQkFBb0IsRUFBRTtZQUM3QyxPQUFPLFdBQVcsQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDO1NBQ3JDO1FBRUQsSUFBSSxXQUFXLFlBQVkscUJBQXFCLEVBQUU7WUFDOUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMxQztJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgR2V0UHJvcGVydHlFeHByZXNzaW9uLFxuICAgIEluT3BlcmF0b3JFeHByZXNzaW9uLFxuICAgIEV4cHJlc3Npb24sXG4gICAgRnVuY3Rpb25FeHByZXNzaW9uLFxuICAgIE1ldGhvZEV4cHJlc3Npb24sXG4gICAgTmV3T3BlcmF0b3JFeHByZXNzaW9uLFxuICAgIFNldFByb3BlcnR5RXhwcmVzc2lvblxufSBmcm9tIFwiLi4vcmVmbGVjdG9yL2V4cHJlc3Npb25zXCI7XG5pbXBvcnQgeyBSRUZMRUNUX0FQUExZIH0gZnJvbSBcIi4vcmVmbGVjdC1hcHBseS5pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCB7IFR5cGVvZkluamVjdGlvblRva2VuIH0gZnJvbSBcIi4uL2luamVjdG9yL3R5cGVvZi1pbmplY3Rpb24tdG9rZW5cIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBNaW1pY3NQcmVzZXRQbGF5ZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwcGx5OiBUeXBlb2ZJbmplY3Rpb25Ub2tlbjx0eXBlb2YgUkVGTEVDVF9BUFBMWT4pIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5KG9yaWdpbjogYW55LCBpbnRlcmFjdGlvbjogRXhwcmVzc2lvbik6IGFueSB7XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbiBpbnN0YW5jZW9mIEdldFByb3BlcnR5RXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbltpbnRlcmFjdGlvbi5uYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJhY3Rpb24gaW5zdGFuY2VvZiBTZXRQcm9wZXJ0eUV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIG9yaWdpbltpbnRlcmFjdGlvbi5uYW1lXSA9IGludGVyYWN0aW9uLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVyYWN0aW9uIGluc3RhbmNlb2YgTWV0aG9kRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gb3JpZ2luW2ludGVyYWN0aW9uLm5hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHkobWV0aG9kLCBvcmlnaW4sIGludGVyYWN0aW9uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHkob3JpZ2luLCB1bmRlZmluZWQsIGludGVyYWN0aW9uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbiBpbnN0YW5jZW9mIEluT3BlcmF0b3JFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJhY3Rpb24ubmFtZSBpbiBvcmlnaW47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJhY3Rpb24gaW5zdGFuY2VvZiBOZXdPcGVyYXRvckV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgb3JpZ2luKC4uLmludGVyYWN0aW9uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19