import { ExpressionHasMethodExplorer } from "./has-method.explorer/expression.has-method.explorer";
import { HasMethodExplorer } from "./has-method.explorer/has-method.explorer";
import { Presets } from "../presets/presets";
import { MembersMethodExplorer } from "./members.explorer/members-method.explorer";
import { PresetHasMethodExplorer } from "./has-method.explorer/preset.has-method.explorer";
import { ObjectHasMethodExplorer } from "./has-method.explorer/object.has-method.explorer";
import { ExpressionHasPropertyExplorer } from "./has-property.explorer/expression-has-property.explorer";
import { HasPropertyExplorer } from "./has-property.explorer/has-property.explorer";
import { MembersPropertyExplorer } from "./members.explorer/members-property.explorer";
import { PresetHasPropertyExplorer } from "./has-property.explorer/preset-has-property.explorer";
import { ObjectHasPropertyExplorer } from "./has-property.explorer/object-has-property.explorer";
import { InOperatorInteractionExplorer } from "./in-operator-interaction.explorer/in-operator-interaction.explorer";
import { PresetHasInOperatorExplorer } from "./in-operator-interaction.explorer/preset.has-in-operator.explorer";
import { PrototypeStorage } from "../interceptors/prototype.storage";
import { PropertyDescriptorProvider } from "./members.explorer/property-descriptor.provider";
import { REFLECT_HAS } from "./reflect-has.injection-token";
import { PropertyIsReadOnlyTester } from "./has-property.explorer/property-is-read-only.tester";
/**
 * @hidden
 */
export default [
    { provide: ExpressionHasMethodExplorer, useClass: ExpressionHasMethodExplorer, deps: [] },
    {
        provide: HasMethodExplorer,
        useClass: HasMethodExplorer,
        deps: [Presets, MembersMethodExplorer, PresetHasMethodExplorer]
    },
    { provide: ObjectHasMethodExplorer, useClass: ObjectHasMethodExplorer, deps: [] },
    {
        provide: PresetHasMethodExplorer,
        useClass: PresetHasMethodExplorer,
        deps: [ExpressionHasMethodExplorer, ObjectHasMethodExplorer]
    },
    { provide: ExpressionHasPropertyExplorer, useClass: ExpressionHasPropertyExplorer, deps: [] },
    {
        provide: HasPropertyExplorer,
        useClass: HasPropertyExplorer,
        deps: [Presets, MembersPropertyExplorer, PresetHasPropertyExplorer]
    },
    { provide: ObjectHasPropertyExplorer, useClass: ObjectHasPropertyExplorer, deps: [] },
    {
        provide: PresetHasPropertyExplorer,
        useClass: PresetHasPropertyExplorer,
        deps: [ExpressionHasPropertyExplorer, ObjectHasPropertyExplorer]
    },
    {
        provide: InOperatorInteractionExplorer,
        useClass: InOperatorInteractionExplorer,
        deps: [Presets, PresetHasInOperatorExplorer]
    },
    { provide: PresetHasInOperatorExplorer, useClass: PresetHasInOperatorExplorer, deps: [] },
    {
        provide: MembersMethodExplorer,
        useClass: MembersMethodExplorer,
        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]
    },
    {
        provide: PropertyIsReadOnlyTester,
        useClass: PropertyIsReadOnlyTester,
        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]
    },
    {
        provide: MembersPropertyExplorer,
        useClass: MembersPropertyExplorer,
        deps: [PrototypeStorage, PropertyDescriptorProvider, REFLECT_HAS]
    },
    { provide: PropertyDescriptorProvider, useClass: PropertyDescriptorProvider, deps: [] },
    { provide: REFLECT_HAS, useValue: Reflect.has, deps: [] },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9leHBsb3JlcnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDbkcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDOUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQ2pHLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQ2pHLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHFFQUFxRSxDQUFDO0FBQ3BILE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG9FQUFvRSxDQUFDO0FBQ2pILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQzdGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUVoRzs7R0FFRztBQUNILGVBQWU7SUFDWCxFQUFDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsMkJBQTJCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUN2RjtRQUNJLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQixJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsdUJBQXVCLENBQUM7S0FDbEU7SUFDRCxFQUFDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUMvRTtRQUNJLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsUUFBUSxFQUFFLHVCQUF1QjtRQUNqQyxJQUFJLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSx1QkFBdUIsQ0FBQztLQUMvRDtJQUNELEVBQUMsT0FBTyxFQUFFLDZCQUE2QixFQUFFLFFBQVEsRUFBRSw2QkFBNkIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQzNGO1FBQ0ksT0FBTyxFQUFFLG1CQUFtQjtRQUM1QixRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSx5QkFBeUIsQ0FBQztLQUN0RTtJQUNELEVBQUMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLFFBQVEsRUFBRSx5QkFBeUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ25GO1FBQ0ksT0FBTyxFQUFFLHlCQUF5QjtRQUNsQyxRQUFRLEVBQUUseUJBQXlCO1FBQ25DLElBQUksRUFBRSxDQUFDLDZCQUE2QixFQUFFLHlCQUF5QixDQUFDO0tBQ25FO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsNkJBQTZCO1FBQ3RDLFFBQVEsRUFBRSw2QkFBNkI7UUFDdkMsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLDJCQUEyQixDQUFDO0tBQy9DO0lBQ0QsRUFBQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLDJCQUEyQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDdkY7UUFDSSxPQUFPLEVBQUUscUJBQXFCO1FBQzlCLFFBQVEsRUFBRSxxQkFBcUI7UUFDL0IsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsMEJBQTBCLEVBQUUsV0FBVyxDQUFDO0tBQ3BFO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLFFBQVEsRUFBRSx3QkFBd0I7UUFDbEMsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsMEJBQTBCLEVBQUUsV0FBVyxDQUFDO0tBQ3BFO0lBQ0Q7UUFDSSxPQUFPLEVBQUUsdUJBQXVCO1FBQ2hDLFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsMEJBQTBCLEVBQUUsV0FBVyxDQUFDO0tBQ3BFO0lBQ0QsRUFBQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7SUFDckYsRUFBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7Q0FDMUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3Npb25IYXNNZXRob2RFeHBsb3JlciB9IGZyb20gXCIuL2hhcy1tZXRob2QuZXhwbG9yZXIvZXhwcmVzc2lvbi5oYXMtbWV0aG9kLmV4cGxvcmVyXCI7XG5pbXBvcnQgeyBIYXNNZXRob2RFeHBsb3JlciB9IGZyb20gXCIuL2hhcy1tZXRob2QuZXhwbG9yZXIvaGFzLW1ldGhvZC5leHBsb3JlclwiO1xuaW1wb3J0IHsgUHJlc2V0cyB9IGZyb20gXCIuLi9wcmVzZXRzL3ByZXNldHNcIjtcbmltcG9ydCB7IE1lbWJlcnNNZXRob2RFeHBsb3JlciB9IGZyb20gXCIuL21lbWJlcnMuZXhwbG9yZXIvbWVtYmVycy1tZXRob2QuZXhwbG9yZXJcIjtcbmltcG9ydCB7IFByZXNldEhhc01ldGhvZEV4cGxvcmVyIH0gZnJvbSBcIi4vaGFzLW1ldGhvZC5leHBsb3Jlci9wcmVzZXQuaGFzLW1ldGhvZC5leHBsb3JlclwiO1xuaW1wb3J0IHsgT2JqZWN0SGFzTWV0aG9kRXhwbG9yZXIgfSBmcm9tIFwiLi9oYXMtbWV0aG9kLmV4cGxvcmVyL29iamVjdC5oYXMtbWV0aG9kLmV4cGxvcmVyXCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uSGFzUHJvcGVydHlFeHBsb3JlciB9IGZyb20gXCIuL2hhcy1wcm9wZXJ0eS5leHBsb3Jlci9leHByZXNzaW9uLWhhcy1wcm9wZXJ0eS5leHBsb3JlclwiO1xuaW1wb3J0IHsgSGFzUHJvcGVydHlFeHBsb3JlciB9IGZyb20gXCIuL2hhcy1wcm9wZXJ0eS5leHBsb3Jlci9oYXMtcHJvcGVydHkuZXhwbG9yZXJcIjtcbmltcG9ydCB7IE1lbWJlcnNQcm9wZXJ0eUV4cGxvcmVyIH0gZnJvbSBcIi4vbWVtYmVycy5leHBsb3Jlci9tZW1iZXJzLXByb3BlcnR5LmV4cGxvcmVyXCI7XG5pbXBvcnQgeyBQcmVzZXRIYXNQcm9wZXJ0eUV4cGxvcmVyIH0gZnJvbSBcIi4vaGFzLXByb3BlcnR5LmV4cGxvcmVyL3ByZXNldC1oYXMtcHJvcGVydHkuZXhwbG9yZXJcIjtcbmltcG9ydCB7IE9iamVjdEhhc1Byb3BlcnR5RXhwbG9yZXIgfSBmcm9tIFwiLi9oYXMtcHJvcGVydHkuZXhwbG9yZXIvb2JqZWN0LWhhcy1wcm9wZXJ0eS5leHBsb3JlclwiO1xuaW1wb3J0IHsgSW5PcGVyYXRvckludGVyYWN0aW9uRXhwbG9yZXIgfSBmcm9tIFwiLi9pbi1vcGVyYXRvci1pbnRlcmFjdGlvbi5leHBsb3Jlci9pbi1vcGVyYXRvci1pbnRlcmFjdGlvbi5leHBsb3JlclwiO1xuaW1wb3J0IHsgUHJlc2V0SGFzSW5PcGVyYXRvckV4cGxvcmVyIH0gZnJvbSBcIi4vaW4tb3BlcmF0b3ItaW50ZXJhY3Rpb24uZXhwbG9yZXIvcHJlc2V0Lmhhcy1pbi1vcGVyYXRvci5leHBsb3JlclwiO1xuaW1wb3J0IHsgUHJvdG90eXBlU3RvcmFnZSB9IGZyb20gXCIuLi9pbnRlcmNlcHRvcnMvcHJvdG90eXBlLnN0b3JhZ2VcIjtcbmltcG9ydCB7IFByb3BlcnR5RGVzY3JpcHRvclByb3ZpZGVyIH0gZnJvbSBcIi4vbWVtYmVycy5leHBsb3Jlci9wcm9wZXJ0eS1kZXNjcmlwdG9yLnByb3ZpZGVyXCI7XG5pbXBvcnQgeyBSRUZMRUNUX0hBUyB9IGZyb20gXCIuL3JlZmxlY3QtaGFzLmluamVjdGlvbi10b2tlblwiO1xuaW1wb3J0IHsgUHJvcGVydHlJc1JlYWRPbmx5VGVzdGVyIH0gZnJvbSBcIi4vaGFzLXByb3BlcnR5LmV4cGxvcmVyL3Byb3BlcnR5LWlzLXJlYWQtb25seS50ZXN0ZXJcIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IFtcbiAgICB7cHJvdmlkZTogRXhwcmVzc2lvbkhhc01ldGhvZEV4cGxvcmVyLCB1c2VDbGFzczogRXhwcmVzc2lvbkhhc01ldGhvZEV4cGxvcmVyLCBkZXBzOiBbXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBIYXNNZXRob2RFeHBsb3JlcixcbiAgICAgICAgdXNlQ2xhc3M6IEhhc01ldGhvZEV4cGxvcmVyLFxuICAgICAgICBkZXBzOiBbUHJlc2V0cywgTWVtYmVyc01ldGhvZEV4cGxvcmVyLCBQcmVzZXRIYXNNZXRob2RFeHBsb3Jlcl1cbiAgICB9LFxuICAgIHtwcm92aWRlOiBPYmplY3RIYXNNZXRob2RFeHBsb3JlciwgdXNlQ2xhc3M6IE9iamVjdEhhc01ldGhvZEV4cGxvcmVyLCBkZXBzOiBbXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBQcmVzZXRIYXNNZXRob2RFeHBsb3JlcixcbiAgICAgICAgdXNlQ2xhc3M6IFByZXNldEhhc01ldGhvZEV4cGxvcmVyLFxuICAgICAgICBkZXBzOiBbRXhwcmVzc2lvbkhhc01ldGhvZEV4cGxvcmVyLCBPYmplY3RIYXNNZXRob2RFeHBsb3Jlcl1cbiAgICB9LFxuICAgIHtwcm92aWRlOiBFeHByZXNzaW9uSGFzUHJvcGVydHlFeHBsb3JlciwgdXNlQ2xhc3M6IEV4cHJlc3Npb25IYXNQcm9wZXJ0eUV4cGxvcmVyLCBkZXBzOiBbXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBIYXNQcm9wZXJ0eUV4cGxvcmVyLFxuICAgICAgICB1c2VDbGFzczogSGFzUHJvcGVydHlFeHBsb3JlcixcbiAgICAgICAgZGVwczogW1ByZXNldHMsIE1lbWJlcnNQcm9wZXJ0eUV4cGxvcmVyLCBQcmVzZXRIYXNQcm9wZXJ0eUV4cGxvcmVyXVxuICAgIH0sXG4gICAge3Byb3ZpZGU6IE9iamVjdEhhc1Byb3BlcnR5RXhwbG9yZXIsIHVzZUNsYXNzOiBPYmplY3RIYXNQcm9wZXJ0eUV4cGxvcmVyLCBkZXBzOiBbXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBQcmVzZXRIYXNQcm9wZXJ0eUV4cGxvcmVyLFxuICAgICAgICB1c2VDbGFzczogUHJlc2V0SGFzUHJvcGVydHlFeHBsb3JlcixcbiAgICAgICAgZGVwczogW0V4cHJlc3Npb25IYXNQcm9wZXJ0eUV4cGxvcmVyLCBPYmplY3RIYXNQcm9wZXJ0eUV4cGxvcmVyXVxuICAgIH0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBJbk9wZXJhdG9ySW50ZXJhY3Rpb25FeHBsb3JlcixcbiAgICAgICAgdXNlQ2xhc3M6IEluT3BlcmF0b3JJbnRlcmFjdGlvbkV4cGxvcmVyLFxuICAgICAgICBkZXBzOiBbUHJlc2V0cywgUHJlc2V0SGFzSW5PcGVyYXRvckV4cGxvcmVyXVxuICAgIH0sXG4gICAge3Byb3ZpZGU6IFByZXNldEhhc0luT3BlcmF0b3JFeHBsb3JlciwgdXNlQ2xhc3M6IFByZXNldEhhc0luT3BlcmF0b3JFeHBsb3JlciwgZGVwczogW119LFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogTWVtYmVyc01ldGhvZEV4cGxvcmVyLFxuICAgICAgICB1c2VDbGFzczogTWVtYmVyc01ldGhvZEV4cGxvcmVyLFxuICAgICAgICBkZXBzOiBbUHJvdG90eXBlU3RvcmFnZSwgUHJvcGVydHlEZXNjcmlwdG9yUHJvdmlkZXIsIFJFRkxFQ1RfSEFTXVxuICAgIH0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBQcm9wZXJ0eUlzUmVhZE9ubHlUZXN0ZXIsXG4gICAgICAgIHVzZUNsYXNzOiBQcm9wZXJ0eUlzUmVhZE9ubHlUZXN0ZXIsXG4gICAgICAgIGRlcHM6IFtQcm90b3R5cGVTdG9yYWdlLCBQcm9wZXJ0eURlc2NyaXB0b3JQcm92aWRlciwgUkVGTEVDVF9IQVNdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IE1lbWJlcnNQcm9wZXJ0eUV4cGxvcmVyLFxuICAgICAgICB1c2VDbGFzczogTWVtYmVyc1Byb3BlcnR5RXhwbG9yZXIsXG4gICAgICAgIGRlcHM6IFtQcm90b3R5cGVTdG9yYWdlLCBQcm9wZXJ0eURlc2NyaXB0b3JQcm92aWRlciwgUkVGTEVDVF9IQVNdXG4gICAgfSxcbiAgICB7cHJvdmlkZTogUHJvcGVydHlEZXNjcmlwdG9yUHJvdmlkZXIsIHVzZUNsYXNzOiBQcm9wZXJ0eURlc2NyaXB0b3JQcm92aWRlciwgZGVwczogW119LFxuICAgIHtwcm92aWRlOiBSRUZMRUNUX0hBUywgdXNlVmFsdWU6IFJlZmxlY3QuaGFzLCBkZXBzOiBbXX0sXG5dO1xuIl19