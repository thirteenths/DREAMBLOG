import { Times } from "./times";
import { injectorFactory } from "./injector/injector.factory";
import { MOCK } from "./injector/mock.injection-token";
import { DefaultInjectorConfig } from "./injector/default-injector.config";
import { MockCore } from "./core/mock-core";
import { MOCK_CONSTRUCTOR } from "./injector/mock-constructor.injection-token";
/**
 * The default implementation of {@link IMock} interface.
 */
export class Mock {
    constructor(options = {}) {
        const preOptions = Object.assign(Object.assign({}, Mock.options), options);
        const providers = [
            { provide: MOCK, useValue: this, deps: [] },
            { provide: MOCK_CONSTRUCTOR, useValue: (opts) => new Mock(opts), deps: [] },
        ];
        const injector = injectorFactory(preOptions, ...providers);
        this.core = injector.get(MockCore);
    }
    /**
     * The default mock options that would applied to all instantiating Mock objects.
     * By default it sets {@link IMockOptions.target} as a function, {@link IMockOptions.injectorConfig} as
     * instance of {@link DefaultInjectorConfig} and {@link IMockOptions.name} as undefined.
     * If an options are passed as constructor parameter {@link Mock.constructor} they will override the default options.
     */
    static get options() {
        if (Mock.Options === undefined) {
            Mock.Options = {
                target: () => undefined,
                injectorConfig: new DefaultInjectorConfig()
            };
        }
        return Mock.Options;
    }
    /**
     * The default mock options that would applied to all instantiating Mock objects.
     * If an options are passed as constructor parameter they will override the default options.
     */
    static set options(options) {
        Mock.Options = options;
    }
    get options() {
        return this.core.options;
    }
    get tracker() {
        return this.core.tracker;
    }
    get name() {
        return this.core.name;
    }
    setup(expression) {
        return this.core.setup(expression);
    }
    verify(expression, times = Times.Once()) {
        return this.core.verify(expression, times);
    }
    object() {
        return this.core.object();
    }
    prototypeof(prototype) {
        return this.core.prototypeof(prototype);
    }
    /**
     * @experimental
     */
    insequence(sequence, expression) {
        return this.core.insequence(sequence, expression);
    }
    resolve(token) {
        return this.core.resolve(token);
    }
}
Mock.Options = undefined;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL21vcS9zcmMvbGliL21vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3ZELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUk1QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUcvRTs7R0FFRztBQUNILE1BQU0sT0FBTyxJQUFJO0lBSWIsWUFBWSxVQUEyQixFQUFFO1FBQ3JDLE1BQU0sVUFBVSxHQUFHLGdDQUFJLElBQUksQ0FBQyxPQUFPLEdBQUssT0FBTyxDQUFvQixDQUFDO1FBQ3BFLE1BQU0sU0FBUyxHQUFHO1lBQ2QsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztZQUN6QyxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsQ0FBQyxJQUEyQixFQUFFLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO1NBQ25HLENBQUM7UUFDRixNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsVUFBVSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sS0FBSyxPQUFPO1FBQ2QsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHO2dCQUNYLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUN2QixjQUFjLEVBQUUsSUFBSSxxQkFBcUIsRUFBRTthQUM5QyxDQUFDO1NBQ0w7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sS0FBSyxPQUFPLENBQUMsT0FBOEI7UUFDN0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQVcsT0FBTztRQUNkLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQVcsT0FBTztRQUNkLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQVcsSUFBSTtRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQUVNLEtBQUssQ0FDNkMsVUFBYTtRQUNsRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBMEIsRUFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRTtRQUMxRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRU0sV0FBVyxDQUFDLFNBQWU7UUFDOUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxVQUFVLENBQUMsUUFBMkIsRUFBRSxVQUEwQjtRQUNyRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sT0FBTyxDQUFvRSxLQUFrQztRQUNoSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7O0FBM0VjLFlBQU8sR0FBMEIsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSU1vY2ssIElNb2NrT3B0aW9ucywgSVByZXNldEJ1aWxkZXIsIElTZXF1ZW5jZVZlcmlmaWVyIH0gZnJvbSBcIi4vbW9xXCI7XG5pbXBvcnQgeyBUaW1lcyB9IGZyb20gXCIuL3RpbWVzXCI7XG5pbXBvcnQgeyBpbmplY3RvckZhY3RvcnkgfSBmcm9tIFwiLi9pbmplY3Rvci9pbmplY3Rvci5mYWN0b3J5XCI7XG5pbXBvcnQgeyBNT0NLIH0gZnJvbSBcIi4vaW5qZWN0b3IvbW9jay5pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCB7IERlZmF1bHRJbmplY3RvckNvbmZpZyB9IGZyb20gXCIuL2luamVjdG9yL2RlZmF1bHQtaW5qZWN0b3IuY29uZmlnXCI7XG5pbXBvcnQgeyBNb2NrQ29yZSB9IGZyb20gXCIuL2NvcmUvbW9jay1jb3JlXCI7XG5pbXBvcnQgeyBJbmplY3Rpb25GYWN0b3J5LCBUeXBlT2ZJbmplY3Rpb25GYWN0b3J5IH0gZnJvbSBcIi4vaW5qZWN0b3IvaW5qZWN0aW9uLWZhY3RvcnlcIjtcbmltcG9ydCB7IFR5cGUgfSBmcm9tIFwiLi9zdGF0aWMuaW5qZWN0b3IvdHlwZVwiO1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tIFwiLi9zdGF0aWMuaW5qZWN0b3IvaW5qZWN0aW9uX3Rva2VuXCI7XG5pbXBvcnQgeyBNT0NLX0NPTlNUUlVDVE9SIH0gZnJvbSBcIi4vaW5qZWN0b3IvbW9jay1jb25zdHJ1Y3Rvci5pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCB7IElFeHByZXNzaW9uIH0gZnJvbSBcIi4vcmVmbGVjdG9yL2V4cHJlc3Npb24tcmVmbGVjdG9yXCI7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIElNb2NrfSBpbnRlcmZhY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBNb2NrPFQ+IGltcGxlbWVudHMgSU1vY2s8VD4ge1xuICAgIHByaXZhdGUgc3RhdGljIE9wdGlvbnM6IElNb2NrT3B0aW9uczx1bmtub3duPiA9IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvcmU6IE1vY2tDb3JlPFQ+O1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogSU1vY2tPcHRpb25zPFQ+ID0ge30pIHtcbiAgICAgICAgY29uc3QgcHJlT3B0aW9ucyA9IHsuLi5Nb2NrLm9wdGlvbnMsIC4uLm9wdGlvbnN9IGFzIElNb2NrT3B0aW9uczxUPjtcbiAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gW1xuICAgICAgICAgICAge3Byb3ZpZGU6IE1PQ0ssIHVzZVZhbHVlOiB0aGlzLCBkZXBzOiBbXX0sXG4gICAgICAgICAgICB7cHJvdmlkZTogTU9DS19DT05TVFJVQ1RPUiwgdXNlVmFsdWU6IChvcHRzOiBJTW9ja09wdGlvbnM8dW5rbm93bj4pID0+IG5ldyBNb2NrKG9wdHMpLCBkZXBzOiBbXX0sXG4gICAgICAgIF07XG4gICAgICAgIGNvbnN0IGluamVjdG9yID0gaW5qZWN0b3JGYWN0b3J5KHByZU9wdGlvbnMsIC4uLnByb3ZpZGVycyk7XG4gICAgICAgIHRoaXMuY29yZSA9IGluamVjdG9yLmdldChNb2NrQ29yZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgbW9jayBvcHRpb25zIHRoYXQgd291bGQgYXBwbGllZCB0byBhbGwgaW5zdGFudGlhdGluZyBNb2NrIG9iamVjdHMuXG4gICAgICogQnkgZGVmYXVsdCBpdCBzZXRzIHtAbGluayBJTW9ja09wdGlvbnMudGFyZ2V0fSBhcyBhIGZ1bmN0aW9uLCB7QGxpbmsgSU1vY2tPcHRpb25zLmluamVjdG9yQ29uZmlnfSBhc1xuICAgICAqIGluc3RhbmNlIG9mIHtAbGluayBEZWZhdWx0SW5qZWN0b3JDb25maWd9IGFuZCB7QGxpbmsgSU1vY2tPcHRpb25zLm5hbWV9IGFzIHVuZGVmaW5lZC5cbiAgICAgKiBJZiBhbiBvcHRpb25zIGFyZSBwYXNzZWQgYXMgY29uc3RydWN0b3IgcGFyYW1ldGVyIHtAbGluayBNb2NrLmNvbnN0cnVjdG9yfSB0aGV5IHdpbGwgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIGlmIChNb2NrLk9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgTW9jay5PcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHRhcmdldDogKCkgPT4gdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGluamVjdG9yQ29uZmlnOiBuZXcgRGVmYXVsdEluamVjdG9yQ29uZmlnKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE1vY2suT3B0aW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBtb2NrIG9wdGlvbnMgdGhhdCB3b3VsZCBhcHBsaWVkIHRvIGFsbCBpbnN0YW50aWF0aW5nIE1vY2sgb2JqZWN0cy5cbiAgICAgKiBJZiBhbiBvcHRpb25zIGFyZSBwYXNzZWQgYXMgY29uc3RydWN0b3IgcGFyYW1ldGVyIHRoZXkgd2lsbCBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zLlxuICAgICAqL1xuICAgIHN0YXRpYyBzZXQgb3B0aW9ucyhvcHRpb25zOiBJTW9ja09wdGlvbnM8dW5rbm93bj4pIHtcbiAgICAgICAgTW9jay5PcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcmUub3B0aW9ucztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHRyYWNrZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcmUudHJhY2tlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcmUubmFtZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0dXA8RSBleHRlbmRzIElFeHByZXNzaW9uPFQ+LFxuICAgICAgICBSID0gRSBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gaW5mZXIgTSA/IE0gOiBhbnk+KGV4cHJlc3Npb246IEUpOiBJUHJlc2V0QnVpbGRlcjxULCBSPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcmUuc2V0dXAoZXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgcHVibGljIHZlcmlmeShleHByZXNzaW9uOiBJRXhwcmVzc2lvbjxUPiwgdGltZXMgPSBUaW1lcy5PbmNlKCkpOiBJTW9jazxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcmUudmVyaWZ5KGV4cHJlc3Npb24sIHRpbWVzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb2JqZWN0KCk6IFQge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3JlLm9iamVjdCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwcm90b3R5cGVvZihwcm90b3R5cGU/OiBhbnkpOiBJTW9jazxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvcmUucHJvdG90eXBlb2YocHJvdG90eXBlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZXhwZXJpbWVudGFsXG4gICAgICovXG4gICAgcHVibGljIGluc2VxdWVuY2Uoc2VxdWVuY2U6IElTZXF1ZW5jZVZlcmlmaWVyLCBleHByZXNzaW9uOiBJRXhwcmVzc2lvbjxUPik6IElNb2NrPFQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29yZS5pbnNlcXVlbmNlKHNlcXVlbmNlLCBleHByZXNzaW9uKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzb2x2ZTxTLCBSID0gUyBleHRlbmRzIEluamVjdGlvbkZhY3RvcnkgPyBUeXBlT2ZJbmplY3Rpb25GYWN0b3J5PFM+IDogUz4odG9rZW46IFR5cGU8Uz4gfCBJbmplY3Rpb25Ub2tlbjxTPik6IFIge1xuICAgICAgICByZXR1cm4gdGhpcy5jb3JlLnJlc29sdmUodG9rZW4pO1xuICAgIH1cbn1cbiJdfQ==