import { GetPropertyExpression } from "../reflector/expressions";
import { MoqAPI } from "../moq";
/**
 * @hidden
 */
export class GetTrap {
    constructor(mock, tracker, propertiesValueStorage, interactionPlayer, hasPropertyExplorer, hasMethodExplorer, spyFunctionProvider) {
        this.mock = mock;
        this.tracker = tracker;
        this.propertiesValueStorage = propertiesValueStorage;
        this.interactionPlayer = interactionPlayer;
        this.hasPropertyExplorer = hasPropertyExplorer;
        this.hasMethodExplorer = hasMethodExplorer;
        this.spyFunctionProvider = spyFunctionProvider;
    }
    intercept(property) {
        const interaction = new GetPropertyExpression(property);
        this.tracker.add(interaction);
        if (property === MoqAPI) {
            return this.mock;
        }
        if (this.propertiesValueStorage.has(property)) {
            return this.propertiesValueStorage.get(property);
        }
        if (this.hasPropertyExplorer.has(property)) {
            return this.interactionPlayer.play(interaction);
        }
        if (this.hasMethodExplorer.has(property)) {
            return this.spyFunctionProvider.get(property);
        }
        return this.interactionPlayer.play(interaction);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LnRyYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9pbnRlcmNlcHRvcnMvZ2V0LnRyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFNakUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUtoQzs7R0FFRztBQUNILE1BQU0sT0FBTyxPQUFPO0lBQ2hCLFlBQ1ksSUFBdUMsRUFDdkMsT0FBZ0IsRUFDaEIsc0JBQThDLEVBQzlDLGlCQUFvQyxFQUNwQyxtQkFBd0MsRUFDeEMsaUJBQW9DLEVBQ3BDLG1CQUF3QztRQU54QyxTQUFJLEdBQUosSUFBSSxDQUFtQztRQUN2QyxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBd0I7UUFDOUMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ3hDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUVwRCxDQUFDO0lBRU0sU0FBUyxDQUFDLFFBQXFCO1FBQ2xDLE1BQU0sV0FBVyxHQUFHLElBQUkscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFOUIsSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztTQUNwQjtRQUVELElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMzQyxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDeEMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ25EO1FBRUQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNqRDtRQUVELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRQcm9wZXJ0eUV4cHJlc3Npb24gfSBmcm9tIFwiLi4vcmVmbGVjdG9yL2V4cHJlc3Npb25zXCI7XG5pbXBvcnQgeyBQcm9wZXJ0aWVzVmFsdWVTdG9yYWdlIH0gZnJvbSBcIi4vcHJvcGVydGllcy12YWx1ZS5zdG9yYWdlXCI7XG5pbXBvcnQgeyBTcHlGdW5jdGlvblByb3ZpZGVyIH0gZnJvbSBcIi4vc3B5LWZ1bmN0aW9uLnByb3ZpZGVyXCI7XG5pbXBvcnQgeyBJbnRlcmFjdGlvblBsYXllciB9IGZyb20gXCIuLi9pbnRlcmFjdGlvbi1wbGF5ZXJzL2ludGVyYWN0aW9uLnBsYXllclwiO1xuaW1wb3J0IHsgSGFzUHJvcGVydHlFeHBsb3JlciB9IGZyb20gXCIuLi9leHBsb3JlcnMvaGFzLXByb3BlcnR5LmV4cGxvcmVyL2hhcy1wcm9wZXJ0eS5leHBsb3JlclwiO1xuaW1wb3J0IHsgSGFzTWV0aG9kRXhwbG9yZXIgfSBmcm9tIFwiLi4vZXhwbG9yZXJzL2hhcy1tZXRob2QuZXhwbG9yZXIvaGFzLW1ldGhvZC5leHBsb3JlclwiO1xuaW1wb3J0IHsgTW9xQVBJIH0gZnJvbSBcIi4uL21vcVwiO1xuaW1wb3J0IHsgVHJhY2tlciB9IGZyb20gXCIuLi90cmFja2VyL3RyYWNrZXJcIjtcbmltcG9ydCB7IFR5cGVvZkluamVjdGlvblRva2VuIH0gZnJvbSBcIi4uL2luamVjdG9yL3R5cGVvZi1pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCB7IE1PQ0sgfSBmcm9tIFwiLi4vaW5qZWN0b3IvbW9jay5pbmplY3Rpb24tdG9rZW5cIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBHZXRUcmFwIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBtb2NrOiBUeXBlb2ZJbmplY3Rpb25Ub2tlbjx0eXBlb2YgTU9DSz4sXG4gICAgICAgIHByaXZhdGUgdHJhY2tlcjogVHJhY2tlcixcbiAgICAgICAgcHJpdmF0ZSBwcm9wZXJ0aWVzVmFsdWVTdG9yYWdlOiBQcm9wZXJ0aWVzVmFsdWVTdG9yYWdlLFxuICAgICAgICBwcml2YXRlIGludGVyYWN0aW9uUGxheWVyOiBJbnRlcmFjdGlvblBsYXllcixcbiAgICAgICAgcHJpdmF0ZSBoYXNQcm9wZXJ0eUV4cGxvcmVyOiBIYXNQcm9wZXJ0eUV4cGxvcmVyLFxuICAgICAgICBwcml2YXRlIGhhc01ldGhvZEV4cGxvcmVyOiBIYXNNZXRob2RFeHBsb3JlcixcbiAgICAgICAgcHJpdmF0ZSBzcHlGdW5jdGlvblByb3ZpZGVyOiBTcHlGdW5jdGlvblByb3ZpZGVyKSB7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgaW50ZXJjZXB0KHByb3BlcnR5OiBQcm9wZXJ0eUtleSk6IGFueSB7XG4gICAgICAgIGNvbnN0IGludGVyYWN0aW9uID0gbmV3IEdldFByb3BlcnR5RXhwcmVzc2lvbihwcm9wZXJ0eSk7XG5cbiAgICAgICAgdGhpcy50cmFja2VyLmFkZChpbnRlcmFjdGlvbik7XG5cbiAgICAgICAgaWYgKHByb3BlcnR5ID09PSBNb3FBUEkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vY2s7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzVmFsdWVTdG9yYWdlLmhhcyhwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXNWYWx1ZVN0b3JhZ2UuZ2V0KHByb3BlcnR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhhc1Byb3BlcnR5RXhwbG9yZXIuaGFzKHByb3BlcnR5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJhY3Rpb25QbGF5ZXIucGxheShpbnRlcmFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5oYXNNZXRob2RFeHBsb3Jlci5oYXMocHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zcHlGdW5jdGlvblByb3ZpZGVyLmdldChwcm9wZXJ0eSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcmFjdGlvblBsYXllci5wbGF5KGludGVyYWN0aW9uKTtcbiAgICB9XG59XG4iXX0=