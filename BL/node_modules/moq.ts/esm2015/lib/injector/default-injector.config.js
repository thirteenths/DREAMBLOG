import trackerProviders from "../tracker";
import reflectorProviders from "../reflector";
import presetsProviders from "../presets";
import verificationProviders from "../verification";
import interceptorsProviders from "../interceptors";
import playablesProviders from "../playables";
import interactionPlayersProviders from "../interaction-players";
import formattersProviders from "../formatters";
import typeExplorersProviders from "../explorers";
import { mockOptionsProviders } from "../mock-options/mock-options.providers";
import mockCoreProviders from "../core";
import autoMockingProviders from "../auto-mocking";
import expressionEqualityComparersProviders from "../expression.equality-comparers";
/**
 * Provides the default configuration for an angular based injector that would be used internally by {@link Mock} instance.
 */
export class DefaultInjectorConfig {
    constructor(providers = []) {
        this.providers = providers;
    }
    get(options, providers) {
        return [
            ...providers,
            ...mockOptionsProviders(options),
            ...trackerProviders,
            ...reflectorProviders,
            ...presetsProviders,
            ...autoMockingProviders,
            ...verificationProviders,
            ...interceptorsProviders,
            ...playablesProviders,
            ...interactionPlayersProviders,
            ...formattersProviders,
            ...expressionEqualityComparersProviders,
            ...typeExplorersProviders,
            ...mockCoreProviders,
            ...this.providers,
        ];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1pbmplY3Rvci5jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9pbmplY3Rvci9kZWZhdWx0LWluamVjdG9yLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLGdCQUFnQixNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLGtCQUFrQixNQUFNLGNBQWMsQ0FBQztBQUM5QyxPQUFPLGdCQUFnQixNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLHFCQUFxQixNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8scUJBQXFCLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxrQkFBa0IsTUFBTSxjQUFjLENBQUM7QUFDOUMsT0FBTywyQkFBMkIsTUFBTSx3QkFBd0IsQ0FBQztBQUNqRSxPQUFPLG1CQUFtQixNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLHNCQUFzQixNQUFNLGNBQWMsQ0FBQztBQUNsRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUU5RSxPQUFPLGlCQUFpQixNQUFNLFNBQVMsQ0FBQztBQUN4QyxPQUFPLG9CQUFvQixNQUFNLGlCQUFpQixDQUFDO0FBQ25ELE9BQU8sb0NBQW9DLE1BQU0sa0NBQWtDLENBQUM7QUFFcEY7O0dBRUc7QUFDSCxNQUFNLE9BQU8scUJBQXFCO0lBQzlCLFlBQTZCLFlBQThCLEVBQUU7UUFBaEMsY0FBUyxHQUFULFNBQVMsQ0FBdUI7SUFDN0QsQ0FBQztJQUVELEdBQUcsQ0FBQyxPQUE4QixFQUFFLFNBQTJCO1FBQzNELE9BQU87WUFDSCxHQUFHLFNBQVM7WUFDWixHQUFHLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztZQUNoQyxHQUFHLGdCQUFnQjtZQUNuQixHQUFHLGtCQUFrQjtZQUNyQixHQUFHLGdCQUFnQjtZQUNuQixHQUFHLG9CQUFvQjtZQUN2QixHQUFHLHFCQUFxQjtZQUN4QixHQUFHLHFCQUFxQjtZQUN4QixHQUFHLGtCQUFrQjtZQUNyQixHQUFHLDJCQUEyQjtZQUM5QixHQUFHLG1CQUFtQjtZQUN0QixHQUFHLG9DQUFvQztZQUN2QyxHQUFHLHNCQUFzQjtZQUN6QixHQUFHLGlCQUFpQjtZQUNwQixHQUFHLElBQUksQ0FBQyxTQUFTO1NBQ3BCLENBQUM7SUFDTixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJSW5qZWN0b3JDb25maWcsIElNb2NrT3B0aW9ucyB9IGZyb20gXCIuLi9tb3FcIjtcbmltcG9ydCB0cmFja2VyUHJvdmlkZXJzIGZyb20gXCIuLi90cmFja2VyXCI7XG5pbXBvcnQgcmVmbGVjdG9yUHJvdmlkZXJzIGZyb20gXCIuLi9yZWZsZWN0b3JcIjtcbmltcG9ydCBwcmVzZXRzUHJvdmlkZXJzIGZyb20gXCIuLi9wcmVzZXRzXCI7XG5pbXBvcnQgdmVyaWZpY2F0aW9uUHJvdmlkZXJzIGZyb20gXCIuLi92ZXJpZmljYXRpb25cIjtcbmltcG9ydCBpbnRlcmNlcHRvcnNQcm92aWRlcnMgZnJvbSBcIi4uL2ludGVyY2VwdG9yc1wiO1xuaW1wb3J0IHBsYXlhYmxlc1Byb3ZpZGVycyBmcm9tIFwiLi4vcGxheWFibGVzXCI7XG5pbXBvcnQgaW50ZXJhY3Rpb25QbGF5ZXJzUHJvdmlkZXJzIGZyb20gXCIuLi9pbnRlcmFjdGlvbi1wbGF5ZXJzXCI7XG5pbXBvcnQgZm9ybWF0dGVyc1Byb3ZpZGVycyBmcm9tIFwiLi4vZm9ybWF0dGVyc1wiO1xuaW1wb3J0IHR5cGVFeHBsb3JlcnNQcm92aWRlcnMgZnJvbSBcIi4uL2V4cGxvcmVyc1wiO1xuaW1wb3J0IHsgbW9ja09wdGlvbnNQcm92aWRlcnMgfSBmcm9tIFwiLi4vbW9jay1vcHRpb25zL21vY2stb3B0aW9ucy5wcm92aWRlcnNcIjtcbmltcG9ydCB7IFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSBcIi4uL3N0YXRpYy5pbmplY3Rvci9pbnRlcmZhY2UvcHJvdmlkZXJcIjtcbmltcG9ydCBtb2NrQ29yZVByb3ZpZGVycyBmcm9tIFwiLi4vY29yZVwiO1xuaW1wb3J0IGF1dG9Nb2NraW5nUHJvdmlkZXJzIGZyb20gXCIuLi9hdXRvLW1vY2tpbmdcIjtcbmltcG9ydCBleHByZXNzaW9uRXF1YWxpdHlDb21wYXJlcnNQcm92aWRlcnMgZnJvbSBcIi4uL2V4cHJlc3Npb24uZXF1YWxpdHktY29tcGFyZXJzXCI7XG5cbi8qKlxuICogUHJvdmlkZXMgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBmb3IgYW4gYW5ndWxhciBiYXNlZCBpbmplY3RvciB0aGF0IHdvdWxkIGJlIHVzZWQgaW50ZXJuYWxseSBieSB7QGxpbmsgTW9ja30gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0SW5qZWN0b3JDb25maWcgaW1wbGVtZW50cyBJSW5qZWN0b3JDb25maWcge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW10pIHtcbiAgICB9XG5cbiAgICBnZXQob3B0aW9uczogSU1vY2tPcHRpb25zPHVua25vd24+LCBwcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10pOiBTdGF0aWNQcm92aWRlcltdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnByb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLm1vY2tPcHRpb25zUHJvdmlkZXJzKG9wdGlvbnMpLFxuICAgICAgICAgICAgLi4udHJhY2tlclByb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLnJlZmxlY3RvclByb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLnByZXNldHNQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi5hdXRvTW9ja2luZ1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLnZlcmlmaWNhdGlvblByb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLmludGVyY2VwdG9yc1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLnBsYXlhYmxlc1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLmludGVyYWN0aW9uUGxheWVyc1Byb3ZpZGVycyxcbiAgICAgICAgICAgIC4uLmZvcm1hdHRlcnNQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi5leHByZXNzaW9uRXF1YWxpdHlDb21wYXJlcnNQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi50eXBlRXhwbG9yZXJzUHJvdmlkZXJzLFxuICAgICAgICAgICAgLi4ubW9ja0NvcmVQcm92aWRlcnMsXG4gICAgICAgICAgICAuLi50aGlzLnByb3ZpZGVycyxcbiAgICAgICAgXTtcbiAgICB9XG59XG4iXX0=