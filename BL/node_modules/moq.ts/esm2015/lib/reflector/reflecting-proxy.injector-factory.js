import { Injector } from "../static.injector/injector";
import { ReflectingProxyFactory } from "./reflecting-proxy.factory";
import { GetReflectorTrap } from "./traps/get.reflector-trap";
import { SetReflectorTrap } from "./traps/set.reflector-trap";
import { ApplyReflectorTrap } from "./traps/apply.reflector-trap";
import { HasReflectorTrap } from "./traps/has.reflector-trap";
import { ConstructReflectorTrap } from "./traps/construct.reflector-trap";
import { APPLY_RETURN_VALUE, CONSTRUCT_RETURN_VALUE, EXPRESSIONS, GET_RETURN_VALUE } from "./expression-reflector";
export class ReflectingProxyInjectorFactory {
    create(options = { providers: [] }) {
        const providers = [
            { provide: EXPRESSIONS, useValue: [], deps: [] },
            { provide: ReflectingProxyFactory, useClass: ReflectingProxyFactory, deps: [Injector] },
            { provide: GetReflectorTrap, useClass: GetReflectorTrap, deps: [GET_RETURN_VALUE, EXPRESSIONS] },
            { provide: GET_RETURN_VALUE, useExisting: ReflectingProxyFactory, deps: [] },
            { provide: SetReflectorTrap, useClass: SetReflectorTrap, deps: [EXPRESSIONS] },
            { provide: ApplyReflectorTrap, useClass: ApplyReflectorTrap, deps: [APPLY_RETURN_VALUE, EXPRESSIONS] },
            { provide: APPLY_RETURN_VALUE, useExisting: ReflectingProxyFactory, deps: [] },
            { provide: HasReflectorTrap, useClass: HasReflectorTrap, deps: [EXPRESSIONS] },
            {
                provide: ConstructReflectorTrap,
                useClass: ConstructReflectorTrap,
                deps: [CONSTRUCT_RETURN_VALUE, EXPRESSIONS]
            },
            { provide: CONSTRUCT_RETURN_VALUE, useExisting: ReflectingProxyFactory, deps: [] },
            ...options.providers
        ];
        return Injector.create({ providers });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmbGVjdGluZy1wcm94eS5pbmplY3Rvci1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy9saWIvcmVmbGVjdG9yL3JlZmxlY3RpbmctcHJveHkuaW5qZWN0b3ItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDcEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFMUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLHNCQUFzQixFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRW5ILE1BQU0sT0FBTyw4QkFBOEI7SUFDdkMsTUFBTSxDQUFDLFVBQTJDLEVBQUMsU0FBUyxFQUFFLEVBQUUsRUFBQztRQUM3RCxNQUFNLFNBQVMsR0FBRztZQUNkLEVBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUM7WUFDOUMsRUFBQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFDO1lBQ3JGLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsRUFBQztZQUM5RixFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztZQUMxRSxFQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUM7WUFDNUUsRUFBQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxFQUFDO1lBQ3BHLEVBQUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO1lBQzVFLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBQztZQUM1RTtnQkFDSSxPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxXQUFXLENBQUM7YUFDOUM7WUFDRCxFQUFDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztZQUNoRixHQUFHLE9BQU8sQ0FBQyxTQUFTO1NBQ3ZCLENBQUM7UUFDRixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yIH0gZnJvbSBcIi4uL3N0YXRpYy5pbmplY3Rvci9pbmplY3RvclwiO1xuaW1wb3J0IHsgUmVmbGVjdGluZ1Byb3h5RmFjdG9yeSB9IGZyb20gXCIuL3JlZmxlY3RpbmctcHJveHkuZmFjdG9yeVwiO1xuaW1wb3J0IHsgR2V0UmVmbGVjdG9yVHJhcCB9IGZyb20gXCIuL3RyYXBzL2dldC5yZWZsZWN0b3ItdHJhcFwiO1xuaW1wb3J0IHsgU2V0UmVmbGVjdG9yVHJhcCB9IGZyb20gXCIuL3RyYXBzL3NldC5yZWZsZWN0b3ItdHJhcFwiO1xuaW1wb3J0IHsgQXBwbHlSZWZsZWN0b3JUcmFwIH0gZnJvbSBcIi4vdHJhcHMvYXBwbHkucmVmbGVjdG9yLXRyYXBcIjtcbmltcG9ydCB7IEhhc1JlZmxlY3RvclRyYXAgfSBmcm9tIFwiLi90cmFwcy9oYXMucmVmbGVjdG9yLXRyYXBcIjtcbmltcG9ydCB7IENvbnN0cnVjdFJlZmxlY3RvclRyYXAgfSBmcm9tIFwiLi90cmFwcy9jb25zdHJ1Y3QucmVmbGVjdG9yLXRyYXBcIjtcbmltcG9ydCB7IFN0YXRpY1Byb3ZpZGVyIH0gZnJvbSBcIi4uL3N0YXRpYy5pbmplY3Rvci9pbnRlcmZhY2UvcHJvdmlkZXJcIjtcbmltcG9ydCB7IEFQUExZX1JFVFVSTl9WQUxVRSwgQ09OU1RSVUNUX1JFVFVSTl9WQUxVRSwgRVhQUkVTU0lPTlMsIEdFVF9SRVRVUk5fVkFMVUUgfSBmcm9tIFwiLi9leHByZXNzaW9uLXJlZmxlY3RvclwiO1xuXG5leHBvcnQgY2xhc3MgUmVmbGVjdGluZ1Byb3h5SW5qZWN0b3JGYWN0b3J5IHtcbiAgICBjcmVhdGUob3B0aW9uczogeyBwcm92aWRlcnM6IFN0YXRpY1Byb3ZpZGVyW10gfSA9IHtwcm92aWRlcnM6IFtdfSkge1xuICAgICAgICBjb25zdCBwcm92aWRlcnMgPSBbXG4gICAgICAgICAgICB7cHJvdmlkZTogRVhQUkVTU0lPTlMsIHVzZVZhbHVlOiBbXSwgZGVwczogW119LFxuICAgICAgICAgICAge3Byb3ZpZGU6IFJlZmxlY3RpbmdQcm94eUZhY3RvcnksIHVzZUNsYXNzOiBSZWZsZWN0aW5nUHJveHlGYWN0b3J5LCBkZXBzOiBbSW5qZWN0b3JdfSxcbiAgICAgICAgICAgIHtwcm92aWRlOiBHZXRSZWZsZWN0b3JUcmFwLCB1c2VDbGFzczogR2V0UmVmbGVjdG9yVHJhcCwgZGVwczogW0dFVF9SRVRVUk5fVkFMVUUsIEVYUFJFU1NJT05TXX0sXG4gICAgICAgICAgICB7cHJvdmlkZTogR0VUX1JFVFVSTl9WQUxVRSwgdXNlRXhpc3Rpbmc6IFJlZmxlY3RpbmdQcm94eUZhY3RvcnksIGRlcHM6IFtdfSxcbiAgICAgICAgICAgIHtwcm92aWRlOiBTZXRSZWZsZWN0b3JUcmFwLCB1c2VDbGFzczogU2V0UmVmbGVjdG9yVHJhcCwgZGVwczogW0VYUFJFU1NJT05TXX0sXG4gICAgICAgICAgICB7cHJvdmlkZTogQXBwbHlSZWZsZWN0b3JUcmFwLCB1c2VDbGFzczogQXBwbHlSZWZsZWN0b3JUcmFwLCBkZXBzOiBbQVBQTFlfUkVUVVJOX1ZBTFVFLCBFWFBSRVNTSU9OU119LFxuICAgICAgICAgICAge3Byb3ZpZGU6IEFQUExZX1JFVFVSTl9WQUxVRSwgdXNlRXhpc3Rpbmc6IFJlZmxlY3RpbmdQcm94eUZhY3RvcnksIGRlcHM6IFtdfSxcbiAgICAgICAgICAgIHtwcm92aWRlOiBIYXNSZWZsZWN0b3JUcmFwLCB1c2VDbGFzczogSGFzUmVmbGVjdG9yVHJhcCwgZGVwczogW0VYUFJFU1NJT05TXX0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcHJvdmlkZTogQ29uc3RydWN0UmVmbGVjdG9yVHJhcCxcbiAgICAgICAgICAgICAgICB1c2VDbGFzczogQ29uc3RydWN0UmVmbGVjdG9yVHJhcCxcbiAgICAgICAgICAgICAgICBkZXBzOiBbQ09OU1RSVUNUX1JFVFVSTl9WQUxVRSwgRVhQUkVTU0lPTlNdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge3Byb3ZpZGU6IENPTlNUUlVDVF9SRVRVUk5fVkFMVUUsIHVzZUV4aXN0aW5nOiBSZWZsZWN0aW5nUHJveHlGYWN0b3J5LCBkZXBzOiBbXX0sXG4gICAgICAgICAgICAuLi5vcHRpb25zLnByb3ZpZGVyc1xuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gSW5qZWN0b3IuY3JlYXRlKHtwcm92aWRlcnN9KTtcbiAgICB9XG59XG4iXX0=