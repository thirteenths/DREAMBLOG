/**
 * This class reflects an expression to an expression tree representation.
 * async/await expressions are reflected in shellow mode.
 *
 * For more examples check
 * [unit tests for this class]
 * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/full.expression-reflector.spec.ts)
 */
export class CompositeExpressionReflector {
    constructor(asyncExpressionDetector, syncExpressionReflector, asyncExpressionReflector) {
        this.asyncExpressionDetector = asyncExpressionDetector;
        this.syncExpressionReflector = syncExpressionReflector;
        this.asyncExpressionReflector = asyncExpressionReflector;
    }
    /**
     * Reflects the provided code as an expression tree.
     */
    reflect(expression) {
        return this.asyncExpressionDetector.isAsync(expression)
            ? this.asyncExpressionReflector.reflect(expression)
            : this.syncExpressionReflector.reflect(expression);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zaXRlLWV4cHJlc3Npb24ucmVmbGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy9saWIvcmVmbGVjdG9yL2NvbXBvc2l0ZS1leHByZXNzaW9uLnJlZmxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUNyQyxZQUNxQix1QkFBZ0QsRUFDaEQsdUJBQWdELEVBQ2hELHdCQUFrRDtRQUZsRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBQ2hELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFDaEQsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtJQUN2RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxPQUFPLENBQUksVUFBMEI7UUFDeEMsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztZQUNuRCxDQUFDLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFDbkQsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwcmVzc2lvbnMgfSBmcm9tIFwiLi9leHByZXNzaW9uc1wiO1xuaW1wb3J0IHsgRXhwcmVzc2lvblJlZmxlY3RvciwgSUV4cHJlc3Npb24gfSBmcm9tIFwiLi9leHByZXNzaW9uLXJlZmxlY3RvclwiO1xuaW1wb3J0IHsgQXN5bmNFeHByZXNzaW9uRGV0ZWN0b3IgfSBmcm9tIFwiLi9hc3luYy1leHByZXNzaW9uLmRldGVjdG9yXCI7XG5pbXBvcnQgeyBBc3luY0V4cHJlc3Npb25SZWZsZWN0b3IgfSBmcm9tIFwiLi9hc3luYy1leHByZXNzaW9uLnJlZmxlY3RvclwiO1xuaW1wb3J0IHsgU3luY0V4cHJlc3Npb25SZWZsZWN0b3IgfSBmcm9tIFwiLi9zeW5jLWV4cHJlc3Npb24ucmVmbGVjdG9yXCI7XG5cbi8qKlxuICogVGhpcyBjbGFzcyByZWZsZWN0cyBhbiBleHByZXNzaW9uIHRvIGFuIGV4cHJlc3Npb24gdHJlZSByZXByZXNlbnRhdGlvbi5cbiAqIGFzeW5jL2F3YWl0IGV4cHJlc3Npb25zIGFyZSByZWZsZWN0ZWQgaW4gc2hlbGxvdyBtb2RlLlxuICpcbiAqIEZvciBtb3JlIGV4YW1wbGVzIGNoZWNrXG4gKiBbdW5pdCB0ZXN0cyBmb3IgdGhpcyBjbGFzc11cbiAqIChodHRwczovL2dpdGh1Yi5jb20vZHZhYnV6eWFyb3YvbW9xLnRzL2Jsb2IvbWFzdGVyL3Byb2plY3RzL21vcS9zcmMvbGliL3JlZmxlY3Rvci9mdWxsLmV4cHJlc3Npb24tcmVmbGVjdG9yLnNwZWMudHMpXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wb3NpdGVFeHByZXNzaW9uUmVmbGVjdG9yIGltcGxlbWVudHMgRXhwcmVzc2lvblJlZmxlY3RvciB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgYXN5bmNFeHByZXNzaW9uRGV0ZWN0b3I6IEFzeW5jRXhwcmVzc2lvbkRldGVjdG9yLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN5bmNFeHByZXNzaW9uUmVmbGVjdG9yOiBTeW5jRXhwcmVzc2lvblJlZmxlY3RvcixcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBhc3luY0V4cHJlc3Npb25SZWZsZWN0b3I6IEFzeW5jRXhwcmVzc2lvblJlZmxlY3Rvcikge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZmxlY3RzIHRoZSBwcm92aWRlZCBjb2RlIGFzIGFuIGV4cHJlc3Npb24gdHJlZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVmbGVjdDxUPihleHByZXNzaW9uOiBJRXhwcmVzc2lvbjxUPik6IEV4cHJlc3Npb25zPFQ+W10ge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3luY0V4cHJlc3Npb25EZXRlY3Rvci5pc0FzeW5jKGV4cHJlc3Npb24pXG4gICAgICAgICAgICA/IHRoaXMuYXN5bmNFeHByZXNzaW9uUmVmbGVjdG9yLnJlZmxlY3QoZXhwcmVzc2lvbilcbiAgICAgICAgICAgIDogdGhpcy5zeW5jRXhwcmVzc2lvblJlZmxlY3Rvci5yZWZsZWN0KGV4cHJlc3Npb24pO1xuICAgIH1cbn1cbiJdfQ==