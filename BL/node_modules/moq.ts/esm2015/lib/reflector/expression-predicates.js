/**
 * This class allows to express wide range of cases in an expression.
 * You can use it with setups or verifies methods.
 *
 * @example
 * ```typescript
 *
 *  const value = 'value';
 *  const object = new Mock<Function>()
 *  .setup(instance => instance(1))
 *  .returns(value)
 *  .setup(instance => instance(It.Is(param => param > 0 && param < 2))
 *  .returns(value)
 *  .setup(instance => instance(It.IsAny())
 *  .returns(value)
 *  .object();
 *
 *  const actual = object(1);
 *
 *  expect(actual).toBe(value);
 * ```
 *
 * This class could be used not only for args matching, but also for function names, property names and so on.
 *
 * @example
 * ```typescript
 *
 * const object = new Mock<ITestObject>()
 * // the expression dynamically checks the property name that is being read
 * .setup(instance => It.Is((expression: GetPropertyExpression) => expression.name === 'property'))
 * .returns(value)
 * .object();
 *
 * const object = new Mock<ITestObject>()
 * //denis any write operation on the property
 * .setup(instance => { instance.property = It.IsAny()})
 * // true - allow, false - deny
 * .returns(false)
 * .object();
 *
 * const object = new Mock<ITestObject>()
 * .setup(instance => It.Is((expression: NamedMethodExpression) => expression.name === 'methodName' && expression.args[0] === 1))
 * .returns(value)
 * .object();
 *
 * // how to use with verify
 * mock.verify(instance => instance.method(It.Is(a => a === 2)));
 * ```
 */
export class It {
    constructor(predicate) {
        this.predicate = predicate;
    }
    /**
     * This factory method returns an expression that matches custom cases.
     *
     * @example
     * ```typescript
     *
     *  const value = 'value';
     *  const object = new Mock<Function>()
     *  .setup(instance => instance(It.Is(param => param > 0 && param < 2))
     *  .returns(value)
     *  .object();
     *
     *  const actual = object(only_values_between_0_and_2_will_trigger_the_setup);
     *
     *  expect(actual).toBe(value);
     * ```
     */
    static Is(predicate) {
        return new It(predicate);
    }
    /**
     * This factory method returns a wildcat expression that matches any value.
     *
     * @example
     * ```typescript
     *
     *  const value = 'value';
     *  const object = new Mock<Function>()
     *  .setup(instance => instance(It.IsAny())
     *  .returns(value)
     *  .object();
     *
     *  const actual = object(any_value_will_trigger_the_setup);
     *
     *  expect(actual).toBe(value);
     * ```
     */
    static IsAny() {
        return new It(It.isAnyPredicate);
    }
    /**
     * Exams if the instance matches the predicate.
     */
    test(instance) {
        try {
            const result = this.predicate(instance);
            return result === true || result === undefined;
        }
        catch (e) {
            return false;
        }
    }
}
It.isAnyPredicate = () => true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1wcmVkaWNhdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy9saWIvcmVmbGVjdG9yL2V4cHJlc3Npb24tcHJlZGljYXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBZ0RHO0FBQ0gsTUFBTSxPQUFPLEVBQUU7SUFDWCxZQUE0QixTQUF3QjtRQUF4QixjQUFTLEdBQVQsU0FBUyxDQUFlO0lBRXBELENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7OztPQWdCRztJQUNJLE1BQU0sQ0FBQyxFQUFFLENBQUksU0FBd0I7UUFDeEMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7T0FnQkc7SUFDSSxNQUFNLENBQUMsS0FBSztRQUNmLE9BQU8sSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFJRDs7T0FFRztJQUNJLElBQUksQ0FBQyxRQUFZO1FBQ3BCLElBQUk7WUFDQSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssU0FBUyxDQUFDO1NBQ2xEO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNMLENBQUM7O0FBWnVCLGlCQUFjLEdBQUcsR0FBWSxFQUFFLENBQUMsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyplc2xpbnQgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uOiBcIm9mZlwiKi9cbmV4cG9ydCB0eXBlIElQcmVkaWNhdGU8VD4gPSAoaW5zdGFuY2U6IFQpID0+IGJvb2xlYW47XG5cbi8qKlxuICogVGhpcyBjbGFzcyBhbGxvd3MgdG8gZXhwcmVzcyB3aWRlIHJhbmdlIG9mIGNhc2VzIGluIGFuIGV4cHJlc3Npb24uXG4gKiBZb3UgY2FuIHVzZSBpdCB3aXRoIHNldHVwcyBvciB2ZXJpZmllcyBtZXRob2RzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKlxuICogIGNvbnN0IHZhbHVlID0gJ3ZhbHVlJztcbiAqICBjb25zdCBvYmplY3QgPSBuZXcgTW9jazxGdW5jdGlvbj4oKVxuICogIC5zZXR1cChpbnN0YW5jZSA9PiBpbnN0YW5jZSgxKSlcbiAqICAucmV0dXJucyh2YWx1ZSlcbiAqICAuc2V0dXAoaW5zdGFuY2UgPT4gaW5zdGFuY2UoSXQuSXMocGFyYW0gPT4gcGFyYW0gPiAwICYmIHBhcmFtIDwgMikpXG4gKiAgLnJldHVybnModmFsdWUpXG4gKiAgLnNldHVwKGluc3RhbmNlID0+IGluc3RhbmNlKEl0LklzQW55KCkpXG4gKiAgLnJldHVybnModmFsdWUpXG4gKiAgLm9iamVjdCgpO1xuICpcbiAqICBjb25zdCBhY3R1YWwgPSBvYmplY3QoMSk7XG4gKlxuICogIGV4cGVjdChhY3R1YWwpLnRvQmUodmFsdWUpO1xuICogYGBgXG4gKlxuICogVGhpcyBjbGFzcyBjb3VsZCBiZSB1c2VkIG5vdCBvbmx5IGZvciBhcmdzIG1hdGNoaW5nLCBidXQgYWxzbyBmb3IgZnVuY3Rpb24gbmFtZXMsIHByb3BlcnR5IG5hbWVzIGFuZCBzbyBvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICpcbiAqIGNvbnN0IG9iamVjdCA9IG5ldyBNb2NrPElUZXN0T2JqZWN0PigpXG4gKiAvLyB0aGUgZXhwcmVzc2lvbiBkeW5hbWljYWxseSBjaGVja3MgdGhlIHByb3BlcnR5IG5hbWUgdGhhdCBpcyBiZWluZyByZWFkXG4gKiAuc2V0dXAoaW5zdGFuY2UgPT4gSXQuSXMoKGV4cHJlc3Npb246IEdldFByb3BlcnR5RXhwcmVzc2lvbikgPT4gZXhwcmVzc2lvbi5uYW1lID09PSAncHJvcGVydHknKSlcbiAqIC5yZXR1cm5zKHZhbHVlKVxuICogLm9iamVjdCgpO1xuICpcbiAqIGNvbnN0IG9iamVjdCA9IG5ldyBNb2NrPElUZXN0T2JqZWN0PigpXG4gKiAvL2RlbmlzIGFueSB3cml0ZSBvcGVyYXRpb24gb24gdGhlIHByb3BlcnR5XG4gKiAuc2V0dXAoaW5zdGFuY2UgPT4geyBpbnN0YW5jZS5wcm9wZXJ0eSA9IEl0LklzQW55KCl9KVxuICogLy8gdHJ1ZSAtIGFsbG93LCBmYWxzZSAtIGRlbnlcbiAqIC5yZXR1cm5zKGZhbHNlKVxuICogLm9iamVjdCgpO1xuICpcbiAqIGNvbnN0IG9iamVjdCA9IG5ldyBNb2NrPElUZXN0T2JqZWN0PigpXG4gKiAuc2V0dXAoaW5zdGFuY2UgPT4gSXQuSXMoKGV4cHJlc3Npb246IE5hbWVkTWV0aG9kRXhwcmVzc2lvbikgPT4gZXhwcmVzc2lvbi5uYW1lID09PSAnbWV0aG9kTmFtZScgJiYgZXhwcmVzc2lvbi5hcmdzWzBdID09PSAxKSlcbiAqIC5yZXR1cm5zKHZhbHVlKVxuICogLm9iamVjdCgpO1xuICpcbiAqIC8vIGhvdyB0byB1c2Ugd2l0aCB2ZXJpZnlcbiAqIG1vY2sudmVyaWZ5KGluc3RhbmNlID0+IGluc3RhbmNlLm1ldGhvZChJdC5JcyhhID0+IGEgPT09IDIpKSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEl0PFA+IHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgcHJlZGljYXRlOiBJUHJlZGljYXRlPFA+KSB7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZhY3RvcnkgbWV0aG9kIHJldHVybnMgYW4gZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgY3VzdG9tIGNhc2VzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICpcbiAgICAgKiAgY29uc3QgdmFsdWUgPSAndmFsdWUnO1xuICAgICAqICBjb25zdCBvYmplY3QgPSBuZXcgTW9jazxGdW5jdGlvbj4oKVxuICAgICAqICAuc2V0dXAoaW5zdGFuY2UgPT4gaW5zdGFuY2UoSXQuSXMocGFyYW0gPT4gcGFyYW0gPiAwICYmIHBhcmFtIDwgMikpXG4gICAgICogIC5yZXR1cm5zKHZhbHVlKVxuICAgICAqICAub2JqZWN0KCk7XG4gICAgICpcbiAgICAgKiAgY29uc3QgYWN0dWFsID0gb2JqZWN0KG9ubHlfdmFsdWVzX2JldHdlZW5fMF9hbmRfMl93aWxsX3RyaWdnZXJfdGhlX3NldHVwKTtcbiAgICAgKlxuICAgICAqICBleHBlY3QoYWN0dWFsKS50b0JlKHZhbHVlKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIElzPFQ+KHByZWRpY2F0ZTogSVByZWRpY2F0ZTxUPik6IEl0PFQ+IHwgYW55IHtcbiAgICAgICAgcmV0dXJuIG5ldyBJdChwcmVkaWNhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmFjdG9yeSBtZXRob2QgcmV0dXJucyBhIHdpbGRjYXQgZXhwcmVzc2lvbiB0aGF0IG1hdGNoZXMgYW55IHZhbHVlLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICpcbiAgICAgKiAgY29uc3QgdmFsdWUgPSAndmFsdWUnO1xuICAgICAqICBjb25zdCBvYmplY3QgPSBuZXcgTW9jazxGdW5jdGlvbj4oKVxuICAgICAqICAuc2V0dXAoaW5zdGFuY2UgPT4gaW5zdGFuY2UoSXQuSXNBbnkoKSlcbiAgICAgKiAgLnJldHVybnModmFsdWUpXG4gICAgICogIC5vYmplY3QoKTtcbiAgICAgKlxuICAgICAqICBjb25zdCBhY3R1YWwgPSBvYmplY3QoYW55X3ZhbHVlX3dpbGxfdHJpZ2dlcl90aGVfc2V0dXApO1xuICAgICAqXG4gICAgICogIGV4cGVjdChhY3R1YWwpLnRvQmUodmFsdWUpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgSXNBbnk8VD4oKTogSXQ8VD4gfCBhbnkge1xuICAgICAgICByZXR1cm4gbmV3IEl0KEl0LmlzQW55UHJlZGljYXRlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBpc0FueVByZWRpY2F0ZSA9ICgpOiBib29sZWFuID0+IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBFeGFtcyBpZiB0aGUgaW5zdGFuY2UgbWF0Y2hlcyB0aGUgcHJlZGljYXRlLlxuICAgICAqL1xuICAgIHB1YmxpYyB0ZXN0KGluc3RhbmNlPzogUCk6IGJvb2xlYW4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wcmVkaWNhdGUoaW5zdGFuY2UpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdHJ1ZSB8fCByZXN1bHQgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19