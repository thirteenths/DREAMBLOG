import { EXPRESSIONS } from "./expression-reflector";
import { ReflectingProxyFactory } from "./reflecting-proxy.factory";
/**
 * This class reflects an async expression to an expression tree representation.
 * For more examples check
 * [unit tests for this class]
 * (https://github.com/dvabuzyarov/moq.ts/blob/master/projects/moq/src/lib/reflector/async.expression-reflector.spec.ts)
 */
export class AsyncExpressionReflector {
    constructor(injectorFactory) {
        this.injectorFactory = injectorFactory;
    }
    /**
     * Reflects the provided async code as an expression tree.
     */
    reflect(expression) {
        const injector = this.injectorFactory.create();
        const proxyFactory = injector.get(ReflectingProxyFactory);
        const proxy = proxyFactory.create();
        expression(proxy);
        return injector.get(EXPRESSIONS);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmMtZXhwcmVzc2lvbi5yZWZsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9yZWZsZWN0b3IvYXN5bmMtZXhwcmVzc2lvbi5yZWZsZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUF1QixXQUFXLEVBQWUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUdwRTs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyx3QkFBd0I7SUFDakMsWUFBNkIsZUFBb0Q7UUFBcEQsb0JBQWUsR0FBZixlQUFlLENBQXFDO0lBQ2pGLENBQUM7SUFFRDs7T0FFRztJQUNJLE9BQU8sQ0FBSSxVQUEwQjtRQUV4QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQy9DLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUMxRCxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDcEMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWxCLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHByZXNzaW9ucyB9IGZyb20gXCIuL2V4cHJlc3Npb25zXCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uUmVmbGVjdG9yLCBFWFBSRVNTSU9OUywgSUV4cHJlc3Npb24gfSBmcm9tIFwiLi9leHByZXNzaW9uLXJlZmxlY3RvclwiO1xuaW1wb3J0IHsgUmVmbGVjdGluZ1Byb3h5RmFjdG9yeSB9IGZyb20gXCIuL3JlZmxlY3RpbmctcHJveHkuZmFjdG9yeVwiO1xuaW1wb3J0IHsgQXN5bmNSZWZsZWN0aW5nUHJveHlJbmplY3RvckZhY3RvcnkgfSBmcm9tIFwiLi9hc3luYy1yZWZsZWN0aW5nLXByb3h5LmluamVjdG9yLWZhY3RvcnlcIjtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlZmxlY3RzIGFuIGFzeW5jIGV4cHJlc3Npb24gdG8gYW4gZXhwcmVzc2lvbiB0cmVlIHJlcHJlc2VudGF0aW9uLlxuICogRm9yIG1vcmUgZXhhbXBsZXMgY2hlY2tcbiAqIFt1bml0IHRlc3RzIGZvciB0aGlzIGNsYXNzXVxuICogKGh0dHBzOi8vZ2l0aHViLmNvbS9kdmFidXp5YXJvdi9tb3EudHMvYmxvYi9tYXN0ZXIvcHJvamVjdHMvbW9xL3NyYy9saWIvcmVmbGVjdG9yL2FzeW5jLmV4cHJlc3Npb24tcmVmbGVjdG9yLnNwZWMudHMpXG4gKi9cbmV4cG9ydCBjbGFzcyBBc3luY0V4cHJlc3Npb25SZWZsZWN0b3IgaW1wbGVtZW50cyBFeHByZXNzaW9uUmVmbGVjdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGluamVjdG9yRmFjdG9yeTogQXN5bmNSZWZsZWN0aW5nUHJveHlJbmplY3RvckZhY3RvcnkpIHtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWZsZWN0cyB0aGUgcHJvdmlkZWQgYXN5bmMgY29kZSBhcyBhbiBleHByZXNzaW9uIHRyZWUuXG4gICAgICovXG4gICAgcHVibGljIHJlZmxlY3Q8VD4oZXhwcmVzc2lvbjogSUV4cHJlc3Npb248VD4pOiBFeHByZXNzaW9uczxUPltdIHtcblxuICAgICAgICBjb25zdCBpbmplY3RvciA9IHRoaXMuaW5qZWN0b3JGYWN0b3J5LmNyZWF0ZSgpO1xuICAgICAgICBjb25zdCBwcm94eUZhY3RvcnkgPSBpbmplY3Rvci5nZXQoUmVmbGVjdGluZ1Byb3h5RmFjdG9yeSk7XG4gICAgICAgIGNvbnN0IHByb3h5ID0gcHJveHlGYWN0b3J5LmNyZWF0ZSgpO1xuICAgICAgICBleHByZXNzaW9uKHByb3h5KTtcblxuICAgICAgICByZXR1cm4gaW5qZWN0b3IuZ2V0KEVYUFJFU1NJT05TKTtcbiAgICB9XG59XG4iXX0=