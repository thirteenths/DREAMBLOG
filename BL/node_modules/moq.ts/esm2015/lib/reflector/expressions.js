export class Expression {
    constructor(name, args) {
        this.name = name;
        this.args = args;
    }
}
/**
 * This class represents an invocation of an instance method.
 * It provides access to the name of it and the parameters.
 */
export class MethodExpression extends Expression {
    constructor(name, args) {
        super(name, args);
    }
}
/**
 * This class represents an invocation of a function.
 * It provides access to the parameters.
 */
export class FunctionExpression extends Expression {
    constructor(args) {
        super(undefined, args);
    }
}
/**
 * This class represents a property accessing.
 * It provides access to the name of property.
 */
export class GetPropertyExpression extends Expression {
    constructor(name) {
        super(name, undefined);
    }
}
/**
 * This class represents a property write interaction.
 * It provides access to the name of property and the value.
 */
export class SetPropertyExpression extends Expression {
    constructor(name, value) {
        super(name, [value]);
        this.value = value;
    }
}
/**
 * This class represents applying of [in operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in).
 * It provides access to the name of property.
 */
export class InOperatorExpression extends Expression {
    constructor(name) {
        super(name, undefined);
    }
}
/**
 * This class represents applying of [new operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new).
 * It provides access to the arguments of the constructor.
 */
export class NewOperatorExpression extends Expression {
    constructor(args) {
        super(undefined, args);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9yZWZsZWN0b3IvZXhwcmVzc2lvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxPQUFnQixVQUFVO0lBQzVCLFlBQ29CLElBQWlCLEVBQ2pCLElBQVc7UUFEWCxTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ2pCLFNBQUksR0FBSixJQUFJLENBQU87SUFFL0IsQ0FBQztDQUNKO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLGdCQUFpQixTQUFRLFVBQVU7SUFDNUMsWUFBWSxJQUFpQixFQUNqQixJQUFXO1FBQ25CLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztDQUNKO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFVBQVU7SUFDOUMsWUFBWSxJQUFXO1FBQ25CLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNKO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFVBQVU7SUFDakQsWUFBWSxJQUFpQjtRQUN6QixLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDSjtBQUVEOzs7R0FHRztBQUNILE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxVQUFVO0lBQ2pELFlBQVksSUFBaUIsRUFDRCxLQUFVO1FBQ2xDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBREcsVUFBSyxHQUFMLEtBQUssQ0FBSztJQUV0QyxDQUFDO0NBQ0o7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsVUFBVTtJQUNoRCxZQUFZLElBQWlCO1FBQ3pCLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNKO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFVBQVU7SUFDakQsWUFBWSxJQUFXO1FBQ25CLEtBQUssQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLyplc2xpbnQtZGlzYWJsZSBtYXgtY2xhc3Nlcy1wZXItZmlsZSovXG5pbXBvcnQgeyBJdCB9IGZyb20gXCIuL2V4cHJlc3Npb24tcHJlZGljYXRlc1wiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRXhwcmVzc2lvbiB7XG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogUHJvcGVydHlLZXksXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBhcmdzOiBhbnlbXSkge1xuXG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhbiBpbnZvY2F0aW9uIG9mIGFuIGluc3RhbmNlIG1ldGhvZC5cbiAqIEl0IHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgbmFtZSBvZiBpdCBhbmQgdGhlIHBhcmFtZXRlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRob2RFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gICAgY29uc3RydWN0b3IobmFtZTogUHJvcGVydHlLZXksXG4gICAgICAgICAgICAgICAgYXJnczogYW55W10pIHtcbiAgICAgICAgc3VwZXIobmFtZSwgYXJncyk7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhbiBpbnZvY2F0aW9uIG9mIGEgZnVuY3Rpb24uXG4gKiBJdCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIHBhcmFtZXRlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbkV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzOiBhbnlbXSkge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBwcm9wZXJ0eSBhY2Nlc3NpbmcuXG4gKiBJdCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIG5hbWUgb2YgcHJvcGVydHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBHZXRQcm9wZXJ0eUV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBQcm9wZXJ0eUtleSkge1xuICAgICAgICBzdXBlcihuYW1lLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBwcm9wZXJ0eSB3cml0ZSBpbnRlcmFjdGlvbi5cbiAqIEl0IHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgbmFtZSBvZiBwcm9wZXJ0eSBhbmQgdGhlIHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgU2V0UHJvcGVydHlFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7XG4gICAgY29uc3RydWN0b3IobmFtZTogUHJvcGVydHlLZXksXG4gICAgICAgICAgICAgICAgcHVibGljIHJlYWRvbmx5IHZhbHVlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIobmFtZSwgW3ZhbHVlXSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhcHBseWluZyBvZiBbaW4gb3BlcmF0b3JdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9pbikuXG4gKiBJdCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIG5hbWUgb2YgcHJvcGVydHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbk9wZXJhdG9yRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWU6IFByb3BlcnR5S2V5KSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhcHBseWluZyBvZiBbbmV3IG9wZXJhdG9yXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvbmV3KS5cbiAqIEl0IHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgYXJndW1lbnRzIG9mIHRoZSBjb25zdHJ1Y3Rvci5cbiAqL1xuZXhwb3J0IGNsYXNzIE5ld09wZXJhdG9yRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24ge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3M6IGFueVtdKSB7XG4gICAgICAgIHN1cGVyKHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfVxufVxuXG4vKipcbiAqIFVuaW9uIG9mIHRoZSBleHByZXNzaW9ucyBhbmQgSXQgdHlwZS5cbiAqL1xuZXhwb3J0IHR5cGUgRXhwcmVzc2lvbnM8VD4gPVxuICAgIEZ1bmN0aW9uRXhwcmVzc2lvblxuICAgIHwgR2V0UHJvcGVydHlFeHByZXNzaW9uXG4gICAgfCBTZXRQcm9wZXJ0eUV4cHJlc3Npb25cbiAgICB8IEluT3BlcmF0b3JFeHByZXNzaW9uXG4gICAgfCBNZXRob2RFeHByZXNzaW9uXG4gICAgfCBOZXdPcGVyYXRvckV4cHJlc3Npb25cbiAgICB8IEl0PFQ+O1xuIl19