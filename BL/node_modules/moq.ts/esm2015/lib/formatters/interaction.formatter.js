import { GetPropertyExpression, InOperatorExpression, FunctionExpression, MethodExpression, NewOperatorExpression, SetPropertyExpression } from "../reflector/expressions";
import { It } from "../reflector/expression-predicates";
/**
 * @hidden
 */
export class InteractionFormatter {
    constructor(getPropertyFormatter, setPropertyFormatter, methodFormatter, namedMethodFormatter, constantFormatter, inOperatorFormatter, newOperatorFormatter) {
        this.getPropertyFormatter = getPropertyFormatter;
        this.setPropertyFormatter = setPropertyFormatter;
        this.methodFormatter = methodFormatter;
        this.namedMethodFormatter = namedMethodFormatter;
        this.constantFormatter = constantFormatter;
        this.inOperatorFormatter = inOperatorFormatter;
        this.newOperatorFormatter = newOperatorFormatter;
    }
    format(interaction) {
        if (interaction instanceof GetPropertyExpression)
            return this.getPropertyFormatter.format(interaction);
        if (interaction instanceof SetPropertyExpression)
            return this.setPropertyFormatter.format(interaction);
        if (interaction instanceof InOperatorExpression)
            return this.inOperatorFormatter.format(interaction);
        if (interaction instanceof FunctionExpression)
            return this.methodFormatter.format(interaction);
        if (interaction instanceof MethodExpression)
            return this.namedMethodFormatter.format(interaction);
        if (interaction instanceof NewOperatorExpression)
            return this.newOperatorFormatter.format(interaction);
        if (interaction instanceof It)
            return this.constantFormatter.format(interaction);
        return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3Rpb24uZm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbW9xL3NyYy9saWIvZm9ybWF0dGVycy9pbnRlcmFjdGlvbi5mb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILHFCQUFxQixFQUNyQixvQkFBb0IsRUFFcEIsa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUFFLHFCQUFxQixFQUN2QyxxQkFBcUIsRUFDeEIsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFTeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sb0JBQW9CO0lBRTdCLFlBQTZCLG9CQUEwQyxFQUMxQyxvQkFBMEMsRUFDMUMsZUFBa0MsRUFDbEMsb0JBQXFDLEVBQ3JDLGlCQUFvQyxFQUNwQyxtQkFBd0MsRUFDeEMsb0JBQTBDO1FBTjFDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFDbEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFpQjtRQUNyQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtJQUV2RSxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQWlDO1FBQzNDLElBQUksV0FBVyxZQUFZLHFCQUFxQjtZQUFFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2RyxJQUFJLFdBQVcsWUFBWSxxQkFBcUI7WUFBRSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkcsSUFBSSxXQUFXLFlBQVksb0JBQW9CO1lBQUUsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JHLElBQUksV0FBVyxZQUFZLGtCQUFrQjtZQUFFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0YsSUFBSSxXQUFXLFlBQVksZ0JBQWdCO1lBQUUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xHLElBQUksV0FBVyxZQUFZLHFCQUFxQjtZQUFFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2RyxJQUFJLFdBQVcsWUFBWSxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWpGLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgR2V0UHJvcGVydHlFeHByZXNzaW9uLFxuICAgIEluT3BlcmF0b3JFeHByZXNzaW9uLFxuICAgIEV4cHJlc3Npb24sXG4gICAgRnVuY3Rpb25FeHByZXNzaW9uLFxuICAgIE1ldGhvZEV4cHJlc3Npb24sIE5ld09wZXJhdG9yRXhwcmVzc2lvbixcbiAgICBTZXRQcm9wZXJ0eUV4cHJlc3Npb25cbn0gZnJvbSBcIi4uL3JlZmxlY3Rvci9leHByZXNzaW9uc1wiO1xuaW1wb3J0IHsgSXQgfSBmcm9tIFwiLi4vcmVmbGVjdG9yL2V4cHJlc3Npb24tcHJlZGljYXRlc1wiO1xuaW1wb3J0IHsgR2V0UHJvcGVydHlGb3JtYXR0ZXIgfSBmcm9tIFwiLi9nZXQtcHJvcGVydHkuZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBTZXRQcm9wZXJ0eUZvcm1hdHRlciB9IGZyb20gXCIuL3NldC1wcm9wZXJ0eS5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IEZ1bmN0aW9uRm9ybWF0dGVyIH0gZnJvbSBcIi4vZnVuY3Rpb24uZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBNZXRob2RGb3JtYXR0ZXIgfSBmcm9tIFwiLi9tZXRob2QuZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBDb25zdGFudEZvcm1hdHRlciB9IGZyb20gXCIuL2NvbnN0YW50LmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgSW5PcGVyYXRvckZvcm1hdHRlciB9IGZyb20gXCIuL2luLW9wZXJhdG9yLmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgTmV3T3BlcmF0b3JGb3JtYXR0ZXIgfSBmcm9tIFwiLi9uZXctb3BlcmF0b3IuZm9ybWF0dGVyXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgSW50ZXJhY3Rpb25Gb3JtYXR0ZXIge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBnZXRQcm9wZXJ0eUZvcm1hdHRlcjogR2V0UHJvcGVydHlGb3JtYXR0ZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzZXRQcm9wZXJ0eUZvcm1hdHRlcjogU2V0UHJvcGVydHlGb3JtYXR0ZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBtZXRob2RGb3JtYXR0ZXI6IEZ1bmN0aW9uRm9ybWF0dGVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbmFtZWRNZXRob2RGb3JtYXR0ZXI6IE1ldGhvZEZvcm1hdHRlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnN0YW50Rm9ybWF0dGVyOiBDb25zdGFudEZvcm1hdHRlcixcbiAgICAgICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGluT3BlcmF0b3JGb3JtYXR0ZXI6IEluT3BlcmF0b3JGb3JtYXR0ZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBuZXdPcGVyYXRvckZvcm1hdHRlcjogTmV3T3BlcmF0b3JGb3JtYXR0ZXIpIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtYXQoaW50ZXJhY3Rpb246IEV4cHJlc3Npb24gfCBJdDxhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGludGVyYWN0aW9uIGluc3RhbmNlb2YgR2V0UHJvcGVydHlFeHByZXNzaW9uKSByZXR1cm4gdGhpcy5nZXRQcm9wZXJ0eUZvcm1hdHRlci5mb3JtYXQoaW50ZXJhY3Rpb24pO1xuICAgICAgICBpZiAoaW50ZXJhY3Rpb24gaW5zdGFuY2VvZiBTZXRQcm9wZXJ0eUV4cHJlc3Npb24pIHJldHVybiB0aGlzLnNldFByb3BlcnR5Rm9ybWF0dGVyLmZvcm1hdChpbnRlcmFjdGlvbik7XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbiBpbnN0YW5jZW9mIEluT3BlcmF0b3JFeHByZXNzaW9uKSByZXR1cm4gdGhpcy5pbk9wZXJhdG9yRm9ybWF0dGVyLmZvcm1hdChpbnRlcmFjdGlvbik7XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbiBpbnN0YW5jZW9mIEZ1bmN0aW9uRXhwcmVzc2lvbikgcmV0dXJuIHRoaXMubWV0aG9kRm9ybWF0dGVyLmZvcm1hdChpbnRlcmFjdGlvbik7XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbiBpbnN0YW5jZW9mIE1ldGhvZEV4cHJlc3Npb24pIHJldHVybiB0aGlzLm5hbWVkTWV0aG9kRm9ybWF0dGVyLmZvcm1hdChpbnRlcmFjdGlvbik7XG4gICAgICAgIGlmIChpbnRlcmFjdGlvbiBpbnN0YW5jZW9mIE5ld09wZXJhdG9yRXhwcmVzc2lvbikgcmV0dXJuIHRoaXMubmV3T3BlcmF0b3JGb3JtYXR0ZXIuZm9ybWF0KGludGVyYWN0aW9uKTtcbiAgICAgICAgaWYgKGludGVyYWN0aW9uIGluc3RhbmNlb2YgSXQpIHJldHVybiB0aGlzLmNvbnN0YW50Rm9ybWF0dGVyLmZvcm1hdChpbnRlcmFjdGlvbik7XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4iXX0=