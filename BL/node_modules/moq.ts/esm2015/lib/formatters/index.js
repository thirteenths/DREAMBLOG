import { VerifyFormatter } from "./verify.formatter";
import { ExpressionsFormatter } from "./expressions.formatter";
import { TrackedExpressionsFormatter } from "./tracked-expressions.formatter";
import { InteractionFormatter } from "./interaction.formatter";
import { SetPropertyFormatter } from "./set-property.formatter";
import { ConstantFormatter } from "./constant.formatter";
import { PropertyKeyFormatter } from "./property-key.formatter";
import { MethodFormatter } from "./method.formatter";
import { FunctionFormatter } from "./function.formatter";
import { InOperatorFormatter } from "./in-operator.formatter";
import { GetPropertyFormatter } from "./get-property.formatter";
import { NewOperatorFormatter } from "./new-operator.formatter";
import { MOCK_OPTIONS } from "../mock-options/mock-options.injection-token";
import { Tracker } from "../tracker/tracker";
/**
 * @hidden
 */
export default [
    {
        provide: VerifyFormatter,
        useClass: VerifyFormatter,
        deps: [ExpressionsFormatter, TrackedExpressionsFormatter, Tracker]
    },
    { provide: TrackedExpressionsFormatter, useClass: TrackedExpressionsFormatter, deps: [InteractionFormatter] },
    { provide: SetPropertyFormatter, useClass: SetPropertyFormatter, deps: [ConstantFormatter, PropertyKeyFormatter] },
    { provide: PropertyKeyFormatter, useClass: PropertyKeyFormatter, deps: [] },
    { provide: MethodFormatter, useClass: MethodFormatter, deps: [ConstantFormatter, PropertyKeyFormatter] },
    { provide: FunctionFormatter, useClass: FunctionFormatter, deps: [ConstantFormatter] },
    { provide: InOperatorFormatter, useClass: InOperatorFormatter, deps: [PropertyKeyFormatter] },
    { provide: GetPropertyFormatter, useClass: GetPropertyFormatter, deps: [PropertyKeyFormatter] },
    { provide: ExpressionsFormatter, useClass: ExpressionsFormatter, deps: [InteractionFormatter, MOCK_OPTIONS] },
    { provide: ConstantFormatter, useClass: ConstantFormatter, deps: [] },
    { provide: NewOperatorFormatter, useClass: NewOperatorFormatter, deps: [ConstantFormatter] },
    {
        provide: InteractionFormatter,
        useClass: InteractionFormatter,
        deps: [
            GetPropertyFormatter,
            SetPropertyFormatter,
            FunctionFormatter,
            MethodFormatter,
            ConstantFormatter,
            InOperatorFormatter,
            NewOperatorFormatter
        ]
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9mb3JtYXR0ZXJzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDekQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU3Qzs7R0FFRztBQUNILGVBQWU7SUFDWDtRQUNJLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLFFBQVEsRUFBRSxlQUFlO1FBQ3pCLElBQUksRUFBRSxDQUFDLG9CQUFvQixFQUFFLDJCQUEyQixFQUFFLE9BQU8sQ0FBQztLQUNyRTtJQUNELEVBQUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFDO0lBQzNHLEVBQUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxvQkFBb0IsQ0FBQyxFQUFDO0lBQ2hILEVBQUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ3pFLEVBQUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLGlCQUFpQixFQUFFLG9CQUFvQixDQUFDLEVBQUM7SUFDdEcsRUFBQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDLEVBQUM7SUFDcEYsRUFBQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLElBQUksRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUM7SUFDM0YsRUFBQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLG9CQUFvQixDQUFDLEVBQUM7SUFDN0YsRUFBQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLG9CQUFvQixFQUFFLElBQUksRUFBRSxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxFQUFDO0lBQzNHLEVBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ25FLEVBQUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFDO0lBQzFGO1FBQ0ksT0FBTyxFQUFFLG9CQUFvQjtRQUM3QixRQUFRLEVBQUUsb0JBQW9CO1FBQzlCLElBQUksRUFBRTtZQUNGLG9CQUFvQjtZQUNwQixvQkFBb0I7WUFDcEIsaUJBQWlCO1lBQ2pCLGVBQWU7WUFDZixpQkFBaUI7WUFDakIsbUJBQW1CO1lBQ25CLG9CQUFvQjtTQUN2QjtLQUNKO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlcmlmeUZvcm1hdHRlciB9IGZyb20gXCIuL3ZlcmlmeS5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IEV4cHJlc3Npb25zRm9ybWF0dGVyIH0gZnJvbSBcIi4vZXhwcmVzc2lvbnMuZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBUcmFja2VkRXhwcmVzc2lvbnNGb3JtYXR0ZXIgfSBmcm9tIFwiLi90cmFja2VkLWV4cHJlc3Npb25zLmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgSW50ZXJhY3Rpb25Gb3JtYXR0ZXIgfSBmcm9tIFwiLi9pbnRlcmFjdGlvbi5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IFNldFByb3BlcnR5Rm9ybWF0dGVyIH0gZnJvbSBcIi4vc2V0LXByb3BlcnR5LmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgQ29uc3RhbnRGb3JtYXR0ZXIgfSBmcm9tIFwiLi9jb25zdGFudC5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IFByb3BlcnR5S2V5Rm9ybWF0dGVyIH0gZnJvbSBcIi4vcHJvcGVydHkta2V5LmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgTWV0aG9kRm9ybWF0dGVyIH0gZnJvbSBcIi4vbWV0aG9kLmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgRnVuY3Rpb25Gb3JtYXR0ZXIgfSBmcm9tIFwiLi9mdW5jdGlvbi5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IEluT3BlcmF0b3JGb3JtYXR0ZXIgfSBmcm9tIFwiLi9pbi1vcGVyYXRvci5mb3JtYXR0ZXJcIjtcbmltcG9ydCB7IEdldFByb3BlcnR5Rm9ybWF0dGVyIH0gZnJvbSBcIi4vZ2V0LXByb3BlcnR5LmZvcm1hdHRlclwiO1xuaW1wb3J0IHsgTmV3T3BlcmF0b3JGb3JtYXR0ZXIgfSBmcm9tIFwiLi9uZXctb3BlcmF0b3IuZm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBNT0NLX09QVElPTlMgfSBmcm9tIFwiLi4vbW9jay1vcHRpb25zL21vY2stb3B0aW9ucy5pbmplY3Rpb24tdG9rZW5cIjtcbmltcG9ydCB7IFRyYWNrZXIgfSBmcm9tIFwiLi4vdHJhY2tlci90cmFja2VyXCI7XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVmYXVsdCBbXG4gICAge1xuICAgICAgICBwcm92aWRlOiBWZXJpZnlGb3JtYXR0ZXIsXG4gICAgICAgIHVzZUNsYXNzOiBWZXJpZnlGb3JtYXR0ZXIsXG4gICAgICAgIGRlcHM6IFtFeHByZXNzaW9uc0Zvcm1hdHRlciwgVHJhY2tlZEV4cHJlc3Npb25zRm9ybWF0dGVyLCBUcmFja2VyXVxuICAgIH0sXG4gICAge3Byb3ZpZGU6IFRyYWNrZWRFeHByZXNzaW9uc0Zvcm1hdHRlciwgdXNlQ2xhc3M6IFRyYWNrZWRFeHByZXNzaW9uc0Zvcm1hdHRlciwgZGVwczogW0ludGVyYWN0aW9uRm9ybWF0dGVyXX0sXG4gICAge3Byb3ZpZGU6IFNldFByb3BlcnR5Rm9ybWF0dGVyLCB1c2VDbGFzczogU2V0UHJvcGVydHlGb3JtYXR0ZXIsIGRlcHM6IFtDb25zdGFudEZvcm1hdHRlciwgUHJvcGVydHlLZXlGb3JtYXR0ZXJdfSxcbiAgICB7cHJvdmlkZTogUHJvcGVydHlLZXlGb3JtYXR0ZXIsIHVzZUNsYXNzOiBQcm9wZXJ0eUtleUZvcm1hdHRlciwgZGVwczogW119LFxuICAgIHtwcm92aWRlOiBNZXRob2RGb3JtYXR0ZXIsIHVzZUNsYXNzOiBNZXRob2RGb3JtYXR0ZXIsIGRlcHM6IFtDb25zdGFudEZvcm1hdHRlciwgUHJvcGVydHlLZXlGb3JtYXR0ZXJdfSxcbiAgICB7cHJvdmlkZTogRnVuY3Rpb25Gb3JtYXR0ZXIsIHVzZUNsYXNzOiBGdW5jdGlvbkZvcm1hdHRlciwgZGVwczogW0NvbnN0YW50Rm9ybWF0dGVyXX0sXG4gICAge3Byb3ZpZGU6IEluT3BlcmF0b3JGb3JtYXR0ZXIsIHVzZUNsYXNzOiBJbk9wZXJhdG9yRm9ybWF0dGVyLCBkZXBzOiBbUHJvcGVydHlLZXlGb3JtYXR0ZXJdfSxcbiAgICB7cHJvdmlkZTogR2V0UHJvcGVydHlGb3JtYXR0ZXIsIHVzZUNsYXNzOiBHZXRQcm9wZXJ0eUZvcm1hdHRlciwgZGVwczogW1Byb3BlcnR5S2V5Rm9ybWF0dGVyXX0sXG4gICAge3Byb3ZpZGU6IEV4cHJlc3Npb25zRm9ybWF0dGVyLCB1c2VDbGFzczogRXhwcmVzc2lvbnNGb3JtYXR0ZXIsIGRlcHM6IFtJbnRlcmFjdGlvbkZvcm1hdHRlciwgTU9DS19PUFRJT05TXX0sXG4gICAge3Byb3ZpZGU6IENvbnN0YW50Rm9ybWF0dGVyLCB1c2VDbGFzczogQ29uc3RhbnRGb3JtYXR0ZXIsIGRlcHM6IFtdfSxcbiAgICB7cHJvdmlkZTogTmV3T3BlcmF0b3JGb3JtYXR0ZXIsIHVzZUNsYXNzOiBOZXdPcGVyYXRvckZvcm1hdHRlciwgZGVwczogW0NvbnN0YW50Rm9ybWF0dGVyXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBJbnRlcmFjdGlvbkZvcm1hdHRlcixcbiAgICAgICAgdXNlQ2xhc3M6IEludGVyYWN0aW9uRm9ybWF0dGVyLFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBHZXRQcm9wZXJ0eUZvcm1hdHRlcixcbiAgICAgICAgICAgIFNldFByb3BlcnR5Rm9ybWF0dGVyLFxuICAgICAgICAgICAgRnVuY3Rpb25Gb3JtYXR0ZXIsXG4gICAgICAgICAgICBNZXRob2RGb3JtYXR0ZXIsXG4gICAgICAgICAgICBDb25zdGFudEZvcm1hdHRlcixcbiAgICAgICAgICAgIEluT3BlcmF0b3JGb3JtYXR0ZXIsXG4gICAgICAgICAgICBOZXdPcGVyYXRvckZvcm1hdHRlclxuICAgICAgICBdXG4gICAgfVxuXTtcbiJdfQ==