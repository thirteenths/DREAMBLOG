import { ConstantEqualityComparer } from "./constant.equality-comparer";
import { ArgumentsEqualityComparer } from "./arguments.equality-comparer";
import { GetPropertyEqualityComparer } from "./get-property.equality-comparer";
import { InOperatorEqualityComparer } from "./in-operator.equality-comparer";
import { InstanceMethodEqualityComparer } from "./instance-method.equality-comparer";
import { ItEqualityComparer } from "./it.equality-comparer";
import { MethodEqualityComparer } from "./method.equality-comparer";
import { NewOperatorEqualityComparer } from "./new-operator.equality-comparer";
import { SetPropertyEqualityComparer } from "./set-property.equality-comparer";
import { ExpressionEqualityComparer } from "./expression.equality-comparer";
/**
 * @hidden
 */
export default [
    { provide: ConstantEqualityComparer, useClass: ConstantEqualityComparer, deps: [ItEqualityComparer] },
    { provide: ArgumentsEqualityComparer, useClass: ArgumentsEqualityComparer, deps: [ConstantEqualityComparer] },
    { provide: GetPropertyEqualityComparer, useClass: GetPropertyEqualityComparer, deps: [] },
    { provide: InOperatorEqualityComparer, useClass: InOperatorEqualityComparer, deps: [] },
    {
        provide: InstanceMethodEqualityComparer,
        useClass: InstanceMethodEqualityComparer,
        deps: [ArgumentsEqualityComparer]
    },
    { provide: ItEqualityComparer, useClass: ItEqualityComparer, deps: [] },
    { provide: MethodEqualityComparer, useClass: MethodEqualityComparer, deps: [ArgumentsEqualityComparer] },
    { provide: NewOperatorEqualityComparer, useClass: NewOperatorEqualityComparer, deps: [ArgumentsEqualityComparer] },
    { provide: SetPropertyEqualityComparer, useClass: SetPropertyEqualityComparer, deps: [ConstantEqualityComparer] },
    {
        provide: ExpressionEqualityComparer,
        useClass: ExpressionEqualityComparer,
        deps: [
            GetPropertyEqualityComparer,
            SetPropertyEqualityComparer,
            MethodEqualityComparer,
            InstanceMethodEqualityComparer,
            InOperatorEqualityComparer,
            NewOperatorEqualityComparer,
            ItEqualityComparer
        ]
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9tb3Evc3JjL2xpYi9leHByZXNzaW9uLmVxdWFsaXR5LWNvbXBhcmVycy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNyRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU1RTs7R0FFRztBQUNILGVBQWU7SUFDWCxFQUFDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsSUFBSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsRUFBQztJQUNuRyxFQUFDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxRQUFRLEVBQUUseUJBQXlCLEVBQUUsSUFBSSxFQUFFLENBQUMsd0JBQXdCLENBQUMsRUFBQztJQUMzRyxFQUFDLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsMkJBQTJCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUN2RixFQUFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQztJQUNyRjtRQUNJLE9BQU8sRUFBRSw4QkFBOEI7UUFDdkMsUUFBUSxFQUFFLDhCQUE4QjtRQUN4QyxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQztLQUNwQztJQUNELEVBQUMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO0lBQ3JFLEVBQUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFFBQVEsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFDO0lBQ3RHLEVBQUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxJQUFJLEVBQUUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFDO0lBQ2hILEVBQUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwyQkFBMkIsRUFBRSxJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFDO0lBQy9HO1FBQ0ksT0FBTyxFQUFFLDBCQUEwQjtRQUNuQyxRQUFRLEVBQUUsMEJBQTBCO1FBQ3BDLElBQUksRUFBRTtZQUNGLDJCQUEyQjtZQUMzQiwyQkFBMkI7WUFDM0Isc0JBQXNCO1lBQ3RCLDhCQUE4QjtZQUM5QiwwQkFBMEI7WUFDMUIsMkJBQTJCO1lBQzNCLGtCQUFrQjtTQUNyQjtLQUNKO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0YW50RXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuL2NvbnN0YW50LmVxdWFsaXR5LWNvbXBhcmVyXCI7XG5pbXBvcnQgeyBBcmd1bWVudHNFcXVhbGl0eUNvbXBhcmVyIH0gZnJvbSBcIi4vYXJndW1lbnRzLmVxdWFsaXR5LWNvbXBhcmVyXCI7XG5pbXBvcnQgeyBHZXRQcm9wZXJ0eUVxdWFsaXR5Q29tcGFyZXIgfSBmcm9tIFwiLi9nZXQtcHJvcGVydHkuZXF1YWxpdHktY29tcGFyZXJcIjtcbmltcG9ydCB7IEluT3BlcmF0b3JFcXVhbGl0eUNvbXBhcmVyIH0gZnJvbSBcIi4vaW4tb3BlcmF0b3IuZXF1YWxpdHktY29tcGFyZXJcIjtcbmltcG9ydCB7IEluc3RhbmNlTWV0aG9kRXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuL2luc3RhbmNlLW1ldGhvZC5lcXVhbGl0eS1jb21wYXJlclwiO1xuaW1wb3J0IHsgSXRFcXVhbGl0eUNvbXBhcmVyIH0gZnJvbSBcIi4vaXQuZXF1YWxpdHktY29tcGFyZXJcIjtcbmltcG9ydCB7IE1ldGhvZEVxdWFsaXR5Q29tcGFyZXIgfSBmcm9tIFwiLi9tZXRob2QuZXF1YWxpdHktY29tcGFyZXJcIjtcbmltcG9ydCB7IE5ld09wZXJhdG9yRXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuL25ldy1vcGVyYXRvci5lcXVhbGl0eS1jb21wYXJlclwiO1xuaW1wb3J0IHsgU2V0UHJvcGVydHlFcXVhbGl0eUNvbXBhcmVyIH0gZnJvbSBcIi4vc2V0LXByb3BlcnR5LmVxdWFsaXR5LWNvbXBhcmVyXCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uRXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuL2V4cHJlc3Npb24uZXF1YWxpdHktY29tcGFyZXJcIjtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IFtcbiAgICB7cHJvdmlkZTogQ29uc3RhbnRFcXVhbGl0eUNvbXBhcmVyLCB1c2VDbGFzczogQ29uc3RhbnRFcXVhbGl0eUNvbXBhcmVyLCBkZXBzOiBbSXRFcXVhbGl0eUNvbXBhcmVyXX0sXG4gICAge3Byb3ZpZGU6IEFyZ3VtZW50c0VxdWFsaXR5Q29tcGFyZXIsIHVzZUNsYXNzOiBBcmd1bWVudHNFcXVhbGl0eUNvbXBhcmVyLCBkZXBzOiBbQ29uc3RhbnRFcXVhbGl0eUNvbXBhcmVyXX0sXG4gICAge3Byb3ZpZGU6IEdldFByb3BlcnR5RXF1YWxpdHlDb21wYXJlciwgdXNlQ2xhc3M6IEdldFByb3BlcnR5RXF1YWxpdHlDb21wYXJlciwgZGVwczogW119LFxuICAgIHtwcm92aWRlOiBJbk9wZXJhdG9yRXF1YWxpdHlDb21wYXJlciwgdXNlQ2xhc3M6IEluT3BlcmF0b3JFcXVhbGl0eUNvbXBhcmVyLCBkZXBzOiBbXX0sXG4gICAge1xuICAgICAgICBwcm92aWRlOiBJbnN0YW5jZU1ldGhvZEVxdWFsaXR5Q29tcGFyZXIsXG4gICAgICAgIHVzZUNsYXNzOiBJbnN0YW5jZU1ldGhvZEVxdWFsaXR5Q29tcGFyZXIsXG4gICAgICAgIGRlcHM6IFtBcmd1bWVudHNFcXVhbGl0eUNvbXBhcmVyXVxuICAgIH0sXG4gICAge3Byb3ZpZGU6IEl0RXF1YWxpdHlDb21wYXJlciwgdXNlQ2xhc3M6IEl0RXF1YWxpdHlDb21wYXJlciwgZGVwczogW119LFxuICAgIHtwcm92aWRlOiBNZXRob2RFcXVhbGl0eUNvbXBhcmVyLCB1c2VDbGFzczogTWV0aG9kRXF1YWxpdHlDb21wYXJlciwgZGVwczogW0FyZ3VtZW50c0VxdWFsaXR5Q29tcGFyZXJdfSxcbiAgICB7cHJvdmlkZTogTmV3T3BlcmF0b3JFcXVhbGl0eUNvbXBhcmVyLCB1c2VDbGFzczogTmV3T3BlcmF0b3JFcXVhbGl0eUNvbXBhcmVyLCBkZXBzOiBbQXJndW1lbnRzRXF1YWxpdHlDb21wYXJlcl19LFxuICAgIHtwcm92aWRlOiBTZXRQcm9wZXJ0eUVxdWFsaXR5Q29tcGFyZXIsIHVzZUNsYXNzOiBTZXRQcm9wZXJ0eUVxdWFsaXR5Q29tcGFyZXIsIGRlcHM6IFtDb25zdGFudEVxdWFsaXR5Q29tcGFyZXJdfSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IEV4cHJlc3Npb25FcXVhbGl0eUNvbXBhcmVyLFxuICAgICAgICB1c2VDbGFzczogRXhwcmVzc2lvbkVxdWFsaXR5Q29tcGFyZXIsXG4gICAgICAgIGRlcHM6IFtcbiAgICAgICAgICAgIEdldFByb3BlcnR5RXF1YWxpdHlDb21wYXJlcixcbiAgICAgICAgICAgIFNldFByb3BlcnR5RXF1YWxpdHlDb21wYXJlcixcbiAgICAgICAgICAgIE1ldGhvZEVxdWFsaXR5Q29tcGFyZXIsXG4gICAgICAgICAgICBJbnN0YW5jZU1ldGhvZEVxdWFsaXR5Q29tcGFyZXIsXG4gICAgICAgICAgICBJbk9wZXJhdG9yRXF1YWxpdHlDb21wYXJlcixcbiAgICAgICAgICAgIE5ld09wZXJhdG9yRXF1YWxpdHlDb21wYXJlcixcbiAgICAgICAgICAgIEl0RXF1YWxpdHlDb21wYXJlclxuICAgICAgICBdXG4gICAgfSxcbl07XG5cbiJdfQ==