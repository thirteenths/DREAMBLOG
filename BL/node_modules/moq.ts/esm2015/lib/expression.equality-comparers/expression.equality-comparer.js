import { It } from "../reflector/expression-predicates";
import { GetPropertyExpression, InOperatorExpression, FunctionExpression, MethodExpression, NewOperatorExpression, SetPropertyExpression } from "../reflector/expressions";
/**
 * @hidden
 */
export class ExpressionEqualityComparer {
    constructor(getPropertyExpressionMatcher, setPropertyExpressionMatcher, methodExpressionMatcher, namedMethodExpressionMatcher, inOperatorExpressionMatcher, newOperatorExpressionMatcher, itEqualityComparer) {
        this.getPropertyExpressionMatcher = getPropertyExpressionMatcher;
        this.setPropertyExpressionMatcher = setPropertyExpressionMatcher;
        this.methodExpressionMatcher = methodExpressionMatcher;
        this.namedMethodExpressionMatcher = namedMethodExpressionMatcher;
        this.inOperatorExpressionMatcher = inOperatorExpressionMatcher;
        this.newOperatorExpressionMatcher = newOperatorExpressionMatcher;
        this.itEqualityComparer = itEqualityComparer;
    }
    equals(left, right) {
        if (left === right)
            return true;
        if (left instanceof It || right instanceof It) {
            return this.itEqualityComparer.equals(left, right);
        }
        if (left instanceof GetPropertyExpression && right instanceof GetPropertyExpression) {
            return this.getPropertyExpressionMatcher.equals(left, right);
        }
        if (left instanceof SetPropertyExpression && right instanceof SetPropertyExpression) {
            return this.setPropertyExpressionMatcher.equals(left, right);
        }
        if (left instanceof InOperatorExpression && right instanceof InOperatorExpression) {
            return this.inOperatorExpressionMatcher.equals(left, right);
        }
        if (left instanceof FunctionExpression && right instanceof FunctionExpression) {
            return this.methodExpressionMatcher.equals(left, right);
        }
        if (left instanceof MethodExpression && right instanceof MethodExpression) {
            return this.namedMethodExpressionMatcher.equals(left, right);
        }
        if (left instanceof NewOperatorExpression && right instanceof NewOperatorExpression) {
            return this.newOperatorExpressionMatcher.equals(left, right);
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi5lcXVhbGl0eS1jb21wYXJlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL21vcS9zcmMvbGliL2V4cHJlc3Npb24uZXF1YWxpdHktY29tcGFyZXJzL2V4cHJlc3Npb24uZXF1YWxpdHktY29tcGFyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hELE9BQU8sRUFDSCxxQkFBcUIsRUFDckIsb0JBQW9CLEVBQ3BCLGtCQUFrQixFQUNsQixnQkFBZ0IsRUFDaEIscUJBQXFCLEVBQ3JCLHFCQUFxQixFQUN4QixNQUFNLDBCQUEwQixDQUFDO0FBRWxDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDBCQUEwQjtJQUVuQyxZQUE2Qiw0QkFBeUQsRUFDekQsNEJBQXlELEVBQ3pELHVCQUErQyxFQUMvQyw0QkFBNEQsRUFDNUQsMkJBQXVELEVBQ3ZELDRCQUF5RCxFQUN6RCxrQkFBc0M7UUFOdEMsaUNBQTRCLEdBQTVCLDRCQUE0QixDQUE2QjtRQUN6RCxpQ0FBNEIsR0FBNUIsNEJBQTRCLENBQTZCO1FBQ3pELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBd0I7UUFDL0MsaUNBQTRCLEdBQTVCLDRCQUE0QixDQUFnQztRQUM1RCxnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQTRCO1FBQ3ZELGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBNkI7UUFDekQsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUVuRSxDQUFDO0lBRU0sTUFBTSxDQUFJLElBQW9CLEVBQUUsS0FBcUI7UUFDeEQsSUFBSSxJQUFJLEtBQUssS0FBSztZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQ2hDLElBQUksSUFBSSxZQUFZLEVBQUUsSUFBSSxLQUFLLFlBQVksRUFBRSxFQUFFO1lBQzNDLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdEQ7UUFDRCxJQUFJLElBQUksWUFBWSxxQkFBcUIsSUFBSSxLQUFLLFlBQVkscUJBQXFCLEVBQUU7WUFDakYsT0FBTyxJQUFJLENBQUMsNEJBQTRCLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNoRTtRQUNELElBQUksSUFBSSxZQUFZLHFCQUFxQixJQUFJLEtBQUssWUFBWSxxQkFBcUIsRUFBRTtZQUNqRixPQUFPLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2hFO1FBQ0QsSUFBSSxJQUFJLFlBQVksb0JBQW9CLElBQUksS0FBSyxZQUFZLG9CQUFvQixFQUFFO1lBQy9FLE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDL0Q7UUFDRCxJQUFJLElBQUksWUFBWSxrQkFBa0IsSUFBSSxLQUFLLFlBQVksa0JBQWtCLEVBQUU7WUFDM0UsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUMzRDtRQUNELElBQUksSUFBSSxZQUFZLGdCQUFnQixJQUFJLEtBQUssWUFBWSxnQkFBZ0IsRUFBRTtZQUN2RSxPQUFPLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2hFO1FBQ0QsSUFBSSxJQUFJLFlBQVkscUJBQXFCLElBQUksS0FBSyxZQUFZLHFCQUFxQixFQUFFO1lBQ2pGLE9BQU8sSUFBSSxDQUFDLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDaEU7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRQcm9wZXJ0eUVxdWFsaXR5Q29tcGFyZXIgfSBmcm9tIFwiLi9nZXQtcHJvcGVydHkuZXF1YWxpdHktY29tcGFyZXJcIjtcbmltcG9ydCB7IFNldFByb3BlcnR5RXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuL3NldC1wcm9wZXJ0eS5lcXVhbGl0eS1jb21wYXJlclwiO1xuaW1wb3J0IHsgTWV0aG9kRXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuL21ldGhvZC5lcXVhbGl0eS1jb21wYXJlclwiO1xuaW1wb3J0IHsgSW5zdGFuY2VNZXRob2RFcXVhbGl0eUNvbXBhcmVyIH0gZnJvbSBcIi4vaW5zdGFuY2UtbWV0aG9kLmVxdWFsaXR5LWNvbXBhcmVyXCI7XG5pbXBvcnQgeyBFeHByZXNzaW9ucyB9IGZyb20gXCIuLi9yZWZsZWN0b3IvZXhwcmVzc2lvbnNcIjtcbmltcG9ydCB7IEluT3BlcmF0b3JFcXVhbGl0eUNvbXBhcmVyIH0gZnJvbSBcIi4vaW4tb3BlcmF0b3IuZXF1YWxpdHktY29tcGFyZXJcIjtcbmltcG9ydCB7IE5ld09wZXJhdG9yRXF1YWxpdHlDb21wYXJlciB9IGZyb20gXCIuL25ldy1vcGVyYXRvci5lcXVhbGl0eS1jb21wYXJlclwiO1xuaW1wb3J0IHsgSXRFcXVhbGl0eUNvbXBhcmVyIH0gZnJvbSBcIi4vaXQuZXF1YWxpdHktY29tcGFyZXJcIjtcbmltcG9ydCB7IEl0IH0gZnJvbSBcIi4uL3JlZmxlY3Rvci9leHByZXNzaW9uLXByZWRpY2F0ZXNcIjtcbmltcG9ydCB7XG4gICAgR2V0UHJvcGVydHlFeHByZXNzaW9uLFxuICAgIEluT3BlcmF0b3JFeHByZXNzaW9uLFxuICAgIEZ1bmN0aW9uRXhwcmVzc2lvbixcbiAgICBNZXRob2RFeHByZXNzaW9uLFxuICAgIE5ld09wZXJhdG9yRXhwcmVzc2lvbixcbiAgICBTZXRQcm9wZXJ0eUV4cHJlc3Npb25cbn0gZnJvbSBcIi4uL3JlZmxlY3Rvci9leHByZXNzaW9uc1wiO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIEV4cHJlc3Npb25FcXVhbGl0eUNvbXBhcmVyIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZ2V0UHJvcGVydHlFeHByZXNzaW9uTWF0Y2hlcjogR2V0UHJvcGVydHlFcXVhbGl0eUNvbXBhcmVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2V0UHJvcGVydHlFeHByZXNzaW9uTWF0Y2hlcjogU2V0UHJvcGVydHlFcXVhbGl0eUNvbXBhcmVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbWV0aG9kRXhwcmVzc2lvbk1hdGNoZXI6IE1ldGhvZEVxdWFsaXR5Q29tcGFyZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBuYW1lZE1ldGhvZEV4cHJlc3Npb25NYXRjaGVyOiBJbnN0YW5jZU1ldGhvZEVxdWFsaXR5Q29tcGFyZXIsXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBpbk9wZXJhdG9yRXhwcmVzc2lvbk1hdGNoZXI6IEluT3BlcmF0b3JFcXVhbGl0eUNvbXBhcmVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbmV3T3BlcmF0b3JFeHByZXNzaW9uTWF0Y2hlcjogTmV3T3BlcmF0b3JFcXVhbGl0eUNvbXBhcmVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaXRFcXVhbGl0eUNvbXBhcmVyOiBJdEVxdWFsaXR5Q29tcGFyZXIpIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBlcXVhbHM8VD4obGVmdDogRXhwcmVzc2lvbnM8VD4sIHJpZ2h0OiBFeHByZXNzaW9uczxUPik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAobGVmdCA9PT0gcmlnaHQpIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAobGVmdCBpbnN0YW5jZW9mIEl0IHx8IHJpZ2h0IGluc3RhbmNlb2YgSXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0RXF1YWxpdHlDb21wYXJlci5lcXVhbHMobGVmdCwgcmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZWZ0IGluc3RhbmNlb2YgR2V0UHJvcGVydHlFeHByZXNzaW9uICYmIHJpZ2h0IGluc3RhbmNlb2YgR2V0UHJvcGVydHlFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9wZXJ0eUV4cHJlc3Npb25NYXRjaGVyLmVxdWFscyhsZWZ0LCByaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxlZnQgaW5zdGFuY2VvZiBTZXRQcm9wZXJ0eUV4cHJlc3Npb24gJiYgcmlnaHQgaW5zdGFuY2VvZiBTZXRQcm9wZXJ0eUV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFByb3BlcnR5RXhwcmVzc2lvbk1hdGNoZXIuZXF1YWxzKGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVmdCBpbnN0YW5jZW9mIEluT3BlcmF0b3JFeHByZXNzaW9uICYmIHJpZ2h0IGluc3RhbmNlb2YgSW5PcGVyYXRvckV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluT3BlcmF0b3JFeHByZXNzaW9uTWF0Y2hlci5lcXVhbHMobGVmdCwgcmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZWZ0IGluc3RhbmNlb2YgRnVuY3Rpb25FeHByZXNzaW9uICYmIHJpZ2h0IGluc3RhbmNlb2YgRnVuY3Rpb25FeHByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZXRob2RFeHByZXNzaW9uTWF0Y2hlci5lcXVhbHMobGVmdCwgcmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsZWZ0IGluc3RhbmNlb2YgTWV0aG9kRXhwcmVzc2lvbiAmJiByaWdodCBpbnN0YW5jZW9mIE1ldGhvZEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWVkTWV0aG9kRXhwcmVzc2lvbk1hdGNoZXIuZXF1YWxzKGxlZnQsIHJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGVmdCBpbnN0YW5jZW9mIE5ld09wZXJhdG9yRXhwcmVzc2lvbiAmJiByaWdodCBpbnN0YW5jZW9mIE5ld09wZXJhdG9yRXhwcmVzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV3T3BlcmF0b3JFeHByZXNzaW9uTWF0Y2hlci5lcXVhbHMobGVmdCwgcmlnaHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbiJdfQ==